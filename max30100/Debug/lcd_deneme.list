
lcd_deneme.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800c768  0800c768  0001c768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb54  0800cb54  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb54  0800cb54  0001cb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb5c  0800cb5c  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb5c  0800cb5c  0001cb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb60  0800cb60  0001cb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800cb64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202d8  2**0
                  CONTENTS
 10 .bss          00001f58  200002d8  200002d8  000202d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002230  20002230  000202d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011cbe  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032d4  00000000  00000000  00032009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f48  00000000  00000000  000352e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b85  00000000  00000000  00036228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00005bd7  00000000  00000000  00036dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014c2d  00000000  00000000  0003c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c973e  00000000  00000000  000515b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000514c  00000000  00000000  0011acf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c74c 	.word	0x0800c74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	0800c74c 	.word	0x0800c74c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f88:	b091      	sub	sp, #68	; 0x44
 8000f8a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 ff9e 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f9c6 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f000 fa5a 	bl	800144c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f98:	f000 fa2a 	bl	80013f0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000f9c:	f007 fd2e 	bl	80089fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//  Max_id = Check_MAX();
  Init_MAX30100();
 8000fa0:	f000 fafe 	bl	80015a0 <Init_MAX30100>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Sensorden raw data aliniyor
	  raw_res = Read_MAX30100();
 8000fa4:	f000 fb30 	bl	8001608 <Read_MAX30100>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4abf      	ldr	r2, [pc, #764]	; (80012a8 <main+0x324>)
 8000fac:	6013      	str	r3, [r2, #0]

	  //DC offset filtresi uyguladigimiz sinyal, artık elimizde AC sinyal var
	  acIR  = dcRemoval((float)raw_res.raw_IR, acIR.w);
 8000fae:	4bbe      	ldr	r3, [pc, #760]	; (80012a8 <main+0x324>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fba:	4bbc      	ldr	r3, [pc, #752]	; (80012ac <main+0x328>)
 8000fbc:	ed93 7a00 	vldr	s14, [r3]
 8000fc0:	eef0 0a47 	vmov.f32	s1, s14
 8000fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc8:	f000 fb6a 	bl	80016a0 <dcRemoval>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	eef0 7a60 	vmov.f32	s15, s1
 8000fd4:	4bb5      	ldr	r3, [pc, #724]	; (80012ac <main+0x328>)
 8000fd6:	ed83 7a00 	vstr	s14, [r3]
 8000fda:	edc3 7a01 	vstr	s15, [r3, #4]
	  acRED = dcRemoval((float)raw_res.raw_RED, acRED.w);
 8000fde:	4bb2      	ldr	r3, [pc, #712]	; (80012a8 <main+0x324>)
 8000fe0:	885b      	ldrh	r3, [r3, #2]
 8000fe2:	ee07 3a90 	vmov	s15, r3
 8000fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fea:	4bb1      	ldr	r3, [pc, #708]	; (80012b0 <main+0x32c>)
 8000fec:	ed93 7a00 	vldr	s14, [r3]
 8000ff0:	eef0 0a47 	vmov.f32	s1, s14
 8000ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff8:	f000 fb52 	bl	80016a0 <dcRemoval>
 8000ffc:	eeb0 7a40 	vmov.f32	s14, s0
 8001000:	eef0 7a60 	vmov.f32	s15, s1
 8001004:	4baa      	ldr	r3, [pc, #680]	; (80012b0 <main+0x32c>)
 8001006:	ed83 7a00 	vstr	s14, [r3]
 800100a:	edc3 7a01 	vstr	s15, [r3, #4]

	  //Sinyale MeanDiffer filtresini uyguluyoruz
	  md_res.md_IR  = MeanDiff(acIR.result, &mean_IRres);
 800100e:	4ba7      	ldr	r3, [pc, #668]	; (80012ac <main+0x328>)
 8001010:	edd3 7a01 	vldr	s15, [r3, #4]
 8001014:	48a7      	ldr	r0, [pc, #668]	; (80012b4 <main+0x330>)
 8001016:	eeb0 0a67 	vmov.f32	s0, s15
 800101a:	f000 fb85 	bl	8001728 <MeanDiff>
 800101e:	eef0 7a40 	vmov.f32	s15, s0
 8001022:	4ba5      	ldr	r3, [pc, #660]	; (80012b8 <main+0x334>)
 8001024:	edc3 7a00 	vstr	s15, [r3]
	  md_res.md_RED = MeanDiff(acRED.result, &mean_REDres);
 8001028:	4ba1      	ldr	r3, [pc, #644]	; (80012b0 <main+0x32c>)
 800102a:	edd3 7a01 	vldr	s15, [r3, #4]
 800102e:	48a3      	ldr	r0, [pc, #652]	; (80012bc <main+0x338>)
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	f000 fb78 	bl	8001728 <MeanDiff>
 8001038:	eef0 7a40 	vmov.f32	s15, s0
 800103c:	4b9e      	ldr	r3, [pc, #632]	; (80012b8 <main+0x334>)
 800103e:	edc3 7a01 	vstr	s15, [r3, #4]

	  //Sinyale LPF uyguluyoruz
	  lpbwf_res.lpbwf_IR  = LowPassButterWorthFilter(md_res.md_IR, &bwf_IRres);
 8001042:	4b9d      	ldr	r3, [pc, #628]	; (80012b8 <main+0x334>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	489d      	ldr	r0, [pc, #628]	; (80012c0 <main+0x33c>)
 800104a:	eeb0 0a67 	vmov.f32	s0, s15
 800104e:	f000 fbdf 	bl	8001810 <LowPassButterWorthFilter>
 8001052:	eef0 7a40 	vmov.f32	s15, s0
 8001056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800105a:	ee17 3a90 	vmov	r3, s15
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b98      	ldr	r3, [pc, #608]	; (80012c4 <main+0x340>)
 8001062:	801a      	strh	r2, [r3, #0]
	  lpbwf_res.lpbwf_RED = LowPassButterWorthFilter(md_res.md_RED, &bwf_REDres);
 8001064:	4b94      	ldr	r3, [pc, #592]	; (80012b8 <main+0x334>)
 8001066:	edd3 7a01 	vldr	s15, [r3, #4]
 800106a:	4897      	ldr	r0, [pc, #604]	; (80012c8 <main+0x344>)
 800106c:	eeb0 0a67 	vmov.f32	s0, s15
 8001070:	f000 fbce 	bl	8001810 <LowPassButterWorthFilter>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b90      	ldr	r3, [pc, #576]	; (80012c4 <main+0x340>)
 8001084:	805a      	strh	r2, [r3, #2]

	  irACValueSqSum += acIR.result * acIR.result;
 8001086:	4b91      	ldr	r3, [pc, #580]	; (80012cc <main+0x348>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	ee07 3a90 	vmov	s15, r3
 800108e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <main+0x328>)
 8001094:	edd3 6a01 	vldr	s13, [r3, #4]
 8001098:	4b84      	ldr	r3, [pc, #528]	; (80012ac <main+0x328>)
 800109a:	edd3 7a01 	vldr	s15, [r3, #4]
 800109e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010aa:	ee17 2a90 	vmov	r2, s15
 80010ae:	4b87      	ldr	r3, [pc, #540]	; (80012cc <main+0x348>)
 80010b0:	601a      	str	r2, [r3, #0]
	  redACValueSqSum += acRED.result * acRED.result;
 80010b2:	4b87      	ldr	r3, [pc, #540]	; (80012d0 <main+0x34c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010be:	4b7c      	ldr	r3, [pc, #496]	; (80012b0 <main+0x32c>)
 80010c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80010c4:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <main+0x32c>)
 80010c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d6:	ee17 2a90 	vmov	r2, s15
 80010da:	4b7d      	ldr	r3, [pc, #500]	; (80012d0 <main+0x34c>)
 80010dc:	601a      	str	r2, [r3, #0]
	  samplesRecorded++;
 80010de:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <main+0x350>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	3301      	adds	r3, #1
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	4b7b      	ldr	r3, [pc, #492]	; (80012d4 <main+0x350>)
 80010e8:	801a      	strh	r2, [r3, #0]

	  if(detectPulse(lpbwf_res.lpbwf_IR) && samplesRecorded > 0)
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <main+0x340>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	f000 fbcd 	bl	8001898 <detectPulse>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8094 	beq.w	800122e <main+0x2aa>
 8001106:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <main+0x350>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 808f 	beq.w	800122e <main+0x2aa>
	  {
		  pulsesDetected++;
 8001110:	4b71      	ldr	r3, [pc, #452]	; (80012d8 <main+0x354>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b6f      	ldr	r3, [pc, #444]	; (80012d8 <main+0x354>)
 800111a:	801a      	strh	r2, [r3, #0]

		  float red_log_rms = log( sqrt(redACValueSqSum/samplesRecorded) );
 800111c:	4b6c      	ldr	r3, [pc, #432]	; (80012d0 <main+0x34c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a6c      	ldr	r2, [pc, #432]	; (80012d4 <main+0x350>)
 8001122:	8812      	ldrh	r2, [r2, #0]
 8001124:	fbb3 f3f2 	udiv	r3, r3, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9eb 	bl	8000504 <__aeabi_ui2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	ec43 2b10 	vmov	d0, r2, r3
 8001136:	f00b f83d 	bl	800c1b4 <sqrt>
 800113a:	eeb0 7a40 	vmov.f32	s14, s0
 800113e:	eef0 7a60 	vmov.f32	s15, s1
 8001142:	eeb0 0a47 	vmov.f32	s0, s14
 8001146:	eef0 0a67 	vmov.f32	s1, s15
 800114a:	f00a fff5 	bl	800c138 <log>
 800114e:	ec53 2b10 	vmov	r2, r3, d0
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fd47 	bl	8000be8 <__aeabi_d2f>
 800115a:	4603      	mov	r3, r0
 800115c:	613b      	str	r3, [r7, #16]
		  float ir_log_rms = log( sqrt(irACValueSqSum/samplesRecorded) );
 800115e:	4b5b      	ldr	r3, [pc, #364]	; (80012cc <main+0x348>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <main+0x350>)
 8001164:	8812      	ldrh	r2, [r2, #0]
 8001166:	fbb3 f3f2 	udiv	r3, r3, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9ca 	bl	8000504 <__aeabi_ui2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	ec43 2b10 	vmov	d0, r2, r3
 8001178:	f00b f81c 	bl	800c1b4 <sqrt>
 800117c:	eeb0 7a40 	vmov.f32	s14, s0
 8001180:	eef0 7a60 	vmov.f32	s15, s1
 8001184:	eeb0 0a47 	vmov.f32	s0, s14
 8001188:	eef0 0a67 	vmov.f32	s1, s15
 800118c:	f00a ffd4 	bl	800c138 <log>
 8001190:	ec53 2b10 	vmov	r2, r3, d0
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fd26 	bl	8000be8 <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	60fb      	str	r3, [r7, #12]
		  float ratioRMS = 0.0f;
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
		  if(red_log_rms != 0.0f && ir_log_rms != 0.0f)
 80011a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	d00e      	beq.n	80011d2 <main+0x24e>
 80011b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d007      	beq.n	80011d2 <main+0x24e>
		  {
			  ratioRMS = red_log_rms / ir_log_rms;
 80011c2:	edd7 6a04 	vldr	s13, [r7, #16]
 80011c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ce:	edc7 7a05 	vstr	s15, [r7, #20]
		  }
		  currentSPO2Value = 110.0 - 18.0 * ratioRMS;
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff f9b8 	bl	8000548 <__aeabi_f2d>
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <main+0x358>)
 80011de:	f7ff fa0b 	bl	80005f8 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	493d      	ldr	r1, [pc, #244]	; (80012e0 <main+0x35c>)
 80011ec:	f7ff f84c 	bl	8000288 <__aeabi_dsub>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcd6 	bl	8000ba8 <__aeabi_d2uiz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <main+0x360>)
 8001200:	6013      	str	r3, [r2, #0]

		  if(pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <main+0x354>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	4a38      	ldr	r2, [pc, #224]	; (80012e8 <main+0x364>)
 8001208:	fba2 1203 	umull	r1, r2, r2, r3
 800120c:	0952      	lsrs	r2, r2, #5
 800120e:	2164      	movs	r1, #100	; 0x64
 8001210:	fb01 f202 	mul.w	r2, r1, r2
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	b29b      	uxth	r3, r3
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <main+0x2aa>
		  {
			  irACValueSqSum  = 0;
 800121c:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <main+0x348>)
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
			  redACValueSqSum = 0;
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <main+0x34c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
			  samplesRecorded = 0;
 8001228:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <main+0x350>)
 800122a:	2200      	movs	r2, #0
 800122c:	801a      	strh	r2, [r3, #0]
		  }
	  }

	  int len = sprintf(USB_buffer,
	                    "%d,%d,%f,%f,%f,%f,%u,%u\r\n",
	                    raw_res.raw_IR, raw_res.raw_RED,
 800122e:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <main+0x324>)
 8001230:	881b      	ldrh	r3, [r3, #0]
	  int len = sprintf(USB_buffer,
 8001232:	461e      	mov	r6, r3
	                    raw_res.raw_IR, raw_res.raw_RED,
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <main+0x324>)
 8001236:	885b      	ldrh	r3, [r3, #2]
	  int len = sprintf(USB_buffer,
 8001238:	607b      	str	r3, [r7, #4]
	                    acIR.result, acRED.result,
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <main+0x328>)
 800123c:	685b      	ldr	r3, [r3, #4]
	  int len = sprintf(USB_buffer,
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4604      	mov	r4, r0
 8001246:	460d      	mov	r5, r1
	                    acIR.result, acRED.result,
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <main+0x32c>)
 800124a:	685b      	ldr	r3, [r3, #4]
	  int len = sprintf(USB_buffer,
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4680      	mov	r8, r0
 8001254:	4689      	mov	r9, r1
	                    md_res.md_IR, md_res.md_RED,
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <main+0x334>)
 8001258:	681b      	ldr	r3, [r3, #0]
	  int len = sprintf(USB_buffer,
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	4682      	mov	sl, r0
 8001262:	468b      	mov	fp, r1
	                    md_res.md_IR, md_res.md_RED,
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <main+0x334>)
 8001266:	685b      	ldr	r3, [r3, #4]
	  int len = sprintf(USB_buffer,
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
	                    lpbwf_res.lpbwf_IR, lpbwf_res.lpbwf_RED);
 8001272:	4914      	ldr	r1, [pc, #80]	; (80012c4 <main+0x340>)
 8001274:	8809      	ldrh	r1, [r1, #0]
	  int len = sprintf(USB_buffer,
 8001276:	4608      	mov	r0, r1
	                    lpbwf_res.lpbwf_IR, lpbwf_res.lpbwf_RED);
 8001278:	4912      	ldr	r1, [pc, #72]	; (80012c4 <main+0x340>)
 800127a:	8849      	ldrh	r1, [r1, #2]
	  int len = sprintf(USB_buffer,
 800127c:	9109      	str	r1, [sp, #36]	; 0x24
 800127e:	9008      	str	r0, [sp, #32]
 8001280:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001284:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001288:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800128c:	e9cd 4500 	strd	r4, r5, [sp]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4632      	mov	r2, r6
 8001294:	4915      	ldr	r1, [pc, #84]	; (80012ec <main+0x368>)
 8001296:	4816      	ldr	r0, [pc, #88]	; (80012f0 <main+0x36c>)
 8001298:	f008 fdf2 	bl	8009e80 <siprintf>
 800129c:	60b8      	str	r0, [r7, #8]

	  CDC_Transmit_FS((uint8_t*)USB_buffer, len);
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	4619      	mov	r1, r3
 80012a4:	e026      	b.n	80012f4 <main+0x370>
 80012a6:	bf00      	nop
 80012a8:	200002f8 	.word	0x200002f8
 80012ac:	200002fc 	.word	0x200002fc
 80012b0:	20000304 	.word	0x20000304
 80012b4:	20000318 	.word	0x20000318
 80012b8:	2000030c 	.word	0x2000030c
 80012bc:	20000360 	.word	0x20000360
 80012c0:	200003a8 	.word	0x200003a8
 80012c4:	20000314 	.word	0x20000314
 80012c8:	200003b0 	.word	0x200003b0
 80012cc:	200003b8 	.word	0x200003b8
 80012d0:	200003bc 	.word	0x200003bc
 80012d4:	200003c0 	.word	0x200003c0
 80012d8:	200003c2 	.word	0x200003c2
 80012dc:	40320000 	.word	0x40320000
 80012e0:	405b8000 	.word	0x405b8000
 80012e4:	200003c4 	.word	0x200003c4
 80012e8:	51eb851f 	.word	0x51eb851f
 80012ec:	0800c768 	.word	0x0800c768
 80012f0:	200003cc 	.word	0x200003cc
 80012f4:	4807      	ldr	r0, [pc, #28]	; (8001314 <main+0x390>)
 80012f6:	f007 fc3f 	bl	8008b78 <CDC_Transmit_FS>

	  balanceIntesities(acIR.w, acRED.w);
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <main+0x394>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <main+0x398>)
 8001302:	ed93 7a00 	vldr	s14, [r3]
 8001306:	eef0 0a47 	vmov.f32	s1, s14
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	f000 fbcb 	bl	8001aa8 <balanceIntesities>
  {
 8001312:	e647      	b.n	8000fa4 <main+0x20>
 8001314:	200003cc 	.word	0x200003cc
 8001318:	200002fc 	.word	0x200002fc
 800131c:	20000304 	.word	0x20000304

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b094      	sub	sp, #80	; 0x50
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	2230      	movs	r2, #48	; 0x30
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f008 fe09 	bl	8009f46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	f107 030c 	add.w	r3, r7, #12
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <SystemClock_Config+0xc8>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <SystemClock_Config+0xc8>)
 800134e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001352:	6413      	str	r3, [r2, #64]	; 0x40
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <SystemClock_Config+0xc8>)
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <SystemClock_Config+0xcc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a20      	ldr	r2, [pc, #128]	; (80013ec <SystemClock_Config+0xcc>)
 800136a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <SystemClock_Config+0xcc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001390:	2304      	movs	r3, #4
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001394:	2348      	movs	r3, #72	; 0x48
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001398:	2302      	movs	r3, #2
 800139a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800139c:	2303      	movs	r3, #3
 800139e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fb65 	bl	8004a74 <HAL_RCC_OscConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013b0:	f000 f8ac 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b4:	230f      	movs	r3, #15
 80013b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2102      	movs	r1, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fdc7 	bl	8004f64 <HAL_RCC_ClockConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013dc:	f000 f896 	bl	800150c <Error_Handler>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3750      	adds	r7, #80	; 0x50
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40007000 	.word	0x40007000

080013f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C2_Init+0x50>)
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <MX_I2C2_Init+0x54>)
 80013f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_I2C2_Init+0x50>)
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <MX_I2C2_Init+0x58>)
 80013fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C2_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_I2C2_Init+0x50>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_I2C2_Init+0x50>)
 800140e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001412:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_I2C2_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_I2C2_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <MX_I2C2_Init+0x50>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_I2C2_Init+0x50>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_I2C2_Init+0x50>)
 800142e:	f001 f8ab 	bl	8002588 <HAL_I2C_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001438:	f000 f868 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	2000044c 	.word	0x2000044c
 8001444:	40005800 	.word	0x40005800
 8001448:	000186a0 	.word	0x000186a0

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <MX_GPIO_Init+0xb8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a26      	ldr	r2, [pc, #152]	; (8001504 <MX_GPIO_Init+0xb8>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_GPIO_Init+0xb8>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <MX_GPIO_Init+0xb8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a1f      	ldr	r2, [pc, #124]	; (8001504 <MX_GPIO_Init+0xb8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_GPIO_Init+0xb8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <MX_GPIO_Init+0xb8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <MX_GPIO_Init+0xb8>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_GPIO_Init+0xb8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_GPIO_Init+0xb8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <MX_GPIO_Init+0xb8>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_GPIO_Init+0xb8>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <MX_GPIO_Init+0xbc>)
 80014da:	f001 f83b 	bl	8002554 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80014de:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 80014e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_GPIO_Init+0xbc>)
 80014f8:	f000 fe90 	bl	800221c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fc:	bf00      	nop
 80014fe:	3728      	adds	r7, #40	; 0x28
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40020c00 	.word	0x40020c00

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <MAX30100_WriteReg>:

extern HAL_StatusTypeDef cnt;
extern I2C_HandleTypeDef hi2c2;

void MAX30100_WriteReg(uint8_t reg, uint8_t value)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af04      	add	r7, sp, #16
 800151e:	4603      	mov	r3, r0
 8001520:	460a      	mov	r2, r1
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	71bb      	strb	r3, [r7, #6]
    cnt = HAL_I2C_Mem_Write(&hi2c2,
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	b29a      	uxth	r2, r3
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	9302      	str	r3, [sp, #8]
 8001532:	2301      	movs	r3, #1
 8001534:	9301      	str	r3, [sp, #4]
 8001536:	1dbb      	adds	r3, r7, #6
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	21ae      	movs	r1, #174	; 0xae
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MAX30100_WriteReg+0x3c>)
 8001540:	f001 f966 	bl	8002810 <HAL_I2C_Mem_Write>
 8001544:	4603      	mov	r3, r0
 8001546:	461a      	mov	r2, r3
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <MAX30100_WriteReg+0x40>)
 800154a:	701a      	strb	r2, [r3, #0]
                      reg,
                      I2C_MEMADD_SIZE_8BIT,
                      &value,
                      1,
                      HAL_MAX_DELAY);
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000044c 	.word	0x2000044c
 8001558:	200002f4 	.word	0x200002f4

0800155c <MAX30100_ReadReg>:

uint8_t MAX30100_ReadReg(uint8_t reg)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af04      	add	r7, sp, #16
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    cnt = HAL_I2C_Mem_Read(&hi2c2,
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	b29a      	uxth	r2, r3
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	f107 030f 	add.w	r3, r7, #15
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	2301      	movs	r3, #1
 800157c:	21ae      	movs	r1, #174	; 0xae
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MAX30100_ReadReg+0x3c>)
 8001580:	f001 fa40 	bl	8002a04 <HAL_I2C_Mem_Read>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <MAX30100_ReadReg+0x40>)
 800158a:	701a      	strb	r2, [r3, #0]
                     reg,
                     I2C_MEMADD_SIZE_8BIT,
                     &value,
                     1,
                     HAL_MAX_DELAY);
    return value;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	2000044c 	.word	0x2000044c
 800159c:	200002f4 	.word	0x200002f4

080015a0 <Init_MAX30100>:

void Init_MAX30100(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
    // 1. Reset sensör (MODE_CONFIG registerindeki reset biti ile)
    MAX30100_WriteReg(MAX30100_MODE_CONFIG, 0x40);
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	2006      	movs	r0, #6
 80015a8:	f7ff ffb6 	bl	8001518 <MAX30100_WriteReg>
    HAL_Delay(500);
 80015ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015b0:	f000 fcfe 	bl	8001fb0 <HAL_Delay>

    MAX30100_WriteReg(MAX30100_MODE_CONFIG, MAX30100_SPO2_HR_MODE);
 80015b4:	2103      	movs	r1, #3
 80015b6:	2006      	movs	r0, #6
 80015b8:	f7ff ffae 	bl	8001518 <MAX30100_WriteReg>
    HAL_Delay(500);
 80015bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015c0:	f000 fcf6 	bl	8001fb0 <HAL_Delay>

    // 3. SpO2 konfigürasyonu
    MAX30100_WriteReg(MAX30100_SPO2_CONFIG, 0x07);
 80015c4:	2107      	movs	r1, #7
 80015c6:	2007      	movs	r0, #7
 80015c8:	f7ff ffa6 	bl	8001518 <MAX30100_WriteReg>
    HAL_Delay(500);
 80015cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d0:	f000 fcee 	bl	8001fb0 <HAL_Delay>

    // 4. LED akımları ayarla (IR ve RED LED akımı)
    MAX30100_WriteReg(MAX30100_LED_CONFIG, 0x86);
 80015d4:	2186      	movs	r1, #134	; 0x86
 80015d6:	2009      	movs	r0, #9
 80015d8:	f7ff ff9e 	bl	8001518 <MAX30100_WriteReg>
    HAL_Delay(500);
 80015dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015e0:	f000 fce6 	bl	8001fb0 <HAL_Delay>

    // 5. FIFO göstergelerini sıfırla
    MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00);
 80015e4:	2100      	movs	r1, #0
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff ff96 	bl	8001518 <MAX30100_WriteReg>
    MAX30100_WriteReg(MAX30100_OVRFLOW_CNT, 0x00);
 80015ec:	2100      	movs	r1, #0
 80015ee:	2003      	movs	r0, #3
 80015f0:	f7ff ff92 	bl	8001518 <MAX30100_WriteReg>
    MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00);
 80015f4:	2100      	movs	r1, #0
 80015f6:	2004      	movs	r0, #4
 80015f8:	f7ff ff8e 	bl	8001518 <MAX30100_WriteReg>
    HAL_Delay(500);
 80015fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001600:	f000 fcd6 	bl	8001fb0 <HAL_Delay>

    // 6. Interruptları aç (örn: yeni veri geldiğinde INT_ENABLE=0x10)
//    MAX30100_WriteReg(MAX30100_INT_ENABLE, 0x10);
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <Read_MAX30100>:

raw_data read_data;
uint8_t received_data[4];

raw_data Read_MAX30100()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
	received_data[0] = MAX30100_ReadReg(MAX30100_FIFO_DT_REG);
 800160e:	2005      	movs	r0, #5
 8001610:	f7ff ffa4 	bl	800155c <MAX30100_ReadReg>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <Read_MAX30100+0x8c>)
 800161a:	701a      	strb	r2, [r3, #0]
	received_data[1] = MAX30100_ReadReg(MAX30100_FIFO_DT_REG);
 800161c:	2005      	movs	r0, #5
 800161e:	f7ff ff9d 	bl	800155c <MAX30100_ReadReg>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <Read_MAX30100+0x8c>)
 8001628:	705a      	strb	r2, [r3, #1]
	received_data[2] = MAX30100_ReadReg(MAX30100_FIFO_DT_REG);
 800162a:	2005      	movs	r0, #5
 800162c:	f7ff ff96 	bl	800155c <MAX30100_ReadReg>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <Read_MAX30100+0x8c>)
 8001636:	709a      	strb	r2, [r3, #2]
	received_data[3] = MAX30100_ReadReg(MAX30100_FIFO_DT_REG);
 8001638:	2005      	movs	r0, #5
 800163a:	f7ff ff8f 	bl	800155c <MAX30100_ReadReg>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <Read_MAX30100+0x8c>)
 8001644:	70da      	strb	r2, [r3, #3]

	read_data.raw_IR = (received_data[0]<<8) | received_data[1];
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <Read_MAX30100+0x8c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <Read_MAX30100+0x8c>)
 8001650:	785b      	ldrb	r3, [r3, #1]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <Read_MAX30100+0x90>)
 800165c:	801a      	strh	r2, [r3, #0]
	read_data.raw_RED = (received_data[2]<<8) | received_data[3];
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <Read_MAX30100+0x8c>)
 8001660:	789b      	ldrb	r3, [r3, #2]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <Read_MAX30100+0x8c>)
 8001668:	78db      	ldrb	r3, [r3, #3]
 800166a:	b21b      	sxth	r3, r3
 800166c:	4313      	orrs	r3, r2
 800166e:	b21b      	sxth	r3, r3
 8001670:	b29a      	uxth	r2, r3
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <Read_MAX30100+0x90>)
 8001674:	805a      	strh	r2, [r3, #2]

	return read_data;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <Read_MAX30100+0x90>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	2300      	movs	r3, #0
 800167e:	88ba      	ldrh	r2, [r7, #4]
 8001680:	f362 030f 	bfi	r3, r2, #0, #16
 8001684:	88fa      	ldrh	r2, [r7, #6]
 8001686:	f362 431f 	bfi	r3, r2, #16, #16
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200004a4 	.word	0x200004a4
 8001698:	200004a0 	.word	0x200004a0
 800169c:	00000000 	.word	0x00000000

080016a0 <dcRemoval>:

dcFilter_t dcRemoval(float x, float prev_w)
{
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80016aa:	edc7 0a02 	vstr	s1, [r7, #8]
    dcFilter_t filtered;
    filtered.w = x + 0.95 * prev_w;
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f7fe ff4a 	bl	8000548 <__aeabi_f2d>
 80016b4:	4604      	mov	r4, r0
 80016b6:	460d      	mov	r5, r1
 80016b8:	68b8      	ldr	r0, [r7, #8]
 80016ba:	f7fe ff45 	bl	8000548 <__aeabi_f2d>
 80016be:	a318      	add	r3, pc, #96	; (adr r3, 8001720 <dcRemoval+0x80>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ff98 	bl	80005f8 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fddc 	bl	800028c <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa84 	bl	8000be8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	613b      	str	r3, [r7, #16]
    filtered.result = filtered.w - prev_w;
 80016e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80016e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	edc7 7a05 	vstr	s15, [r7, #20]

    return filtered;
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	f107 0210 	add.w	r2, r7, #16
 80016fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001700:	e883 0003 	stmia.w	r3, {r0, r1}
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	ee07 2a10 	vmov	s14, r2
 800170c:	ee07 3a90 	vmov	s15, r3
}
 8001710:	eeb0 0a47 	vmov.f32	s0, s14
 8001714:	eef0 0a67 	vmov.f32	s1, s15
 8001718:	3720      	adds	r7, #32
 800171a:	46bd      	mov	sp, r7
 800171c:	bdb0      	pop	{r4, r5, r7, pc}
 800171e:	bf00      	nop
 8001720:	66666666 	.word	0x66666666
 8001724:	3fee6666 	.word	0x3fee6666

08001728 <MeanDiff>:

float MeanDiff(float M, meanDiffFilter_t* filterValues)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001732:	6038      	str	r0, [r7, #0]
	float avg = 0;
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
	// 1) Pencereden çıkacak EN eski örneği toplamdan düş
	filterValues->sum -= filterValues->values[filterValues->index];
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	// 2) Yeni örneği mevcut slot'a yaz
	filterValues->values[filterValues->index] = M;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]

	// 3) Toplama yeni örneği ekle
	filterValues->sum += filterValues->values[filterValues->index];
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

	// 4) Yazma işaretçisini bir ileri al
	filterValues->index++;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001790:	3301      	adds	r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80017a0:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MeanDiff+0xe0>)
 80017a2:	fba3 1302 	umull	r1, r3, r3, r2
 80017a6:	08d9      	lsrs	r1, r3, #3
 80017a8:	460b      	mov	r3, r1
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a5b      	subs	r3, r3, r1
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	// 5) Isınma: pencere dolana kadar bölen 'count'u artır
	if(filterValues->count < MEAN_FILTER_SIZE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017be:	2b0e      	cmp	r3, #14
 80017c0:	d807      	bhi.n	80017d2 <MeanDiff+0xaa>
		filterValues->count++;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017c8:	3301      	adds	r3, #1
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	// 6) Anlık ortalamayı hesapla
	avg = filterValues->sum / filterValues->count;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ea:	edc7 7a03 	vstr	s15, [r7, #12]

	// 7) Çıkış: ORTALAMA - MEVCUT
	return avg - M;
 80017ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80017f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	88888889 	.word	0x88888889
 800180c:	00000000 	.word	0x00000000

08001810 <LowPassButterWorthFilter>:

float LowPassButterWorthFilter(float x, butterworthFilter* filterResult)
{
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	ed87 0a01 	vstr	s0, [r7, #4]
 800181a:	6038      	str	r0, [r7, #0]
	filterResult->v[0] = filterResult->v[1];
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	601a      	str	r2, [r3, #0]

	//Fs = 100Hz and Fc= 10Hz
	filterResult->v[1] = (2.452372752527856026e-1 * x) + (0.50952544949442879485 * filterResult->v[0]);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7fe fe8f 	bl	8000548 <__aeabi_f2d>
 800182a:	a317      	add	r3, pc, #92	; (adr r3, 8001888 <LowPassButterWorthFilter+0x78>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fee2 	bl	80005f8 <__aeabi_dmul>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4614      	mov	r4, r2
 800183a:	461d      	mov	r5, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe81 	bl	8000548 <__aeabi_f2d>
 8001846:	a312      	add	r3, pc, #72	; (adr r3, 8001890 <LowPassButterWorthFilter+0x80>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fed4 	bl	80005f8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4620      	mov	r0, r4
 8001856:	4629      	mov	r1, r5
 8001858:	f7fe fd18 	bl	800028c <__adddf3>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff f9c0 	bl	8000be8 <__aeabi_d2f>
 8001868:	4602      	mov	r2, r0
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	605a      	str	r2, [r3, #4]

//	Fs = 100Hz and Fc = 4Hz
//	filterResult->v[1] = (1.367287359973195227e-1 * x) + (0.72654252800536101020 * filterResult->v[0]);

	return filterResult->v[0] + filterResult->v[1];
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	ed93 7a00 	vldr	s14, [r3]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	edd3 7a01 	vldr	s15, [r3, #4]
 800187a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	5e7c4548 	.word	0x5e7c4548
 800188c:	3fcf63ef 	.word	0x3fcf63ef
 8001890:	50c1dd5c 	.word	0x50c1dd5c
 8001894:	3fe04e08 	.word	0x3fe04e08

08001898 <detectPulse>:
uint32_t valuesBPMSum = 0;
uint8_t valuesBPMCount = 0;
uint8_t bpmIndex = 0;

bool detectPulse(float sensor_value)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	ed87 0a01 	vstr	s0, [r7, #4]
  static float prev_sensor_value = 0;
  static uint8_t values_went_down = 0;
  static uint32_t currentBeat = 0;
  static uint32_t lastBeat = 0;

  if(sensor_value > PULSE_MAX_THRESHOLD)
 80018a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001a68 <detectPulse+0x1d0>
 80018aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b2:	dd14      	ble.n	80018de <detectPulse+0x46>
  {
	currentPulseDetectorState = PULSE_IDLE;
 80018b4:	4b6d      	ldr	r3, [pc, #436]	; (8001a6c <detectPulse+0x1d4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
	prev_sensor_value = 0;
 80018ba:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <detectPulse+0x1d8>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	lastBeat = 0;
 80018c2:	4b6c      	ldr	r3, [pc, #432]	; (8001a74 <detectPulse+0x1dc>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
	currentBeat = 0;
 80018c8:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <detectPulse+0x1e0>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
	values_went_down = 0;
 80018ce:	4b6b      	ldr	r3, [pc, #428]	; (8001a7c <detectPulse+0x1e4>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
	lastBeatThreshold = 0;
 80018d4:	4b6a      	ldr	r3, [pc, #424]	; (8001a80 <detectPulse+0x1e8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
	return false;
 80018da:	2300      	movs	r3, #0
 80018dc:	e0bd      	b.n	8001a5a <detectPulse+0x1c2>
  }

  switch(currentPulseDetectorState)
 80018de:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <detectPulse+0x1d4>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	f000 8097 	beq.w	8001a16 <detectPulse+0x17e>
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f300 80b2 	bgt.w	8001a52 <detectPulse+0x1ba>
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <detectPulse+0x60>
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d011      	beq.n	800191a <detectPulse+0x82>
 80018f6:	e0ac      	b.n	8001a52 <detectPulse+0x1ba>
  {
	case PULSE_IDLE:
	  if(sensor_value >= PULSE_MIN_THRESHOLD) {
 80018f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fc:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001a84 <detectPulse+0x1ec>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	da00      	bge.n	800190c <detectPulse+0x74>
		currentPulseDetectorState = PULSE_TRACE_UP;
		values_went_down = 0;
	  }
	  break;
 800190a:	e0a2      	b.n	8001a52 <detectPulse+0x1ba>
		currentPulseDetectorState = PULSE_TRACE_UP;
 800190c:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <detectPulse+0x1d4>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
		values_went_down = 0;
 8001912:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <detectPulse+0x1e4>)
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	  break;
 8001918:	e09b      	b.n	8001a52 <detectPulse+0x1ba>

	case PULSE_TRACE_UP:
	  if(sensor_value > prev_sensor_value)
 800191a:	4b55      	ldr	r3, [pc, #340]	; (8001a70 <detectPulse+0x1d8>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ed97 7a01 	vldr	s14, [r7, #4]
 8001924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	dd0c      	ble.n	8001948 <detectPulse+0xb0>
	  {
		currentBeat = micsec;
 800192e:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <detectPulse+0x1f0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <detectPulse+0x1e0>)
 8001934:	6013      	str	r3, [r2, #0]
		lastBeatThreshold = sensor_value;
 8001936:	edd7 7a01 	vldr	s15, [r7, #4]
 800193a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193e:	ee17 2a90 	vmov	r2, s15
 8001942:	4b4f      	ldr	r3, [pc, #316]	; (8001a80 <detectPulse+0x1e8>)
 8001944:	601a      	str	r2, [r3, #0]

		currentPulseDetectorState = PULSE_TRACE_DOWN;

		return true;
	  }
	  break;
 8001946:	e084      	b.n	8001a52 <detectPulse+0x1ba>
		uint32_t beatDuration = currentBeat - lastBeat;
 8001948:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <detectPulse+0x1e0>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <detectPulse+0x1dc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	60fb      	str	r3, [r7, #12]
		lastBeat = currentBeat;
 8001954:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <detectPulse+0x1e0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <detectPulse+0x1dc>)
 800195a:	6013      	str	r3, [r2, #0]
		float rawBPM = 0;
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
		if(beatDuration > 0)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00a      	beq.n	800197e <detectPulse+0xe6>
		  rawBPM = 60000000 / (float)beatDuration;  //0000 de olabilir
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001972:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001a8c <detectPulse+0x1f4>
 8001976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197a:	edc7 7a05 	vstr	s15, [r7, #20]
		valuesBPM[bpmIndex] = rawBPM;
 800197e:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <detectPulse+0x1f8>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	edd7 7a05 	vldr	s15, [r7, #20]
 8001988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800198c:	ee17 1a90 	vmov	r1, s15
 8001990:	4b40      	ldr	r3, [pc, #256]	; (8001a94 <detectPulse+0x1fc>)
 8001992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		valuesBPMSum = 0;
 8001996:	4b40      	ldr	r3, [pc, #256]	; (8001a98 <detectPulse+0x200>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
		for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	e00b      	b.n	80019ba <detectPulse+0x122>
		  valuesBPMSum += valuesBPM[i];
 80019a2:	4a3c      	ldr	r2, [pc, #240]	; (8001a94 <detectPulse+0x1fc>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <detectPulse+0x200>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <detectPulse+0x200>)
 80019b2:	6013      	str	r3, [r2, #0]
		for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	3301      	adds	r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b09      	cmp	r3, #9
 80019be:	ddf0      	ble.n	80019a2 <detectPulse+0x10a>
		bpmIndex++;
 80019c0:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <detectPulse+0x1f8>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <detectPulse+0x1f8>)
 80019ca:	701a      	strb	r2, [r3, #0]
		bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 80019cc:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <detectPulse+0x1f8>)
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <detectPulse+0x204>)
 80019d2:	fba3 1302 	umull	r1, r3, r3, r2
 80019d6:	08d9      	lsrs	r1, r3, #3
 80019d8:	460b      	mov	r3, r1
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <detectPulse+0x1f8>)
 80019e6:	701a      	strb	r2, [r3, #0]
		if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 80019e8:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <detectPulse+0x208>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d805      	bhi.n	80019fc <detectPulse+0x164>
		  valuesBPMCount++;
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <detectPulse+0x208>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <detectPulse+0x208>)
 80019fa:	701a      	strb	r2, [r3, #0]
		currentBPM = valuesBPMSum / valuesBPMCount;
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <detectPulse+0x200>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <detectPulse+0x208>)
 8001a02:	7812      	ldrb	r2, [r2, #0]
 8001a04:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a08:	4a26      	ldr	r2, [pc, #152]	; (8001aa4 <detectPulse+0x20c>)
 8001a0a:	6013      	str	r3, [r2, #0]
		currentPulseDetectorState = PULSE_TRACE_DOWN;
 8001a0c:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <detectPulse+0x1d4>)
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
		return true;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e021      	b.n	8001a5a <detectPulse+0x1c2>

	case PULSE_TRACE_DOWN:
	  if(sensor_value < prev_sensor_value)
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <detectPulse+0x1d8>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	d505      	bpl.n	8001a36 <detectPulse+0x19e>
	  {
		values_went_down++;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <detectPulse+0x1e4>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <detectPulse+0x1e4>)
 8001a34:	701a      	strb	r2, [r3, #0]
	  }


	  if(sensor_value < PULSE_MIN_THRESHOLD)
 8001a36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a3a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001a84 <detectPulse+0x1ec>
 8001a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a46:	d400      	bmi.n	8001a4a <detectPulse+0x1b2>
	  {
		currentPulseDetectorState = PULSE_IDLE;
	  }
	  break;
 8001a48:	e002      	b.n	8001a50 <detectPulse+0x1b8>
		currentPulseDetectorState = PULSE_IDLE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <detectPulse+0x1d4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	  break;
 8001a50:	bf00      	nop
  }

  prev_sensor_value = sensor_value;
 8001a52:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <detectPulse+0x1d8>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6013      	str	r3, [r2, #0]
  return false;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	44fa0000 	.word	0x44fa0000
 8001a6c:	200004a8 	.word	0x200004a8
 8001a70:	200004e8 	.word	0x200004e8
 8001a74:	200004ec 	.word	0x200004ec
 8001a78:	200004f0 	.word	0x200004f0
 8001a7c:	200004f4 	.word	0x200004f4
 8001a80:	200004ac 	.word	0x200004ac
 8001a84:	42c80000 	.word	0x42c80000
 8001a88:	200003c8 	.word	0x200003c8
 8001a8c:	4c64e1c0 	.word	0x4c64e1c0
 8001a90:	200004e1 	.word	0x200004e1
 8001a94:	200004b4 	.word	0x200004b4
 8001a98:	200004dc 	.word	0x200004dc
 8001a9c:	cccccccd 	.word	0xcccccccd
 8001aa0:	200004e0 	.word	0x200004e0
 8001aa4:	200004b0 	.word	0x200004b0

08001aa8 <balanceIntesities>:
static const uint8_t MAX30100_LED_CURRENT_50MA = 15;
static const uint8_t FIX_IR_CURRENT = 6;
uint8_t redLEDCurrent = 5;

void balanceIntesities(float redLedDC, float IRLedDC)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	ed87 0a01 	vstr	s0, [r7, #4]
 8001ab2:	edc7 0a00 	vstr	s1, [r7]
	if( micsec - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001ab6:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <balanceIntesities+0xc4>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <balanceIntesities+0xc8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a2c      	ldr	r2, [pc, #176]	; (8001b74 <balanceIntesities+0xcc>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d94d      	bls.n	8001b62 <balanceIntesities+0xba>
	  {
	    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 8001ac6:	ed97 7a00 	vldr	s14, [r7]
 8001aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001b78 <balanceIntesities+0xd0>
 8001ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ade:	dd18      	ble.n	8001b12 <balanceIntesities+0x6a>
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <balanceIntesities+0xd4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d213      	bcs.n	8001b12 <balanceIntesities+0x6a>
	    {
	      redLEDCurrent++;
 8001aea:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <balanceIntesities+0xd4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <balanceIntesities+0xd4>)
 8001af4:	701a      	strb	r2, [r3, #0]
	      MAX30100_WriteReg(MAX30100_LED_CONFIG, (redLEDCurrent << 4) | FIX_IR_CURRENT);
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <balanceIntesities+0xd4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	b25a      	sxtb	r2, r3
 8001afe:	2306      	movs	r3, #6
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	4313      	orrs	r3, r2
 8001b04:	b25b      	sxtb	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	4619      	mov	r1, r3
 8001b0a:	2009      	movs	r0, #9
 8001b0c:	f7ff fd04 	bl	8001518 <MAX30100_WriteReg>
 8001b10:	e023      	b.n	8001b5a <balanceIntesities+0xb2>
	    }
	    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001b12:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b16:	edd7 7a00 	vldr	s15, [r7]
 8001b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b78 <balanceIntesities+0xd0>
 8001b22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2a:	dd16      	ble.n	8001b5a <balanceIntesities+0xb2>
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <balanceIntesities+0xd4>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d012      	beq.n	8001b5a <balanceIntesities+0xb2>
	    {
	      redLEDCurrent--;
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <balanceIntesities+0xd4>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <balanceIntesities+0xd4>)
 8001b3e:	701a      	strb	r2, [r3, #0]
	      MAX30100_WriteReg(MAX30100_LED_CONFIG, (redLEDCurrent << 4) | FIX_IR_CURRENT);
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <balanceIntesities+0xd4>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	b25a      	sxtb	r2, r3
 8001b48:	2306      	movs	r3, #6
 8001b4a:	b25b      	sxtb	r3, r3
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	b25b      	sxtb	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	4619      	mov	r1, r3
 8001b54:	2009      	movs	r0, #9
 8001b56:	f7ff fcdf 	bl	8001518 <MAX30100_WriteReg>
	    }
	    lastREDLedCurrentCheck = micsec;
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <balanceIntesities+0xc4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <balanceIntesities+0xc8>)
 8001b60:	6013      	str	r3, [r2, #0]
	  }
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200003c8 	.word	0x200003c8
 8001b70:	200004e4 	.word	0x200004e4
 8001b74:	000f423f 	.word	0x000f423f
 8001b78:	477de800 	.word	0x477de800
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	f000 faea 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_I2C_MspInit+0x84>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d12c      	bne.n	8001c4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c14:	2312      	movs	r3, #18
 8001c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c20:	2304      	movs	r3, #4
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4619      	mov	r1, r3
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <HAL_I2C_MspInit+0x8c>)
 8001c2c:	f000 faf6 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_I2C_MspInit+0x88>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005800 	.word	0x40005800
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40020400 	.word	0x40020400

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c64:	e7fe      	b.n	8001c64 <NMI_Handler+0x4>

08001c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <MemManage_Handler+0x4>

08001c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 f960 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <OTG_FS_IRQHandler+0x10>)
 8001cba:	f001 fdcd 	bl	8003858 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200019e0 	.word	0x200019e0

08001cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_kill>:

int _kill(int pid, int sig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce2:	f008 f983 	bl	8009fec <__errno>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2216      	movs	r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_exit>:

void _exit (int status)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffe7 	bl	8001cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d0a:	e7fe      	b.n	8001d0a <_exit+0x12>

08001d0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4601      	mov	r1, r0
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <_read+0x12>
  }

  return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e009      	b.n	8001d6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf1      	blt.n	8001d58 <_write+0x12>
  }
  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f008 f8e8 	bl	8009fec <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20020000 	.word	0x20020000
 8001e48:	00000400 	.word	0x00000400
 8001e4c:	200004f8 	.word	0x200004f8
 8001e50:	20002230 	.word	0x20002230

08001e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <SystemInit+0x20>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <SystemInit+0x20>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e7c:	f7ff ffea 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e82:	490d      	ldr	r1, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e98:	4c0a      	ldr	r4, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f008 f8a7 	bl	8009ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eaa:	f7ff f86b 	bl	8000f84 <main>
  bx  lr    
 8001eae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001ebc:	0800cb64 	.word	0x0800cb64
  ldr r2, =_sbss
 8001ec0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001ec4:	20002230 	.word	0x20002230

08001ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f94f 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fe3e 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f967 	bl	8002202 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f92f 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000004 	.word	0x20000004
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	20000008 	.word	0x20000008

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000000c 	.word	0x2000000c
 8001f94:	200004fc 	.word	0x200004fc

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200004fc 	.word	0x200004fc

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000000c 	.word	0x2000000c

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	; 0x24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	e16b      	b.n	8002510 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002238:	2201      	movs	r2, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	429a      	cmp	r2, r3
 8002252:	f040 815a 	bne.w	800250a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d005      	beq.n	800226e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800226a:	2b02      	cmp	r3, #2
 800226c:	d130      	bne.n	80022d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	2203      	movs	r2, #3
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 0201 	and.w	r2, r3, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d017      	beq.n	800230c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	2b02      	cmp	r3, #2
 8002316:	d123      	bne.n	8002360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	08da      	lsrs	r2, r3, #3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3208      	adds	r2, #8
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0203 	and.w	r2, r3, #3
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80b4 	beq.w	800250a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <HAL_GPIO_Init+0x30c>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	4a5f      	ldr	r2, [pc, #380]	; (8002528 <HAL_GPIO_Init+0x30c>)
 80023ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023b0:	6453      	str	r3, [r2, #68]	; 0x44
 80023b2:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_GPIO_Init+0x30c>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023be:	4a5b      	ldr	r2, [pc, #364]	; (800252c <HAL_GPIO_Init+0x310>)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3302      	adds	r3, #2
 80023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	220f      	movs	r2, #15
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a52      	ldr	r2, [pc, #328]	; (8002530 <HAL_GPIO_Init+0x314>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02b      	beq.n	8002442 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a51      	ldr	r2, [pc, #324]	; (8002534 <HAL_GPIO_Init+0x318>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d025      	beq.n	800243e <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a50      	ldr	r2, [pc, #320]	; (8002538 <HAL_GPIO_Init+0x31c>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a4f      	ldr	r2, [pc, #316]	; (800253c <HAL_GPIO_Init+0x320>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d019      	beq.n	8002436 <HAL_GPIO_Init+0x21a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a4e      	ldr	r2, [pc, #312]	; (8002540 <HAL_GPIO_Init+0x324>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_GPIO_Init+0x216>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a4d      	ldr	r2, [pc, #308]	; (8002544 <HAL_GPIO_Init+0x328>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00d      	beq.n	800242e <HAL_GPIO_Init+0x212>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a4c      	ldr	r2, [pc, #304]	; (8002548 <HAL_GPIO_Init+0x32c>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <HAL_GPIO_Init+0x20e>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a4b      	ldr	r2, [pc, #300]	; (800254c <HAL_GPIO_Init+0x330>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_GPIO_Init+0x20a>
 8002422:	2307      	movs	r3, #7
 8002424:	e00e      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002426:	2308      	movs	r3, #8
 8002428:	e00c      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800242a:	2306      	movs	r3, #6
 800242c:	e00a      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800242e:	2305      	movs	r3, #5
 8002430:	e008      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002432:	2304      	movs	r3, #4
 8002434:	e006      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002436:	2303      	movs	r3, #3
 8002438:	e004      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800243a:	2302      	movs	r3, #2
 800243c:	e002      	b.n	8002444 <HAL_GPIO_Init+0x228>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_GPIO_Init+0x228>
 8002442:	2300      	movs	r3, #0
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f002 0203 	and.w	r2, r2, #3
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	4093      	lsls	r3, r2
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002454:	4935      	ldr	r1, [pc, #212]	; (800252c <HAL_GPIO_Init+0x310>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <HAL_GPIO_Init+0x334>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002486:	4a32      	ldr	r2, [pc, #200]	; (8002550 <HAL_GPIO_Init+0x334>)
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800248c:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_GPIO_Init+0x334>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d003      	beq.n	80024b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_GPIO_Init+0x334>)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <HAL_GPIO_Init+0x334>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024da:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_GPIO_Init+0x334>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_GPIO_Init+0x334>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002504:	4a12      	ldr	r2, [pc, #72]	; (8002550 <HAL_GPIO_Init+0x334>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3301      	adds	r3, #1
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b0f      	cmp	r3, #15
 8002514:	f67f ae90 	bls.w	8002238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	40013800 	.word	0x40013800
 8002530:	40020000 	.word	0x40020000
 8002534:	40020400 	.word	0x40020400
 8002538:	40020800 	.word	0x40020800
 800253c:	40020c00 	.word	0x40020c00
 8002540:	40021000 	.word	0x40021000
 8002544:	40021400 	.word	0x40021400
 8002548:	40021800 	.word	0x40021800
 800254c:	40021c00 	.word	0x40021c00
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e12b      	b.n	80027f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fb0e 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2224      	movs	r2, #36	; 0x24
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ec:	f002 feb2 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80025f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a81      	ldr	r2, [pc, #516]	; (80027fc <HAL_I2C_Init+0x274>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d807      	bhi.n	800260c <HAL_I2C_Init+0x84>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a80      	ldr	r2, [pc, #512]	; (8002800 <HAL_I2C_Init+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e006      	b.n	800261a <HAL_I2C_Init+0x92>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a7d      	ldr	r2, [pc, #500]	; (8002804 <HAL_I2C_Init+0x27c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0e7      	b.n	80027f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a78      	ldr	r2, [pc, #480]	; (8002808 <HAL_I2C_Init+0x280>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a6a      	ldr	r2, [pc, #424]	; (80027fc <HAL_I2C_Init+0x274>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d802      	bhi.n	800265c <HAL_I2C_Init+0xd4>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	e009      	b.n	8002670 <HAL_I2C_Init+0xe8>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a69      	ldr	r2, [pc, #420]	; (800280c <HAL_I2C_Init+0x284>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	3301      	adds	r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002682:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	495c      	ldr	r1, [pc, #368]	; (80027fc <HAL_I2C_Init+0x274>)
 800268c:	428b      	cmp	r3, r1
 800268e:	d819      	bhi.n	80026c4 <HAL_I2C_Init+0x13c>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e59      	subs	r1, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fbb1 f3f3 	udiv	r3, r1, r3
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026a4:	400b      	ands	r3, r1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_I2C_Init+0x138>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e59      	subs	r1, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	e051      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e04f      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_I2C_Init+0x168>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e012      	b.n	8002716 <HAL_I2C_Init+0x18e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	0099      	lsls	r1, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Init+0x196>
 800271a:	2301      	movs	r3, #1
 800271c:	e022      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10e      	bne.n	8002744 <HAL_I2C_Init+0x1bc>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1e58      	subs	r0, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	440b      	add	r3, r1
 8002734:	fbb0 f3f3 	udiv	r3, r0, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002742:	e00f      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	0099      	lsls	r1, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002792:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6911      	ldr	r1, [r2, #16]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	000186a0 	.word	0x000186a0
 8002800:	001e847f 	.word	0x001e847f
 8002804:	003d08ff 	.word	0x003d08ff
 8002808:	431bde83 	.word	0x431bde83
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800282a:	f7ff fbb5 	bl	8001f98 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	f040 80d9 	bne.w	80029f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2319      	movs	r3, #25
 8002844:	2201      	movs	r2, #1
 8002846:	496d      	ldr	r1, [pc, #436]	; (80029fc <HAL_I2C_Mem_Write+0x1ec>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fc8b 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
 8002856:	e0cc      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Mem_Write+0x56>
 8002862:	2302      	movs	r3, #2
 8002864:	e0c5      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d007      	beq.n	800288c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800289a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2221      	movs	r2, #33	; 0x21
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a4d      	ldr	r2, [pc, #308]	; (8002a00 <HAL_I2C_Mem_Write+0x1f0>)
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ce:	88f8      	ldrh	r0, [r7, #6]
 80028d0:	893a      	ldrh	r2, [r7, #8]
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4603      	mov	r3, r0
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fac2 	bl	8002e68 <I2C_RequestMemoryWrite>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d052      	beq.n	8002990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e081      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fd50 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	2b04      	cmp	r3, #4
 8002904:	d107      	bne.n	8002916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06b      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_I2C_Mem_Write+0x180>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d017      	beq.n	8002990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1aa      	bne.n	80028ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fd43 	bl	8003428 <I2C_WaitOnBTFFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d107      	bne.n	80029c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e016      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	00100002 	.word	0x00100002
 8002a00:	ffff0000 	.word	0xffff0000

08002a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	; 0x30
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	460b      	mov	r3, r1
 8002a18:	813b      	strh	r3, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a1e:	f7ff fabb 	bl	8001f98 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	f040 8214 	bne.w	8002e5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2319      	movs	r3, #25
 8002a38:	2201      	movs	r2, #1
 8002a3a:	497b      	ldr	r1, [pc, #492]	; (8002c28 <HAL_I2C_Mem_Read+0x224>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb91 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e207      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x56>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e200      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d007      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2222      	movs	r2, #34	; 0x22
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2240      	movs	r2, #64	; 0x40
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <HAL_I2C_Mem_Read+0x228>)
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ac2:	88f8      	ldrh	r0, [r7, #6]
 8002ac4:	893a      	ldrh	r2, [r7, #8]
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa5e 	bl	8002f94 <I2C_RequestMemoryRead>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1bc      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	623b      	str	r3, [r7, #32]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	623b      	str	r3, [r7, #32]
 8002afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e190      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d11b      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e170      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d11b      	bne.n	8002b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	e150      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ba8:	e144      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	f200 80f1 	bhi.w	8002d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d123      	bne.n	8002c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fc79 	bl	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e145      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c02:	e117      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d14e      	bne.n	8002caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	2200      	movs	r2, #0
 8002c14:	4906      	ldr	r1, [pc, #24]	; (8002c30 <HAL_I2C_Mem_Read+0x22c>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 faa4 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e11a      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
 8002c26:	bf00      	nop
 8002c28:	00100002 	.word	0x00100002
 8002c2c:	ffff0000 	.word	0xffff0000
 8002c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ca8:	e0c4      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	496c      	ldr	r1, [pc, #432]	; (8002e64 <HAL_I2C_Mem_Read+0x460>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fa55 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cb      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4955      	ldr	r1, [pc, #340]	; (8002e64 <HAL_I2C_Mem_Read+0x460>)
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fa27 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e09d      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d94:	e04e      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fb8c 	bl	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e058      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d124      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f aeb6 	bne.w	8002baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	00010004 	.word	0x00010004

08002e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f960 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d103      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e05f      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	492d      	ldr	r1, [pc, #180]	; (8002f90 <I2C_RequestMemoryWrite+0x128>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9bb 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04c      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa46 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e02b      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]
 8002f3e:	e021      	b.n	8002f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa20 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d107      	bne.n	8002f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e005      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	00010002 	.word	0x00010002

08002f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f8c2 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff4:	d103      	bne.n	8002ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0aa      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4952      	ldr	r1, [pc, #328]	; (8003160 <I2C_RequestMemoryRead+0x1cc>)
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f91d 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e097      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003040:	6a39      	ldr	r1, [r7, #32]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f9a8 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b04      	cmp	r3, #4
 8003054:	d107      	bne.n	8003066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e076      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]
 800307a:	e021      	b.n	80030c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800308c:	6a39      	ldr	r1, [r7, #32]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f982 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d107      	bne.n	80030b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e050      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	6a39      	ldr	r1, [r7, #32]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f967 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d107      	bne.n	80030e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e035      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2200      	movs	r2, #0
 8003104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f82b 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00d      	beq.n	8003130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003122:	d103      	bne.n	800312c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e013      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	4906      	ldr	r1, [pc, #24]	; (8003160 <I2C_RequestMemoryRead+0x1cc>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f886 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00010002 	.word	0x00010002

08003164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003174:	e048      	b.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d044      	beq.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe ff0b 	bl	8001f98 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d139      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10d      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	e00c      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d116      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e023      	b.n	8003250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10d      	bne.n	800322e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	43da      	mvns	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	e00c      	b.n	8003248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d093      	beq.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003266:	e071      	b.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003276:	d123      	bne.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e067      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d041      	beq.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fe66 	bl	8001f98 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d136      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10c      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	e00b      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e021      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e00b      	b.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f af6d 	bne.w	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a4:	e034      	b.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8e3 	bl	8003572 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d028      	beq.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fdeb 	bl	8001f98 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11d      	bne.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d016      	beq.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d1c3      	bne.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003434:	e034      	b.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f89b 	bl	8003572 <I2C_IsAcknowledgeFailed>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e034      	b.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d028      	beq.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fda3 	bl	8001f98 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d016      	beq.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e007      	b.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d1c3      	bne.n	8003436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c4:	e049      	b.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d119      	bne.n	8003508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0210 	mvn.w	r2, #16
 80034dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e030      	b.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fe fd46 	bl	8001f98 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11d      	bne.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d016      	beq.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e007      	b.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d1ae      	bne.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003588:	d11b      	bne.n	80035c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003592:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af02      	add	r7, sp, #8
 80035d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e101      	b.n	80037e6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f005 fc03 	bl	8008e08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2203      	movs	r2, #3
 8003606:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003610:	d102      	bne.n	8003618 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f001 ffc4 	bl	80055aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7c1a      	ldrb	r2, [r3, #16]
 800362a:	f88d 2000 	strb.w	r2, [sp]
 800362e:	3304      	adds	r3, #4
 8003630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003632:	f001 fea3 	bl	800537c <USB_CoreInit>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0ce      	b.n	80037e6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f001 ffbc 	bl	80055cc <USB_SetCurrentMode>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0bf      	b.n	80037e6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
 800366a:	e04a      	b.n	8003702 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3315      	adds	r3, #21
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003680:	7bfa      	ldrb	r2, [r7, #15]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3314      	adds	r3, #20
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003694:	7bfa      	ldrb	r2, [r7, #15]
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	b298      	uxth	r0, r3
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	332e      	adds	r3, #46	; 0x2e
 80036a8:	4602      	mov	r2, r0
 80036aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	3318      	adds	r3, #24
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	331c      	adds	r3, #28
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	3320      	adds	r3, #32
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	3324      	adds	r3, #36	; 0x24
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	791b      	ldrb	r3, [r3, #4]
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3af      	bcc.n	800366c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e044      	b.n	800379c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003712:	7bfa      	ldrb	r2, [r7, #15]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800376a:	7bfa      	ldrb	r2, [r7, #15]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	3301      	adds	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	791b      	ldrb	r3, [r3, #4]
 80037a0:	7bfa      	ldrb	r2, [r7, #15]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d3b5      	bcc.n	8003712 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7c1a      	ldrb	r2, [r3, #16]
 80037ae:	f88d 2000 	strb.w	r2, [sp]
 80037b2:	3304      	adds	r3, #4
 80037b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b6:	f001 ff55 	bl	8005664 <USB_DevInit>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d005      	beq.n	80037cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e00c      	b.n	80037e6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f002 ff9f 	bl	8006722 <USB_DevDisconnect>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_PCD_Start+0x1c>
 8003806:	2302      	movs	r3, #2
 8003808:	e022      	b.n	8003850 <HAL_PCD_Start+0x62>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f001 fea6 	bl	8005588 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f002 ff4d 	bl	80066e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b08d      	sub	sp, #52	; 0x34
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f003 f80b 	bl	800688a <USB_GetMode>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 848c 	bne.w	8004194 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f002 ff6f 	bl	8006764 <USB_ReadInterrupts>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8482 	beq.w	8004192 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f002 ff5c 	bl	8006764 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d107      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f002 0202 	and.w	r2, r2, #2
 80038c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f002 ff4a 	bl	8006764 <USB_ReadInterrupts>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d161      	bne.n	800399e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0210 	bic.w	r2, r2, #16
 80038e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 020f 	and.w	r2, r3, #15
 80038f6:	4613      	mov	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	3304      	adds	r3, #4
 8003908:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	0c5b      	lsrs	r3, r3, #17
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	2b02      	cmp	r3, #2
 8003914:	d124      	bne.n	8003960 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d035      	beq.n	800398e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800392c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003930:	b29b      	uxth	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	6a38      	ldr	r0, [r7, #32]
 8003936:	f002 fd81 	bl	800643c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003946:	441a      	add	r2, r3
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	441a      	add	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	615a      	str	r2, [r3, #20]
 800395e:	e016      	b.n	800398e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	0c5b      	lsrs	r3, r3, #17
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	2b06      	cmp	r3, #6
 800396a:	d110      	bne.n	800398e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003972:	2208      	movs	r2, #8
 8003974:	4619      	mov	r1, r3
 8003976:	6a38      	ldr	r0, [r7, #32]
 8003978:	f002 fd60 	bl	800643c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	091b      	lsrs	r3, r3, #4
 8003984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003988:	441a      	add	r2, r3
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0210 	orr.w	r2, r2, #16
 800399c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 fede 	bl	8006764 <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039b2:	f040 80a7 	bne.w	8003b04 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 fee3 	bl	800678a <USB_ReadDevAllOutEpInterrupt>
 80039c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039c6:	e099      	b.n	8003afc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 808e 	beq.w	8003af0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 ff07 	bl	80067f2 <USB_ReadDevOutEPInterrupt>
 80039e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00c      	beq.n	8003a0a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039fc:	461a      	mov	r2, r3
 80039fe:	2301      	movs	r3, #1
 8003a00:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fea3 	bl	8004750 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0308 	and.w	r3, r3, #8
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00c      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a20:	461a      	mov	r2, r3
 8003a22:	2308      	movs	r3, #8
 8003a24:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 ff79 	bl	8004920 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a44:	461a      	mov	r2, r3
 8003a46:	2310      	movs	r3, #16
 8003a48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d030      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b80      	cmp	r3, #128	; 0x80
 8003a5e:	d109      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	69fa      	ldr	r2, [r7, #28]
 8003a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a72:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	78db      	ldrb	r3, [r3, #3]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d108      	bne.n	8003aa4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f005 fab8 	bl	8009014 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f003 0320 	and.w	r3, r3, #32
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003acc:	461a      	mov	r2, r3
 8003ace:	2320      	movs	r3, #32
 8003ad0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	3301      	adds	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f47f af62 	bne.w	80039c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f002 fe2b 	bl	8006764 <USB_ReadInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b18:	f040 80db 	bne.w	8003cd2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 fe4c 	bl	80067be <USB_ReadDevAllInEpInterrupt>
 8003b26:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b2c:	e0cd      	b.n	8003cca <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80c2 	beq.w	8003cbe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f002 fe72 	bl	800682e <USB_ReadDevInEPInterrupt>
 8003b4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d057      	beq.n	8003c06 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69f9      	ldr	r1, [r7, #28]
 8003b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b76:	4013      	ands	r3, r2
 8003b78:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	461a      	mov	r2, r3
 8003b88:	2301      	movs	r3, #1
 8003b8a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	799b      	ldrb	r3, [r3, #6]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d132      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3320      	adds	r3, #32
 8003ba4:	6819      	ldr	r1, [r3, #0]
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4403      	add	r3, r0
 8003bb4:	331c      	adds	r3, #28
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4419      	add	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4403      	add	r3, r0
 8003bc8:	3320      	adds	r3, #32
 8003bca:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d113      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x3a2>
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	3324      	adds	r3, #36	; 0x24
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	f002 fe79 	bl	80068ec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f005 f982 	bl	8008f0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	015a      	lsls	r2, r3, #5
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	4413      	add	r3, r2
 8003c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2308      	movs	r3, #8
 8003c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	461a      	mov	r2, r3
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	461a      	mov	r2, r3
 8003c56:	2340      	movs	r3, #64	; 0x40
 8003c58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d023      	beq.n	8003cac <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c66:	6a38      	ldr	r0, [r7, #32]
 8003c68:	f001 fe60 	bl	800592c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6e:	4613      	mov	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3310      	adds	r3, #16
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	78db      	ldrb	r3, [r3, #3]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d108      	bne.n	8003c9a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	4619      	mov	r1, r3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f005 f9cf 	bl	8009038 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2302      	movs	r3, #2
 8003caa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fcbd 	bl	8004638 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f af2e 	bne.w	8003b2e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f002 fd44 	bl	8006764 <USB_ReadInterrupts>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ce6:	d122      	bne.n	8003d2e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf6:	f023 0301 	bic.w	r3, r3, #1
 8003cfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d108      	bne.n	8003d18 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fea3 	bl	8004a5c <HAL_PCDEx_LPM_Callback>
 8003d16:	e002      	b.n	8003d1e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f005 f96d 	bl	8008ff8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695a      	ldr	r2, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f002 fd16 	bl	8006764 <USB_ReadInterrupts>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d42:	d112      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d102      	bne.n	8003d5a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f005 f929 	bl	8008fac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d68:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f002 fcf8 	bl	8006764 <USB_ReadInterrupts>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7e:	f040 80b7 	bne.w	8003ef0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2110      	movs	r1, #16
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f001 fdc5 	bl	800592c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da2:	2300      	movs	r3, #0
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	e046      	b.n	8003e36 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	461a      	mov	r2, r3
 8003db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dcc:	0151      	lsls	r1, r2, #5
 8003dce:	69fa      	ldr	r2, [r7, #28]
 8003dd0:	440a      	add	r2, r1
 8003dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de8:	461a      	mov	r2, r3
 8003dea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e00:	0151      	lsls	r1, r2, #5
 8003e02:	69fa      	ldr	r2, [r7, #28]
 8003e04:	440a      	add	r2, r1
 8003e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e0e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e2e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e32:	3301      	adds	r3, #1
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	791b      	ldrb	r3, [r3, #4]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d3b2      	bcc.n	8003da8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e50:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e54:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7bdb      	ldrb	r3, [r3, #15]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d016      	beq.n	8003e8c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6e:	f043 030b 	orr.w	r3, r3, #11
 8003e72:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	69fa      	ldr	r2, [r7, #28]
 8003e80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e84:	f043 030b 	orr.w	r3, r3, #11
 8003e88:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8a:	e015      	b.n	8003eb8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e9e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003ea2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003eb2:	f043 030b 	orr.w	r3, r3, #11
 8003eb6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ec6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003eca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003eda:	461a      	mov	r2, r3
 8003edc:	f002 fd06 	bl	80068ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f002 fc35 	bl	8006764 <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d123      	bne.n	8003f4e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 fccb 	bl	80068a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f001 fd82 	bl	8005a1e <USB_GetDevSpeed>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681c      	ldr	r4, [r3, #0]
 8003f26:	f001 fa09 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8003f2a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003f30:	461a      	mov	r2, r3
 8003f32:	4620      	mov	r0, r4
 8003f34:	f001 fa86 	bl	8005444 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f005 f80e 	bl	8008f5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f002 fc06 	bl	8006764 <USB_ReadInterrupts>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d10a      	bne.n	8003f78 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f004 ffeb 	bl	8008f3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f002 0208 	and.w	r2, r2, #8
 8003f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f002 fbf1 	bl	8006764 <USB_ReadInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d123      	bne.n	8003fd4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f98:	2301      	movs	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9c:	e014      	b.n	8003fc8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb0a 	bl	80045d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	791b      	ldrb	r3, [r3, #4]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d3e4      	bcc.n	8003f9e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fbc3 	bl	8006764 <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe8:	d13c      	bne.n	8004064 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
 8003fee:	e02b      	b.n	8004048 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	015a      	lsls	r2, r3, #5
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3318      	adds	r3, #24
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d115      	bne.n	8004042 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004016:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	da12      	bge.n	8004042 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3317      	adds	r3, #23
 800402c:	2201      	movs	r2, #1
 800402e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004038:	b2db      	uxtb	r3, r3
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 faca 	bl	80045d6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	3301      	adds	r3, #1
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	791b      	ldrb	r3, [r3, #4]
 800404c:	461a      	mov	r2, r3
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	4293      	cmp	r3, r2
 8004052:	d3cd      	bcc.n	8003ff0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f002 fb7b 	bl	8006764 <USB_ReadInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004078:	d156      	bne.n	8004128 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800407a:	2301      	movs	r3, #1
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	e045      	b.n	800410c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d12e      	bne.n	8004106 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da2b      	bge.n	8004106 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	0c1a      	lsrs	r2, r3, #16
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80040b8:	4053      	eors	r3, r2
 80040ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d121      	bne.n	8004106 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10a      	bne.n	8004106 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004102:	6053      	str	r3, [r2, #4]
            break;
 8004104:	e008      	b.n	8004118 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	3301      	adds	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	791b      	ldrb	r3, [r3, #4]
 8004110:	461a      	mov	r2, r3
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	4293      	cmp	r3, r2
 8004116:	d3b3      	bcc.n	8004080 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f002 fb19 	bl	8006764 <USB_ReadInterrupts>
 8004132:	4603      	mov	r3, r0
 8004134:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413c:	d10a      	bne.n	8004154 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f004 ff8c 	bl	800905c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695a      	ldr	r2, [r3, #20]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f002 fb03 	bl	8006764 <USB_ReadInterrupts>
 800415e:	4603      	mov	r3, r0
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b04      	cmp	r3, #4
 8004166:	d115      	bne.n	8004194 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f004 ff7c 	bl	8009078 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	430a      	orrs	r2, r1
 800418e:	605a      	str	r2, [r3, #4]
 8004190:	e000      	b.n	8004194 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004192:	bf00      	nop
    }
  }
}
 8004194:	3734      	adds	r7, #52	; 0x34
 8004196:	46bd      	mov	sp, r7
 8004198:	bd90      	pop	{r4, r7, pc}

0800419a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_PCD_SetAddress+0x1a>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e012      	b.n	80041da <HAL_PCD_SetAddress+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	4611      	mov	r1, r2
 80041ca:	4618      	mov	r0, r3
 80041cc:	f002 fa62 	bl	8006694 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	4608      	mov	r0, r1
 80041ec:	4611      	mov	r1, r2
 80041ee:	461a      	mov	r2, r3
 80041f0:	4603      	mov	r3, r0
 80041f2:	70fb      	strb	r3, [r7, #3]
 80041f4:	460b      	mov	r3, r1
 80041f6:	803b      	strh	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004204:	2b00      	cmp	r3, #0
 8004206:	da0f      	bge.n	8004228 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3310      	adds	r3, #16
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	705a      	strb	r2, [r3, #1]
 8004226:	e00f      	b.n	8004248 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	f003 020f 	and.w	r2, r3, #15
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	b2da      	uxtb	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004254:	883b      	ldrh	r3, [r7, #0]
 8004256:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	78ba      	ldrb	r2, [r7, #2]
 8004262:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	785b      	ldrb	r3, [r3, #1]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004276:	78bb      	ldrb	r3, [r7, #2]
 8004278:	2b02      	cmp	r3, #2
 800427a:	d102      	bne.n	8004282 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004288:	2b01      	cmp	r3, #1
 800428a:	d101      	bne.n	8004290 <HAL_PCD_EP_Open+0xae>
 800428c:	2302      	movs	r3, #2
 800428e:	e00e      	b.n	80042ae <HAL_PCD_EP_Open+0xcc>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68f9      	ldr	r1, [r7, #12]
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 fbe2 	bl	8005a68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 80042ac:	7afb      	ldrb	r3, [r7, #11]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	da0f      	bge.n	80042ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	f003 020f 	and.w	r2, r3, #15
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	3310      	adds	r3, #16
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	4413      	add	r3, r2
 80042de:	3304      	adds	r3, #4
 80042e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	705a      	strb	r2, [r3, #1]
 80042e8:	e00f      	b.n	800430a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4413      	add	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_PCD_EP_Close+0x6e>
 8004320:	2302      	movs	r3, #2
 8004322:	e00e      	b.n	8004342 <HAL_PCD_EP_Close+0x8c>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fc20 	bl	8005b78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	460b      	mov	r3, r1
 8004358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800435a:	7afb      	ldrb	r3, [r7, #11]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2200      	movs	r2, #0
 8004384:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2200      	movs	r2, #0
 800438a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800438c:	7afb      	ldrb	r3, [r7, #11]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	b2da      	uxtb	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	799b      	ldrb	r3, [r3, #6]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d102      	bne.n	80043a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	799b      	ldrb	r3, [r3, #6]
 80043ae:	461a      	mov	r2, r3
 80043b0:	6979      	ldr	r1, [r7, #20]
 80043b2:	f001 fcbd 	bl	8005d30 <USB_EPStartXfer>

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	607a      	str	r2, [r7, #4]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	460b      	mov	r3, r1
 80043fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004400:	7afb      	ldrb	r3, [r7, #11]
 8004402:	f003 020f 	and.w	r2, r3, #15
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	3310      	adds	r3, #16
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4413      	add	r3, r2
 8004414:	3304      	adds	r3, #4
 8004416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2201      	movs	r2, #1
 800442e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004430:	7afb      	ldrb	r3, [r7, #11]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	b2da      	uxtb	r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	799b      	ldrb	r3, [r3, #6]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	799b      	ldrb	r3, [r3, #6]
 8004452:	461a      	mov	r2, r3
 8004454:	6979      	ldr	r1, [r7, #20]
 8004456:	f001 fc6b 	bl	8005d30 <USB_EPStartXfer>

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	7912      	ldrb	r2, [r2, #4]
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e04f      	b.n	8004522 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004486:	2b00      	cmp	r3, #0
 8004488:	da0f      	bge.n	80044aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800448a:	78fb      	ldrb	r3, [r7, #3]
 800448c:	f003 020f 	and.w	r2, r3, #15
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	3310      	adds	r3, #16
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	3304      	adds	r3, #4
 80044a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	705a      	strb	r2, [r3, #1]
 80044a8:	e00d      	b.n	80044c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	4613      	mov	r3, r2
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4413      	add	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	4413      	add	r3, r2
 80044bc:	3304      	adds	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d101      	bne.n	80044e6 <HAL_PCD_EP_SetStall+0x82>
 80044e2:	2302      	movs	r3, #2
 80044e4:	e01d      	b.n	8004522 <HAL_PCD_EP_SetStall+0xbe>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2201      	movs	r2, #1
 80044ea:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68f9      	ldr	r1, [r7, #12]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fff9 	bl	80064ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	2b00      	cmp	r3, #0
 8004502:	d109      	bne.n	8004518 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6818      	ldr	r0, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7999      	ldrb	r1, [r3, #6]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004512:	461a      	mov	r2, r3
 8004514:	f002 f9ea 	bl	80068ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 030f 	and.w	r3, r3, #15
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	7912      	ldrb	r2, [r2, #4]
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e042      	b.n	80045ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004548:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800454c:	2b00      	cmp	r3, #0
 800454e:	da0f      	bge.n	8004570 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	f003 020f 	and.w	r2, r3, #15
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	3310      	adds	r3, #16
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	3304      	adds	r3, #4
 8004566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	705a      	strb	r2, [r3, #1]
 800456e:	e00f      	b.n	8004590 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	f003 020f 	and.w	r2, r3, #15
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_PCD_EP_ClrStall+0x86>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e00e      	b.n	80045ce <HAL_PCD_EP_ClrStall+0xa4>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	4618      	mov	r0, r3
 80045c0:	f002 f802 	bl	80065c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	460b      	mov	r3, r1
 80045e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80045e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	da0c      	bge.n	8004604 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	f003 020f 	and.w	r2, r3, #15
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	3310      	adds	r3, #16
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4413      	add	r3, r2
 80045fe:	3304      	adds	r3, #4
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e00c      	b.n	800461e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68f9      	ldr	r1, [r7, #12]
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fe21 	bl	800626c <USB_EPStopXfer>
 800462a:	4603      	mov	r3, r0
 800462c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800462e:	7afb      	ldrb	r3, [r7, #11]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	; 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	3310      	adds	r3, #16
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	4413      	add	r3, r2
 800465c:	3304      	adds	r3, #4
 800465e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	429a      	cmp	r2, r3
 800466a:	d901      	bls.n	8004670 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e06b      	b.n	8004748 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	69fa      	ldr	r2, [r7, #28]
 8004682:	429a      	cmp	r2, r3
 8004684:	d902      	bls.n	800468c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	3303      	adds	r3, #3
 8004690:	089b      	lsrs	r3, r3, #2
 8004692:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004694:	e02a      	b.n	80046ec <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	691a      	ldr	r2, [r3, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d902      	bls.n	80046b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3303      	adds	r3, #3
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046ca:	9300      	str	r3, [sp, #0]
 80046cc:	4603      	mov	r3, r0
 80046ce:	6978      	ldr	r0, [r7, #20]
 80046d0:	f001 fe76 	bl	80063c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	441a      	add	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	441a      	add	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d809      	bhi.n	8004716 <PCD_WriteEmptyTxFifo+0xde>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	695a      	ldr	r2, [r3, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800470a:	429a      	cmp	r2, r3
 800470c:	d203      	bcs.n	8004716 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1bf      	bne.n	8004696 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	429a      	cmp	r2, r3
 8004720:	d811      	bhi.n	8004746 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	43db      	mvns	r3, r3
 800473c:	6939      	ldr	r1, [r7, #16]
 800473e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004742:	4013      	ands	r3, r2
 8004744:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3720      	adds	r7, #32
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	799b      	ldrb	r3, [r3, #6]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d17b      	bne.n	800487e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d015      	beq.n	80047bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	4a61      	ldr	r2, [pc, #388]	; (8004918 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	f240 80b9 	bls.w	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b3 	beq.w	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	461a      	mov	r2, r3
 80047b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b8:	6093      	str	r3, [r2, #8]
 80047ba:	e0a7      	b.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d2:	461a      	mov	r2, r3
 80047d4:	2320      	movs	r3, #32
 80047d6:	6093      	str	r3, [r2, #8]
 80047d8:	e098      	b.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8093 	bne.w	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	4a4b      	ldr	r2, [pc, #300]	; (8004918 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d90f      	bls.n	800480e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	6093      	str	r3, [r2, #8]
 800480c:	e07e      	b.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	4413      	add	r3, r2
 8004820:	3304      	adds	r3, #4
 8004822:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	0159      	lsls	r1, r3, #5
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	440b      	add	r3, r1
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800483a:	1ad2      	subs	r2, r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d114      	bne.n	8004870 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d109      	bne.n	8004862 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004858:	461a      	mov	r2, r3
 800485a:	2101      	movs	r1, #1
 800485c:	f002 f846 	bl	80068ec <USB_EP0_OutStart>
 8004860:	e006      	b.n	8004870 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	68da      	ldr	r2, [r3, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	441a      	add	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	4619      	mov	r1, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f004 fb2c 	bl	8008ed4 <HAL_PCD_DataOutStageCallback>
 800487c:	e046      	b.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	4a26      	ldr	r2, [pc, #152]	; (800491c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d124      	bne.n	80048d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489c:	461a      	mov	r2, r3
 800489e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a2:	6093      	str	r3, [r2, #8]
 80048a4:	e032      	b.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d008      	beq.n	80048c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	461a      	mov	r2, r3
 80048be:	2320      	movs	r3, #32
 80048c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f004 fb03 	bl	8008ed4 <HAL_PCD_DataOutStageCallback>
 80048ce:	e01d      	b.n	800490c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d114      	bne.n	8004900 <PCD_EP_OutXfrComplete_int+0x1b0>
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d108      	bne.n	8004900 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80048f8:	461a      	mov	r2, r3
 80048fa:	2100      	movs	r1, #0
 80048fc:	f001 fff6 	bl	80068ec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	4619      	mov	r1, r3
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f004 fae4 	bl	8008ed4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3720      	adds	r7, #32
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	4f54300a 	.word	0x4f54300a
 800491c:	4f54310a 	.word	0x4f54310a

08004920 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	333c      	adds	r3, #60	; 0x3c
 8004938:	3304      	adds	r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4413      	add	r3, r2
 8004946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d90e      	bls.n	8004974 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f004 fa9b 	bl	8008eb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a0a      	ldr	r2, [pc, #40]	; (80049a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d90c      	bls.n	800499c <PCD_EP_OutSetupPacket_int+0x7c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	799b      	ldrb	r3, [r3, #6]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d108      	bne.n	800499c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004994:	461a      	mov	r2, r3
 8004996:	2101      	movs	r1, #1
 8004998:	f001 ffa8 	bl	80068ec <USB_EP0_OutStart>
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	4f54300a 	.word	0x4f54300a

080049ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	70fb      	strb	r3, [r7, #3]
 80049b8:	4613      	mov	r3, r2
 80049ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80049ca:	883b      	ldrh	r3, [r7, #0]
 80049cc:	0419      	lsls	r1, r3, #16
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
 80049d8:	e028      	b.n	8004a2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4413      	add	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049e8:	2300      	movs	r3, #0
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	e00d      	b.n	8004a0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	3340      	adds	r3, #64	; 0x40
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	4413      	add	r3, r2
 8004a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	3301      	adds	r3, #1
 8004a08:	73fb      	strb	r3, [r7, #15]
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d3ec      	bcc.n	80049ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a14:	883b      	ldrh	r3, [r7, #0]
 8004a16:	0418      	lsls	r0, r3, #16
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	78fb      	ldrb	r3, [r7, #3]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	4302      	orrs	r2, r0
 8004a24:	3340      	adds	r3, #64	; 0x40
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	460b      	mov	r3, r1
 8004a44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	887a      	ldrh	r2, [r7, #2]
 8004a4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e267      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d075      	beq.n	8004b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a92:	4b88      	ldr	r3, [pc, #544]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4b85      	ldr	r3, [pc, #532]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d112      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aaa:	4b82      	ldr	r3, [pc, #520]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	4b7e      	ldr	r3, [pc, #504]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d05b      	beq.n	8004b7c <HAL_RCC_OscConfig+0x108>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d157      	bne.n	8004b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e242      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x74>
 8004ada:	4b76      	ldr	r3, [pc, #472]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a75      	ldr	r2, [pc, #468]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x98>
 8004af2:	4b70      	ldr	r3, [pc, #448]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6f      	ldr	r2, [pc, #444]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b6d      	ldr	r3, [pc, #436]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6c      	ldr	r2, [pc, #432]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xb0>
 8004b0c:	4b69      	ldr	r3, [pc, #420]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a68      	ldr	r2, [pc, #416]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b66      	ldr	r3, [pc, #408]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a65      	ldr	r2, [pc, #404]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fa34 	bl	8001f98 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fd fa30 	bl	8001f98 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e207      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b5b      	ldr	r3, [pc, #364]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xc0>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fd fa20 	bl	8001f98 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fa1c 	bl	8001f98 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1f3      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b51      	ldr	r3, [pc, #324]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0xe8>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d063      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b8a:	4b4a      	ldr	r3, [pc, #296]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b47      	ldr	r3, [pc, #284]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba2:	4b44      	ldr	r3, [pc, #272]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d116      	bne.n	8004bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x152>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1c7      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4937      	ldr	r1, [pc, #220]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	e03a      	b.n	8004c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	4b34      	ldr	r3, [pc, #208]	; (8004cb8 <HAL_RCC_OscConfig+0x244>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fd f9d5 	bl	8001f98 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fd f9d1 	bl	8001f98 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1a8      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	4b2b      	ldr	r3, [pc, #172]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4925      	ldr	r1, [pc, #148]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]
 8004c24:	e015      	b.n	8004c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c26:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <HAL_RCC_OscConfig+0x244>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd f9b4 	bl	8001f98 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fd f9b0 	bl	8001f98 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e187      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	4b1b      	ldr	r3, [pc, #108]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d036      	beq.n	8004ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <HAL_RCC_OscConfig+0x248>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd f994 	bl	8001f98 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c74:	f7fd f990 	bl	8001f98 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e167      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x200>
 8004c92:	e01b      	b.n	8004ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c94:	4b09      	ldr	r3, [pc, #36]	; (8004cbc <HAL_RCC_OscConfig+0x248>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd f97d 	bl	8001f98 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	e00e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fd f979 	bl	8001f98 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d907      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e150      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	42470000 	.word	0x42470000
 8004cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc0:	4b88      	ldr	r3, [pc, #544]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ea      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8097 	beq.w	8004e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cde:	4b81      	ldr	r3, [pc, #516]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	4b7d      	ldr	r3, [pc, #500]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	4a7c      	ldr	r2, [pc, #496]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfa:	4b7a      	ldr	r3, [pc, #488]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0a:	4b77      	ldr	r3, [pc, #476]	; (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d118      	bne.n	8004d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d16:	4b74      	ldr	r3, [pc, #464]	; (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a73      	ldr	r2, [pc, #460]	; (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d22:	f7fd f939 	bl	8001f98 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fd f935 	bl	8001f98 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e10c      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	4b6a      	ldr	r3, [pc, #424]	; (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCC_OscConfig+0x2ea>
 8004d50:	4b64      	ldr	r3, [pc, #400]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4a63      	ldr	r2, [pc, #396]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5c:	e01c      	b.n	8004d98 <HAL_RCC_OscConfig+0x324>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x30c>
 8004d66:	4b5f      	ldr	r3, [pc, #380]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a5e      	ldr	r2, [pc, #376]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
 8004d72:	4b5c      	ldr	r3, [pc, #368]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	4a5b      	ldr	r2, [pc, #364]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCC_OscConfig+0x324>
 8004d80:	4b58      	ldr	r3, [pc, #352]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d84:	4a57      	ldr	r2, [pc, #348]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d8c:	4b55      	ldr	r3, [pc, #340]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d90:	4a54      	ldr	r2, [pc, #336]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f023 0304 	bic.w	r3, r3, #4
 8004d96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fd f8fa 	bl	8001f98 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fd f8f6 	bl	8001f98 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0cb      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	4b49      	ldr	r3, [pc, #292]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ee      	beq.n	8004da8 <HAL_RCC_OscConfig+0x334>
 8004dca:	e014      	b.n	8004df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dcc:	f7fd f8e4 	bl	8001f98 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7fd f8e0 	bl	8001f98 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0b5      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dea:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1ee      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfc:	4b39      	ldr	r3, [pc, #228]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	4a38      	ldr	r2, [pc, #224]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80a1 	beq.w	8004f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e12:	4b34      	ldr	r3, [pc, #208]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d05c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d141      	bne.n	8004eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_RCC_OscConfig+0x478>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fd f8b4 	bl	8001f98 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fd f8b0 	bl	8001f98 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e087      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	491b      	ldr	r1, [pc, #108]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	; (8004eec <HAL_RCC_OscConfig+0x478>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fd f889 	bl	8001f98 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd f885 	bl	8001f98 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e05c      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9c:	4b11      	ldr	r3, [pc, #68]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x416>
 8004ea8:	e054      	b.n	8004f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_RCC_OscConfig+0x478>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f872 	bl	8001f98 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fd f86e 	bl	8001f98 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e045      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x444>
 8004ed6:	e03d      	b.n	8004f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e038      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCC_OscConfig+0x4ec>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d028      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d121      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11a      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d111      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800

08004f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0cc      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f78:	4b68      	ldr	r3, [pc, #416]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d90c      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b65      	ldr	r3, [pc, #404]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d044      	beq.n	8005084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d119      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d003      	beq.n	8005022 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800501e:	2b03      	cmp	r3, #3
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005022:	4b3f      	ldr	r3, [pc, #252]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005032:	4b3b      	ldr	r3, [pc, #236]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e067      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005042:	4b37      	ldr	r3, [pc, #220]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4934      	ldr	r1, [pc, #208]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005054:	f7fc ffa0 	bl	8001f98 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fc ff9c 	bl	8001f98 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	; 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e04f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 020c 	and.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d1eb      	bne.n	800505c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005084:	4b25      	ldr	r3, [pc, #148]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d20c      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d6:	4b12      	ldr	r3, [pc, #72]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	; (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	; (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc ff00 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023c00 	.word	0x40023c00
 8005120:	40023800 	.word	0x40023800
 8005124:	0800c7cc 	.word	0x0800c7cc
 8005128:	20000004 	.word	0x20000004
 800512c:	20000008 	.word	0x20000008

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b094      	sub	sp, #80	; 0x50
 8005136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005148:	4b79      	ldr	r3, [pc, #484]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	d00d      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 8005154:	2b08      	cmp	r3, #8
 8005156:	f200 80e1 	bhi.w	800531c <HAL_RCC_GetSysClockFreq+0x1ec>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x34>
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x3a>
 8005162:	e0db      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005164:	4b73      	ldr	r3, [pc, #460]	; (8005334 <HAL_RCC_GetSysClockFreq+0x204>)
 8005166:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005168:	e0db      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800516a:	4b73      	ldr	r3, [pc, #460]	; (8005338 <HAL_RCC_GetSysClockFreq+0x208>)
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800516e:	e0d8      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005170:	4b6f      	ldr	r3, [pc, #444]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800517a:	4b6d      	ldr	r3, [pc, #436]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d063      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005186:	4b6a      	ldr	r3, [pc, #424]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	2200      	movs	r2, #0
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005190:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	633b      	str	r3, [r7, #48]	; 0x30
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	; 0x34
 800519e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	f04f 0000 	mov.w	r0, #0
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	0159      	lsls	r1, r3, #5
 80051b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b4:	0150      	lsls	r0, r2, #5
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4621      	mov	r1, r4
 80051bc:	1a51      	subs	r1, r2, r1
 80051be:	6139      	str	r1, [r7, #16]
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb63 0301 	sbc.w	r3, r3, r1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d4:	4659      	mov	r1, fp
 80051d6:	018b      	lsls	r3, r1, #6
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051de:	4651      	mov	r1, sl
 80051e0:	018a      	lsls	r2, r1, #6
 80051e2:	4651      	mov	r1, sl
 80051e4:	ebb2 0801 	subs.w	r8, r2, r1
 80051e8:	4659      	mov	r1, fp
 80051ea:	eb63 0901 	sbc.w	r9, r3, r1
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005202:	4690      	mov	r8, r2
 8005204:	4699      	mov	r9, r3
 8005206:	4623      	mov	r3, r4
 8005208:	eb18 0303 	adds.w	r3, r8, r3
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	462b      	mov	r3, r5
 8005210:	eb49 0303 	adc.w	r3, r9, r3
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005222:	4629      	mov	r1, r5
 8005224:	024b      	lsls	r3, r1, #9
 8005226:	4621      	mov	r1, r4
 8005228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800522c:	4621      	mov	r1, r4
 800522e:	024a      	lsls	r2, r1, #9
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005236:	2200      	movs	r2, #0
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
 800523a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800523c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005240:	f7fb fd22 	bl	8000c88 <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4613      	mov	r3, r2
 800524a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800524c:	e058      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524e:	4b38      	ldr	r3, [pc, #224]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	099b      	lsrs	r3, r3, #6
 8005254:	2200      	movs	r2, #0
 8005256:	4618      	mov	r0, r3
 8005258:	4611      	mov	r1, r2
 800525a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
 8005264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005268:	4642      	mov	r2, r8
 800526a:	464b      	mov	r3, r9
 800526c:	f04f 0000 	mov.w	r0, #0
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800527a:	0150      	lsls	r0, r2, #5
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4641      	mov	r1, r8
 8005282:	ebb2 0a01 	subs.w	sl, r2, r1
 8005286:	4649      	mov	r1, r9
 8005288:	eb63 0b01 	sbc.w	fp, r3, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800529c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052a0:	ebb2 040a 	subs.w	r4, r2, sl
 80052a4:	eb63 050b 	sbc.w	r5, r3, fp
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	00eb      	lsls	r3, r5, #3
 80052b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b6:	00e2      	lsls	r2, r4, #3
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	18e3      	adds	r3, r4, r3
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb45 0303 	adc.w	r3, r5, r3
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052d6:	4629      	mov	r1, r5
 80052d8:	028b      	lsls	r3, r1, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052e0:	4621      	mov	r1, r4
 80052e2:	028a      	lsls	r2, r1, #10
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	61fa      	str	r2, [r7, #28]
 80052f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f4:	f7fb fcc8 	bl	8000c88 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005300:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005310:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800531a:	e002      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetSysClockFreq+0x204>)
 800531e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005324:	4618      	mov	r0, r3
 8005326:	3750      	adds	r7, #80	; 0x50
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400
 8005338:	007a1200 	.word	0x007a1200

0800533c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <HAL_RCC_GetHCLKFreq+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000004 	.word	0x20000004

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005358:	f7ff fff0 	bl	800533c <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0a9b      	lsrs	r3, r3, #10
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	; (8005378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	0800c7dc 	.word	0x0800c7dc

0800537c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800537c:	b084      	sub	sp, #16
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	f107 001c 	add.w	r0, r7, #28
 800538a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800538e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005392:	2b01      	cmp	r3, #1
 8005394:	d123      	bne.n	80053de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d105      	bne.n	80053d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 fae8 	bl	80069a8 <USB_CoreReset>
 80053d8:	4603      	mov	r3, r0
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	e01b      	b.n	8005416 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f001 fadc 	bl	80069a8 <USB_CoreReset>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	; 0x38
 8005408:	e005      	b.n	8005416 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005416:	7fbb      	ldrb	r3, [r7, #30]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d10b      	bne.n	8005434 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f043 0206 	orr.w	r2, r3, #6
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f043 0220 	orr.w	r2, r3, #32
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005440:	b004      	add	sp, #16
 8005442:	4770      	bx	lr

08005444 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005452:	79fb      	ldrb	r3, [r7, #7]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d165      	bne.n	8005524 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4a41      	ldr	r2, [pc, #260]	; (8005560 <USB_SetTurnaroundTime+0x11c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d906      	bls.n	800546e <USB_SetTurnaroundTime+0x2a>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4a40      	ldr	r2, [pc, #256]	; (8005564 <USB_SetTurnaroundTime+0x120>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d202      	bcs.n	800546e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005468:	230f      	movs	r3, #15
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e062      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	4a3c      	ldr	r2, [pc, #240]	; (8005564 <USB_SetTurnaroundTime+0x120>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d306      	bcc.n	8005484 <USB_SetTurnaroundTime+0x40>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a3b      	ldr	r2, [pc, #236]	; (8005568 <USB_SetTurnaroundTime+0x124>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d202      	bcs.n	8005484 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800547e:	230e      	movs	r3, #14
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	e057      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4a38      	ldr	r2, [pc, #224]	; (8005568 <USB_SetTurnaroundTime+0x124>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d306      	bcc.n	800549a <USB_SetTurnaroundTime+0x56>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4a37      	ldr	r2, [pc, #220]	; (800556c <USB_SetTurnaroundTime+0x128>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d202      	bcs.n	800549a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005494:	230d      	movs	r3, #13
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e04c      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	4a33      	ldr	r2, [pc, #204]	; (800556c <USB_SetTurnaroundTime+0x128>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d306      	bcc.n	80054b0 <USB_SetTurnaroundTime+0x6c>
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4a32      	ldr	r2, [pc, #200]	; (8005570 <USB_SetTurnaroundTime+0x12c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d802      	bhi.n	80054b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80054aa:	230c      	movs	r3, #12
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	e041      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	; (8005570 <USB_SetTurnaroundTime+0x12c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d906      	bls.n	80054c6 <USB_SetTurnaroundTime+0x82>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	4a2e      	ldr	r2, [pc, #184]	; (8005574 <USB_SetTurnaroundTime+0x130>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d802      	bhi.n	80054c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054c0:	230b      	movs	r3, #11
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e036      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	4a2a      	ldr	r2, [pc, #168]	; (8005574 <USB_SetTurnaroundTime+0x130>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d906      	bls.n	80054dc <USB_SetTurnaroundTime+0x98>
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4a29      	ldr	r2, [pc, #164]	; (8005578 <USB_SetTurnaroundTime+0x134>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d802      	bhi.n	80054dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054d6:	230a      	movs	r3, #10
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	e02b      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4a26      	ldr	r2, [pc, #152]	; (8005578 <USB_SetTurnaroundTime+0x134>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d906      	bls.n	80054f2 <USB_SetTurnaroundTime+0xae>
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4a25      	ldr	r2, [pc, #148]	; (800557c <USB_SetTurnaroundTime+0x138>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d202      	bcs.n	80054f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054ec:	2309      	movs	r3, #9
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e020      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4a21      	ldr	r2, [pc, #132]	; (800557c <USB_SetTurnaroundTime+0x138>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d306      	bcc.n	8005508 <USB_SetTurnaroundTime+0xc4>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4a20      	ldr	r2, [pc, #128]	; (8005580 <USB_SetTurnaroundTime+0x13c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d802      	bhi.n	8005508 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005502:	2308      	movs	r3, #8
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e015      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <USB_SetTurnaroundTime+0x13c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d906      	bls.n	800551e <USB_SetTurnaroundTime+0xda>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <USB_SetTurnaroundTime+0x140>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d202      	bcs.n	800551e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005518:	2307      	movs	r3, #7
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e00a      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800551e:	2306      	movs	r3, #6
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e007      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d102      	bne.n	8005530 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800552a:	2309      	movs	r3, #9
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e001      	b.n	8005534 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005530:	2309      	movs	r3, #9
 8005532:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	029b      	lsls	r3, r3, #10
 8005548:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800554c:	431a      	orrs	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	00d8acbf 	.word	0x00d8acbf
 8005564:	00e4e1c0 	.word	0x00e4e1c0
 8005568:	00f42400 	.word	0x00f42400
 800556c:	01067380 	.word	0x01067380
 8005570:	011a499f 	.word	0x011a499f
 8005574:	01312cff 	.word	0x01312cff
 8005578:	014ca43f 	.word	0x014ca43f
 800557c:	016e3600 	.word	0x016e3600
 8005580:	01a6ab1f 	.word	0x01a6ab1f
 8005584:	01e84800 	.word	0x01e84800

08005588 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 0201 	bic.w	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d115      	bne.n	800561a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055fa:	200a      	movs	r0, #10
 80055fc:	f7fc fcd8 	bl	8001fb0 <HAL_Delay>
      ms += 10U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	330a      	adds	r3, #10
 8005604:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 f93f 	bl	800688a <USB_GetMode>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d01e      	beq.n	8005650 <USB_SetCurrentMode+0x84>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2bc7      	cmp	r3, #199	; 0xc7
 8005616:	d9f0      	bls.n	80055fa <USB_SetCurrentMode+0x2e>
 8005618:	e01a      	b.n	8005650 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d115      	bne.n	800564c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800562c:	200a      	movs	r0, #10
 800562e:	f7fc fcbf 	bl	8001fb0 <HAL_Delay>
      ms += 10U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	330a      	adds	r3, #10
 8005636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 f926 	bl	800688a <USB_GetMode>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <USB_SetCurrentMode+0x84>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2bc7      	cmp	r3, #199	; 0xc7
 8005648:	d9f0      	bls.n	800562c <USB_SetCurrentMode+0x60>
 800564a:	e001      	b.n	8005650 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e005      	b.n	800565c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2bc8      	cmp	r3, #200	; 0xc8
 8005654:	d101      	bne.n	800565a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e000      	b.n	800565c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005664:	b084      	sub	sp, #16
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	e009      	b.n	8005698 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	3340      	adds	r3, #64	; 0x40
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	2200      	movs	r2, #0
 8005690:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	3301      	adds	r3, #1
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	2b0e      	cmp	r3, #14
 800569c:	d9f2      	bls.n	8005684 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800569e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d11c      	bne.n	80056e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b4:	f043 0302 	orr.w	r3, r3, #2
 80056b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
 80056de:	e00b      	b.n	80056f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056fe:	461a      	mov	r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005704:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10d      	bne.n	8005728 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800570c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005714:	2100      	movs	r1, #0
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f968 	bl	80059ec <USB_SetDevSpeed>
 800571c:	e008      	b.n	8005730 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800571e:	2101      	movs	r1, #1
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f963 	bl	80059ec <USB_SetDevSpeed>
 8005726:	e003      	b.n	8005730 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005728:	2103      	movs	r1, #3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f95e 	bl	80059ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005730:	2110      	movs	r1, #16
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8fa 	bl	800592c <USB_FlushTxFifo>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f924 	bl	8005990 <USB_FlushRxFifo>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	461a      	mov	r2, r3
 800575a:	2300      	movs	r3, #0
 800575c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	461a      	mov	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	461a      	mov	r2, r3
 8005772:	2300      	movs	r3, #0
 8005774:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	e043      	b.n	8005804 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800578e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005792:	d118      	bne.n	80057c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	015a      	lsls	r2, r3, #5
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	4413      	add	r3, r2
 80057a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a6:	461a      	mov	r2, r3
 80057a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e013      	b.n	80057d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057bc:	461a      	mov	r2, r3
 80057be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e008      	b.n	80057d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	461a      	mov	r2, r3
 80057e6:	2300      	movs	r3, #0
 80057e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f6:	461a      	mov	r2, r3
 80057f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	3301      	adds	r3, #1
 8005802:	613b      	str	r3, [r7, #16]
 8005804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005808:	461a      	mov	r2, r3
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4293      	cmp	r3, r2
 800580e:	d3b5      	bcc.n	800577c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	e043      	b.n	800589e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005828:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800582c:	d118      	bne.n	8005860 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005840:	461a      	mov	r2, r3
 8005842:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	e013      	b.n	8005872 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005856:	461a      	mov	r2, r3
 8005858:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e008      	b.n	8005872 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	015a      	lsls	r2, r3, #5
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4413      	add	r3, r2
 8005868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800587e:	461a      	mov	r2, r3
 8005880:	2300      	movs	r3, #0
 8005882:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005890:	461a      	mov	r2, r3
 8005892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005896:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	3301      	adds	r3, #1
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80058a2:	461a      	mov	r2, r3
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d3b5      	bcc.n	8005816 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80058ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	f043 0210 	orr.w	r2, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699a      	ldr	r2, [r3, #24]
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <USB_DevInit+0x2c4>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80058ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	f043 0208 	orr.w	r2, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005900:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005910:	f043 0304 	orr.w	r3, r3, #4
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005918:	7dfb      	ldrb	r3, [r7, #23]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005924:	b004      	add	sp, #16
 8005926:	4770      	bx	lr
 8005928:	803c3800 	.word	0x803c3800

0800592c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005946:	d901      	bls.n	800594c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e01b      	b.n	8005984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	daf2      	bge.n	800593a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	019b      	lsls	r3, r3, #6
 800595c:	f043 0220 	orr.w	r2, r3, #32
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	3301      	adds	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005970:	d901      	bls.n	8005976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e006      	b.n	8005984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b20      	cmp	r3, #32
 8005980:	d0f0      	beq.n	8005964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059a8:	d901      	bls.n	80059ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e018      	b.n	80059e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	daf2      	bge.n	800599c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2210      	movs	r2, #16
 80059be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059cc:	d901      	bls.n	80059d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e006      	b.n	80059e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0310 	and.w	r3, r3, #16
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d0f0      	beq.n	80059c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	68f9      	ldr	r1, [r7, #12]
 8005a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b087      	sub	sp, #28
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0306 	and.w	r3, r3, #6
 8005a36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	75fb      	strb	r3, [r7, #23]
 8005a42:	e00a      	b.n	8005a5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d002      	beq.n	8005a50 <USB_GetDevSpeed+0x32>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b06      	cmp	r3, #6
 8005a4e:	d102      	bne.n	8005a56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a50:	2302      	movs	r3, #2
 8005a52:	75fb      	strb	r3, [r7, #23]
 8005a54:	e001      	b.n	8005a5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a56:	230f      	movs	r3, #15
 8005a58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	785b      	ldrb	r3, [r3, #1]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d13a      	bne.n	8005afa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	69da      	ldr	r2, [r3, #28]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f003 030f 	and.w	r3, r3, #15
 8005a94:	2101      	movs	r1, #1
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	68f9      	ldr	r1, [r7, #12]
 8005a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d155      	bne.n	8005b68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	791b      	ldrb	r3, [r3, #4]
 8005ad6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ad8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	059b      	lsls	r3, r3, #22
 8005ade:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	0151      	lsls	r1, r2, #5
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	440a      	add	r2, r1
 8005aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	e036      	b.n	8005b68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	69da      	ldr	r2, [r3, #28]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b10:	041b      	lsls	r3, r3, #16
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11a      	bne.n	8005b68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	791b      	ldrb	r3, [r3, #4]
 8005b4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	4313      	orrs	r3, r2
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d161      	bne.n	8005c58 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005baa:	d11f      	bne.n	8005bec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	43db      	mvns	r3, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4013      	ands	r3, r2
 8005c32:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0159      	lsls	r1, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	440b      	add	r3, r1
 8005c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4b35      	ldr	r3, [pc, #212]	; (8005d28 <USB_DeactivateEndpoint+0x1b0>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]
 8005c56:	e060      	b.n	8005d1a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6e:	d11f      	bne.n	8005cb0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c8e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	0151      	lsls	r1, r2, #5
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	440a      	add	r2, r1
 8005ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005caa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc6:	041b      	lsls	r3, r3, #16
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	041b      	lsls	r3, r3, #16
 8005cec:	43db      	mvns	r3, r3
 8005cee:	68f9      	ldr	r1, [r7, #12]
 8005cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	0159      	lsls	r1, r3, #5
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	440b      	add	r3, r1
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	4619      	mov	r1, r3
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <USB_DeactivateEndpoint+0x1b4>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	ec337800 	.word	0xec337800
 8005d2c:	eff37800 	.word	0xeff37800

08005d30 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	; 0x28
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	f040 817f 	bne.w	8006050 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d132      	bne.n	8005dc0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	0151      	lsls	r1, r2, #5
 8005d90:	69fa      	ldr	r2, [r7, #28]
 8005d92:	440a      	add	r2, r1
 8005d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db8:	0cdb      	lsrs	r3, r3, #19
 8005dba:	04db      	lsls	r3, r3, #19
 8005dbc:	6113      	str	r3, [r2, #16]
 8005dbe:	e097      	b.n	8005ef0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	69fa      	ldr	r2, [r7, #28]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dda:	0cdb      	lsrs	r3, r3, #19
 8005ddc:	04db      	lsls	r3, r3, #19
 8005dde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dfa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dfe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e02:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d11a      	bne.n	8005e40 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d903      	bls.n	8005e1e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	69fa      	ldr	r2, [r7, #28]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e3c:	6113      	str	r3, [r2, #16]
 8005e3e:	e044      	b.n	8005eca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4413      	add	r3, r2
 8005e4a:	1e5a      	subs	r2, r3, #1
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	8afb      	ldrh	r3, [r7, #22]
 8005e66:	04d9      	lsls	r1, r3, #19
 8005e68:	4ba4      	ldr	r3, [pc, #656]	; (80060fc <USB_EPStartXfer+0x3cc>)
 8005e6a:	400b      	ands	r3, r1
 8005e6c:	69b9      	ldr	r1, [r7, #24]
 8005e6e:	0148      	lsls	r0, r1, #5
 8005e70:	69f9      	ldr	r1, [r7, #28]
 8005e72:	4401      	add	r1, r0
 8005e74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	791b      	ldrb	r3, [r3, #4]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d122      	bne.n	8005eca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	0151      	lsls	r1, r2, #5
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	440a      	add	r2, r1
 8005e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ea2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	691a      	ldr	r2, [r3, #16]
 8005eb2:	8afb      	ldrh	r3, [r7, #22]
 8005eb4:	075b      	lsls	r3, r3, #29
 8005eb6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8005eba:	69b9      	ldr	r1, [r7, #24]
 8005ebc:	0148      	lsls	r0, r1, #5
 8005ebe:	69f9      	ldr	r1, [r7, #28]
 8005ec0:	4401      	add	r1, r0
 8005ec2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed6:	691a      	ldr	r2, [r3, #16]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee0:	69b9      	ldr	r1, [r7, #24]
 8005ee2:	0148      	lsls	r0, r1, #5
 8005ee4:	69f9      	ldr	r1, [r7, #28]
 8005ee6:	4401      	add	r1, r0
 8005ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005eec:	4313      	orrs	r3, r2
 8005eee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d14b      	bne.n	8005f8e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d009      	beq.n	8005f12 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	791b      	ldrb	r3, [r3, #4]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d128      	bne.n	8005f6c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d110      	bne.n	8005f4c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	e00f      	b.n	8005f6c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	0151      	lsls	r1, r2, #5
 8005f7e:	69fa      	ldr	r2, [r7, #28]
 8005f80:	440a      	add	r2, r1
 8005f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f8a:	6013      	str	r3, [r2, #0]
 8005f8c:	e166      	b.n	800625c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	0151      	lsls	r1, r2, #5
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	440a      	add	r2, r1
 8005fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d015      	beq.n	8005fe2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 814e 	beq.w	800625c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	69f9      	ldr	r1, [r7, #28]
 8005fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	634b      	str	r3, [r1, #52]	; 0x34
 8005fe0:	e13c      	b.n	800625c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d110      	bne.n	8006014 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	440a      	add	r2, r1
 8006008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e00f      	b.n	8006034 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	68d9      	ldr	r1, [r3, #12]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	781a      	ldrb	r2, [r3, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	b298      	uxth	r0, r3
 8006042:	79fb      	ldrb	r3, [r7, #7]
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4603      	mov	r3, r0
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 f9b9 	bl	80063c0 <USB_WritePacket>
 800604e:	e105      	b.n	800625c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606a:	0cdb      	lsrs	r3, r3, #19
 800606c:	04db      	lsls	r3, r3, #19
 800606e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800608e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006092:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d132      	bne.n	8006100 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	689a      	ldr	r2, [r3, #8]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c8:	69b9      	ldr	r1, [r7, #24]
 80060ca:	0148      	lsls	r0, r1, #5
 80060cc:	69f9      	ldr	r1, [r7, #28]
 80060ce:	4401      	add	r1, r0
 80060d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060d4:	4313      	orrs	r3, r2
 80060d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060f6:	6113      	str	r3, [r2, #16]
 80060f8:	e062      	b.n	80061c0 <USB_EPStartXfer+0x490>
 80060fa:	bf00      	nop
 80060fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d123      	bne.n	8006150 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611e:	69b9      	ldr	r1, [r7, #24]
 8006120:	0148      	lsls	r0, r1, #5
 8006122:	69f9      	ldr	r1, [r7, #28]
 8006124:	4401      	add	r1, r0
 8006126:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800612a:	4313      	orrs	r3, r2
 800612c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800614c:	6113      	str	r3, [r2, #16]
 800614e:	e037      	b.n	80061c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4413      	add	r3, r2
 800615a:	1e5a      	subs	r2, r3, #1
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	8afa      	ldrh	r2, [r7, #22]
 800616c:	fb03 f202 	mul.w	r2, r3, r2
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	8afb      	ldrh	r3, [r7, #22]
 8006184:	04d9      	lsls	r1, r3, #19
 8006186:	4b38      	ldr	r3, [pc, #224]	; (8006268 <USB_EPStartXfer+0x538>)
 8006188:	400b      	ands	r3, r1
 800618a:	69b9      	ldr	r1, [r7, #24]
 800618c:	0148      	lsls	r0, r1, #5
 800618e:	69f9      	ldr	r1, [r7, #28]
 8006190:	4401      	add	r1, r0
 8006192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006196:	4313      	orrs	r3, r2
 8006198:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b0:	69b9      	ldr	r1, [r7, #24]
 80061b2:	0148      	lsls	r0, r1, #5
 80061b4:	69f9      	ldr	r1, [r7, #28]
 80061b6:	4401      	add	r1, r0
 80061b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061bc:	4313      	orrs	r3, r2
 80061be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10d      	bne.n	80061e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	68d9      	ldr	r1, [r3, #12]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	460a      	mov	r2, r1
 80061e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d128      	bne.n	800623c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d110      	bne.n	800621c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	e00f      	b.n	800623c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	69fa      	ldr	r2, [r7, #28]
 8006250:	440a      	add	r2, r1
 8006252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800625a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3720      	adds	r7, #32
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	1ff80000 	.word	0x1ff80000

0800626c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d14a      	bne.n	8006320 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800629e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062a2:	f040 8086 	bne.w	80063b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	7812      	ldrb	r2, [r2, #0]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d902      	bls.n	8006304 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]
          break;
 8006302:	e056      	b.n	80063b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800631c:	d0e7      	beq.n	80062ee <USB_EPStopXfer+0x82>
 800631e:	e048      	b.n	80063b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006338:	d13b      	bne.n	80063b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800635c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	7812      	ldrb	r2, [r2, #0]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006380:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	3301      	adds	r3, #1
 8006386:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f242 7210 	movw	r2, #10000	; 0x2710
 800638e:	4293      	cmp	r3, r2
 8006390:	d902      	bls.n	8006398 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	75fb      	strb	r3, [r7, #23]
          break;
 8006396:	e00c      	b.n	80063b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063b0:	d0e7      	beq.n	8006382 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b089      	sub	sp, #36	; 0x24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	460b      	mov	r3, r1
 80063d0:	71fb      	strb	r3, [r7, #7]
 80063d2:	4613      	mov	r3, r2
 80063d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d123      	bne.n	800642e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063e6:	88bb      	ldrh	r3, [r7, #4]
 80063e8:	3303      	adds	r3, #3
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e018      	b.n	8006426 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063f4:	79fb      	ldrb	r3, [r7, #7]
 80063f6:	031a      	lsls	r2, r3, #12
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006400:	461a      	mov	r2, r3
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3301      	adds	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	3301      	adds	r3, #1
 800641e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	3301      	adds	r3, #1
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	429a      	cmp	r2, r3
 800642c:	d3e2      	bcc.n	80063f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3724      	adds	r7, #36	; 0x24
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800643c:	b480      	push	{r7}
 800643e:	b08b      	sub	sp, #44	; 0x2c
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	4613      	mov	r3, r2
 8006448:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	089b      	lsrs	r3, r3, #2
 8006456:	b29b      	uxth	r3, r3
 8006458:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006462:	2300      	movs	r3, #0
 8006464:	623b      	str	r3, [r7, #32]
 8006466:	e014      	b.n	8006492 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006472:	601a      	str	r2, [r3, #0]
    pDest++;
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	3301      	adds	r3, #1
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	3301      	adds	r3, #1
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	3301      	adds	r3, #1
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	3301      	adds	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	3301      	adds	r3, #1
 8006490:	623b      	str	r3, [r7, #32]
 8006492:	6a3a      	ldr	r2, [r7, #32]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	429a      	cmp	r2, r3
 8006498:	d3e6      	bcc.n	8006468 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800649a:	8bfb      	ldrh	r3, [r7, #30]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064aa:	461a      	mov	r2, r3
 80064ac:	f107 0310 	add.w	r3, r7, #16
 80064b0:	6812      	ldr	r2, [r2, #0]
 80064b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	701a      	strb	r2, [r3, #0]
      i++;
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	3301      	adds	r3, #1
 80064ca:	623b      	str	r3, [r7, #32]
      pDest++;
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	3301      	adds	r3, #1
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80064d2:	8bfb      	ldrh	r3, [r7, #30]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064d8:	8bfb      	ldrh	r3, [r7, #30]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1ea      	bne.n	80064b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	372c      	adds	r7, #44	; 0x2c
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d12c      	bne.n	8006562 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	db12      	blt.n	8006540 <USB_EPSetStall+0x54>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00f      	beq.n	8006540 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800653e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800655a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	e02b      	b.n	80065ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	db12      	blt.n	800659a <USB_EPSetStall+0xae>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006594:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006598:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	785b      	ldrb	r3, [r3, #1]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d128      	bne.n	8006636 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006602:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	791b      	ldrb	r3, [r3, #4]
 8006608:	2b03      	cmp	r3, #3
 800660a:	d003      	beq.n	8006614 <USB_EPClearStall+0x4c>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	791b      	ldrb	r3, [r3, #4]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d138      	bne.n	8006686 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800662e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e027      	b.n	8006686 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006654:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	791b      	ldrb	r3, [r3, #4]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d003      	beq.n	8006666 <USB_EPClearStall+0x9e>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	791b      	ldrb	r3, [r3, #4]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d10f      	bne.n	8006686 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006684:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80066b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ce:	4313      	orrs	r3, r2
 80066d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800670e:	f023 0302 	bic.w	r3, r3, #2
 8006712:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800673c:	f023 0303 	bic.w	r3, r3, #3
 8006740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006750:	f043 0302 	orr.w	r3, r3, #2
 8006754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4013      	ands	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800677c:	68fb      	ldr	r3, [r7, #12]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800678a:	b480      	push	{r7}
 800678c:	b085      	sub	sp, #20
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	4013      	ands	r3, r2
 80067ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	0c1b      	lsrs	r3, r3, #16
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	4013      	ands	r3, r2
 80067e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	b29b      	uxth	r3, r3
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006802:	78fb      	ldrb	r3, [r7, #3]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	4013      	ands	r3, r2
 800681e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006820:	68bb      	ldr	r3, [r7, #8]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800682e:	b480      	push	{r7}
 8006830:	b087      	sub	sp, #28
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006850:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	fa22 f303 	lsr.w	r3, r2, r3
 800685e:	01db      	lsls	r3, r3, #7
 8006860:	b2db      	uxtb	r3, r3
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4013      	ands	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800687c:	68bb      	ldr	r3, [r7, #8]
}
 800687e:	4618      	mov	r0, r3
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0301 	and.w	r3, r3, #1
}
 800689a:	4618      	mov	r0, r3
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80068c4:	f023 0307 	bic.w	r3, r3, #7
 80068c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	460b      	mov	r3, r1
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	333c      	adds	r3, #60	; 0x3c
 8006902:	3304      	adds	r3, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4a26      	ldr	r2, [pc, #152]	; (80069a4 <USB_EP0_OutStart+0xb8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d90a      	bls.n	8006926 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006920:	d101      	bne.n	8006926 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	e037      	b.n	8006996 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692c:	461a      	mov	r2, r3
 800692e:	2300      	movs	r3, #0
 8006930:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006940:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006954:	f043 0318 	orr.w	r3, r3, #24
 8006958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006968:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800696c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d10f      	bne.n	8006994 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	461a      	mov	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	4f54300a 	.word	0x4f54300a

080069a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069c0:	d901      	bls.n	80069c6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e022      	b.n	8006a0c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	daf2      	bge.n	80069b4 <USB_CoreReset+0xc>

  count = 10U;
 80069ce:	230a      	movs	r3, #10
 80069d0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80069d2:	e002      	b.n	80069da <USB_CoreReset+0x32>
  {
    count--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f9      	bne.n	80069d4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	f043 0201 	orr.w	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80069f8:	d901      	bls.n	80069fe <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e006      	b.n	8006a0c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d0f0      	beq.n	80069ec <USB_CoreReset+0x44>

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006a24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006a28:	f002 fcbe 	bl	80093a8 <USBD_static_malloc>
 8006a2c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d109      	bne.n	8006a48 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	32b0      	adds	r2, #176	; 0xb0
 8006a3e:	2100      	movs	r1, #0
 8006a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e0d4      	b.n	8006bf2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006a48:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f003 fa79 	bl	8009f46 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32b0      	adds	r2, #176	; 0xb0
 8006a5e:	68f9      	ldr	r1, [r7, #12]
 8006a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	32b0      	adds	r2, #176	; 0xb0
 8006a6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	7c1b      	ldrb	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d138      	bne.n	8006af2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006a80:	4b5e      	ldr	r3, [pc, #376]	; (8006bfc <USBD_CDC_Init+0x1e4>)
 8006a82:	7819      	ldrb	r1, [r3, #0]
 8006a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a88:	2202      	movs	r2, #2
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f002 fb69 	bl	8009162 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006a90:	4b5a      	ldr	r3, [pc, #360]	; (8006bfc <USBD_CDC_Init+0x1e4>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3323      	adds	r3, #35	; 0x23
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006aaa:	4b55      	ldr	r3, [pc, #340]	; (8006c00 <USBD_CDC_Init+0x1e8>)
 8006aac:	7819      	ldrb	r1, [r3, #0]
 8006aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 fb54 	bl	8009162 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006aba:	4b51      	ldr	r3, [pc, #324]	; (8006c00 <USBD_CDC_Init+0x1e8>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 020f 	and.w	r2, r3, #15
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006ad6:	4b4b      	ldr	r3, [pc, #300]	; (8006c04 <USBD_CDC_Init+0x1ec>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	331c      	adds	r3, #28
 8006aec:	2210      	movs	r2, #16
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	e035      	b.n	8006b5e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006af2:	4b42      	ldr	r3, [pc, #264]	; (8006bfc <USBD_CDC_Init+0x1e4>)
 8006af4:	7819      	ldrb	r1, [r3, #0]
 8006af6:	2340      	movs	r3, #64	; 0x40
 8006af8:	2202      	movs	r2, #2
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f002 fb31 	bl	8009162 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b00:	4b3e      	ldr	r3, [pc, #248]	; (8006bfc <USBD_CDC_Init+0x1e4>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	6879      	ldr	r1, [r7, #4]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	3323      	adds	r3, #35	; 0x23
 8006b16:	2201      	movs	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b1a:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <USBD_CDC_Init+0x1e8>)
 8006b1c:	7819      	ldrb	r1, [r3, #0]
 8006b1e:	2340      	movs	r3, #64	; 0x40
 8006b20:	2202      	movs	r2, #2
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f002 fb1d 	bl	8009162 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b28:	4b35      	ldr	r3, [pc, #212]	; (8006c00 <USBD_CDC_Init+0x1e8>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006b40:	2201      	movs	r2, #1
 8006b42:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006b44:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <USBD_CDC_Init+0x1ec>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 020f 	and.w	r2, r3, #15
 8006b4c:	6879      	ldr	r1, [r7, #4]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	440b      	add	r3, r1
 8006b58:	331c      	adds	r3, #28
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006b5e:	4b29      	ldr	r3, [pc, #164]	; (8006c04 <USBD_CDC_Init+0x1ec>)
 8006b60:	7819      	ldrb	r1, [r3, #0]
 8006b62:	2308      	movs	r3, #8
 8006b64:	2203      	movs	r2, #3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f002 fafb 	bl	8009162 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006b6c:	4b25      	ldr	r3, [pc, #148]	; (8006c04 <USBD_CDC_Init+0x1ec>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	f003 020f 	and.w	r2, r3, #15
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3323      	adds	r3, #35	; 0x23
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	33b0      	adds	r3, #176	; 0xb0
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e018      	b.n	8006bf2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7c1b      	ldrb	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <USBD_CDC_Init+0x1e8>)
 8006bca:	7819      	ldrb	r1, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f002 fbb2 	bl	8009340 <USBD_LL_PrepareReceive>
 8006bdc:	e008      	b.n	8006bf0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bde:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <USBD_CDC_Init+0x1e8>)
 8006be0:	7819      	ldrb	r1, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f002 fba8 	bl	8009340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20000097 	.word	0x20000097
 8006c00:	20000098 	.word	0x20000098
 8006c04:	20000099 	.word	0x20000099

08006c08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006c14:	4b3a      	ldr	r3, [pc, #232]	; (8006d00 <USBD_CDC_DeInit+0xf8>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f002 fac7 	bl	80091ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006c20:	4b37      	ldr	r3, [pc, #220]	; (8006d00 <USBD_CDC_DeInit+0xf8>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f003 020f 	and.w	r2, r3, #15
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	440b      	add	r3, r1
 8006c34:	3323      	adds	r3, #35	; 0x23
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006c3a:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <USBD_CDC_DeInit+0xfc>)
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 fab4 	bl	80091ae <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006c46:	4b2f      	ldr	r3, [pc, #188]	; (8006d04 <USBD_CDC_DeInit+0xfc>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 020f 	and.w	r2, r3, #15
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	f203 1363 	addw	r3, r3, #355	; 0x163
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006c62:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <USBD_CDC_DeInit+0x100>)
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 faa0 	bl	80091ae <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006c6e:	4b26      	ldr	r3, [pc, #152]	; (8006d08 <USBD_CDC_DeInit+0x100>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	f003 020f 	and.w	r2, r3, #15
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3323      	adds	r3, #35	; 0x23
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006c88:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <USBD_CDC_DeInit+0x100>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 020f 	and.w	r2, r3, #15
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	331c      	adds	r3, #28
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	32b0      	adds	r2, #176	; 0xb0
 8006cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01f      	beq.n	8006cf4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	33b0      	adds	r3, #176	; 0xb0
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	32b0      	adds	r2, #176	; 0xb0
 8006cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f002 fb74 	bl	80093c4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	32b0      	adds	r2, #176	; 0xb0
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	20000097 	.word	0x20000097
 8006d04:	20000098 	.word	0x20000098
 8006d08:	20000099 	.word	0x20000099

08006d0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	32b0      	adds	r2, #176	; 0xb0
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e0bf      	b.n	8006ebc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d050      	beq.n	8006dea <USBD_CDC_Setup+0xde>
 8006d48:	2b20      	cmp	r3, #32
 8006d4a:	f040 80af 	bne.w	8006eac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d03a      	beq.n	8006dcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da1b      	bge.n	8006d98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	33b0      	adds	r3, #176	; 0xb0
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006d76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	88d2      	ldrh	r2, [r2, #6]
 8006d7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	88db      	ldrh	r3, [r3, #6]
 8006d82:	2b07      	cmp	r3, #7
 8006d84:	bf28      	it	cs
 8006d86:	2307      	movcs	r3, #7
 8006d88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	89fa      	ldrh	r2, [r7, #14]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fdab 	bl	80088ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006d96:	e090      	b.n	8006eba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	785a      	ldrb	r2, [r3, #1]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	88db      	ldrh	r3, [r3, #6]
 8006da6:	2b3f      	cmp	r3, #63	; 0x3f
 8006da8:	d803      	bhi.n	8006db2 <USBD_CDC_Setup+0xa6>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	88db      	ldrh	r3, [r3, #6]
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	e000      	b.n	8006db4 <USBD_CDC_Setup+0xa8>
 8006db2:	2240      	movs	r2, #64	; 0x40
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006dba:	6939      	ldr	r1, [r7, #16]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fdc0 	bl	800894a <USBD_CtlPrepareRx>
      break;
 8006dca:	e076      	b.n	8006eba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	33b0      	adds	r3, #176	; 0xb0
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	7850      	ldrb	r0, [r2, #1]
 8006de2:	2200      	movs	r2, #0
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	4798      	blx	r3
      break;
 8006de8:	e067      	b.n	8006eba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	785b      	ldrb	r3, [r3, #1]
 8006dee:	2b0b      	cmp	r3, #11
 8006df0:	d851      	bhi.n	8006e96 <USBD_CDC_Setup+0x18a>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <USBD_CDC_Setup+0xec>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e29 	.word	0x08006e29
 8006dfc:	08006ea5 	.word	0x08006ea5
 8006e00:	08006e97 	.word	0x08006e97
 8006e04:	08006e97 	.word	0x08006e97
 8006e08:	08006e97 	.word	0x08006e97
 8006e0c:	08006e97 	.word	0x08006e97
 8006e10:	08006e97 	.word	0x08006e97
 8006e14:	08006e97 	.word	0x08006e97
 8006e18:	08006e97 	.word	0x08006e97
 8006e1c:	08006e97 	.word	0x08006e97
 8006e20:	08006e53 	.word	0x08006e53
 8006e24:	08006e7d 	.word	0x08006e7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d107      	bne.n	8006e44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e34:	f107 030a 	add.w	r3, r7, #10
 8006e38:	2202      	movs	r2, #2
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fd55 	bl	80088ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e42:	e032      	b.n	8006eaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 fcd3 	bl	80087f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006e50:	e02b      	b.n	8006eaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d107      	bne.n	8006e6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e5e:	f107 030d 	add.w	r3, r7, #13
 8006e62:	2201      	movs	r2, #1
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f001 fd40 	bl	80088ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e6c:	e01d      	b.n	8006eaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fcbe 	bl	80087f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	75fb      	strb	r3, [r7, #23]
          break;
 8006e7a:	e016      	b.n	8006eaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d00f      	beq.n	8006ea8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f001 fcb1 	bl	80087f2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e90:	2303      	movs	r3, #3
 8006e92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006e94:	e008      	b.n	8006ea8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fcaa 	bl	80087f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea2:	e002      	b.n	8006eaa <USBD_CDC_Setup+0x19e>
          break;
 8006ea4:	bf00      	nop
 8006ea6:	e008      	b.n	8006eba <USBD_CDC_Setup+0x1ae>
          break;
 8006ea8:	bf00      	nop
      }
      break;
 8006eaa:	e006      	b.n	8006eba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 fc9f 	bl	80087f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	460b      	mov	r3, r1
 8006ece:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ed6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32b0      	adds	r2, #176	; 0xb0
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e065      	b.n	8006fba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	32b0      	adds	r2, #176	; 0xb0
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	3314      	adds	r3, #20
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d02f      	beq.n	8006f78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	f003 020f 	and.w	r2, r3, #15
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	f003 010f 	and.w	r1, r3, #15
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	460b      	mov	r3, r1
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	440b      	add	r3, r1
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4403      	add	r3, r0
 8006f40:	331c      	adds	r3, #28
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f48:	fb01 f303 	mul.w	r3, r1, r3
 8006f4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d112      	bne.n	8006f78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	f003 020f 	and.w	r2, r3, #15
 8006f58:	6879      	ldr	r1, [r7, #4]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	3314      	adds	r3, #20
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f6a:	78f9      	ldrb	r1, [r7, #3]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	2200      	movs	r2, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f002 f9c4 	bl	80092fe <USBD_LL_Transmit>
 8006f76:	e01f      	b.n	8006fb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	33b0      	adds	r3, #176	; 0xb0
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d010      	beq.n	8006fb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	33b0      	adds	r3, #176	; 0xb0
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	32b0      	adds	r2, #176	; 0xb0
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	32b0      	adds	r2, #176	; 0xb0
 8006fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e01a      	b.n	800702a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006ff4:	78fb      	ldrb	r3, [r7, #3]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f002 f9c2 	bl	8009382 <USBD_LL_GetRxDataSize>
 8006ffe:	4602      	mov	r2, r0
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	33b0      	adds	r3, #176	; 0xb0
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007024:	4611      	mov	r1, r2
 8007026:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b084      	sub	sp, #16
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32b0      	adds	r2, #176	; 0xb0
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007050:	2303      	movs	r3, #3
 8007052:	e025      	b.n	80070a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	33b0      	adds	r3, #176	; 0xb0
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01a      	beq.n	800709e <USBD_CDC_EP0_RxReady+0x6c>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800706e:	2bff      	cmp	r3, #255	; 0xff
 8007070:	d015      	beq.n	800709e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	33b0      	adds	r3, #176	; 0xb0
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800708a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007092:	b292      	uxth	r2, r2
 8007094:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	22ff      	movs	r2, #255	; 0xff
 800709a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80070b0:	2182      	movs	r1, #130	; 0x82
 80070b2:	4818      	ldr	r0, [pc, #96]	; (8007114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070b4:	f000 fd62 	bl	8007b7c <USBD_GetEpDesc>
 80070b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80070ba:	2101      	movs	r1, #1
 80070bc:	4815      	ldr	r0, [pc, #84]	; (8007114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070be:	f000 fd5d 	bl	8007b7c <USBD_GetEpDesc>
 80070c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80070c4:	2181      	movs	r1, #129	; 0x81
 80070c6:	4813      	ldr	r0, [pc, #76]	; (8007114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80070c8:	f000 fd58 	bl	8007b7c <USBD_GetEpDesc>
 80070cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2210      	movs	r2, #16
 80070d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d006      	beq.n	80070ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e8:	711a      	strb	r2, [r3, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d006      	beq.n	8007102 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070fc:	711a      	strb	r2, [r3, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2243      	movs	r2, #67	; 0x43
 8007106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000054 	.word	0x20000054

08007118 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007120:	2182      	movs	r1, #130	; 0x82
 8007122:	4818      	ldr	r0, [pc, #96]	; (8007184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007124:	f000 fd2a 	bl	8007b7c <USBD_GetEpDesc>
 8007128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800712a:	2101      	movs	r1, #1
 800712c:	4815      	ldr	r0, [pc, #84]	; (8007184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800712e:	f000 fd25 	bl	8007b7c <USBD_GetEpDesc>
 8007132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007134:	2181      	movs	r1, #129	; 0x81
 8007136:	4813      	ldr	r0, [pc, #76]	; (8007184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007138:	f000 fd20 	bl	8007b7c <USBD_GetEpDesc>
 800713c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2210      	movs	r2, #16
 8007148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d006      	beq.n	800715e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	2200      	movs	r2, #0
 8007154:	711a      	strb	r2, [r3, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f042 0202 	orr.w	r2, r2, #2
 800715c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d006      	beq.n	8007172 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	711a      	strb	r2, [r3, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f042 0202 	orr.w	r2, r2, #2
 8007170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2243      	movs	r2, #67	; 0x43
 8007176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000054 	.word	0x20000054

08007188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007190:	2182      	movs	r1, #130	; 0x82
 8007192:	4818      	ldr	r0, [pc, #96]	; (80071f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007194:	f000 fcf2 	bl	8007b7c <USBD_GetEpDesc>
 8007198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800719a:	2101      	movs	r1, #1
 800719c:	4815      	ldr	r0, [pc, #84]	; (80071f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800719e:	f000 fced 	bl	8007b7c <USBD_GetEpDesc>
 80071a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071a4:	2181      	movs	r1, #129	; 0x81
 80071a6:	4813      	ldr	r0, [pc, #76]	; (80071f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80071a8:	f000 fce8 	bl	8007b7c <USBD_GetEpDesc>
 80071ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2210      	movs	r2, #16
 80071b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d006      	beq.n	80071ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c8:	711a      	strb	r2, [r3, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071dc:	711a      	strb	r2, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2243      	movs	r2, #67	; 0x43
 80071e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071e8:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000054 	.word	0x20000054

080071f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	220a      	movs	r2, #10
 8007204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007206:	4b03      	ldr	r3, [pc, #12]	; (8007214 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007208:	4618      	mov	r0, r3
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	20000010 	.word	0x20000010

08007218 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007228:	2303      	movs	r3, #3
 800722a:	e009      	b.n	8007240 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	33b0      	adds	r3, #176	; 0xb0
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	32b0      	adds	r2, #176	; 0xb0
 8007262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007266:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d101      	bne.n	8007272 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800726e:	2303      	movs	r3, #3
 8007270:	e008      	b.n	8007284 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	371c      	adds	r7, #28
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32b0      	adds	r2, #176	; 0xb0
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d101      	bne.n	80072b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e004      	b.n	80072be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	683a      	ldr	r2, [r7, #0]
 80072b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	32b0      	adds	r2, #176	; 0xb0
 80072de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e025      	b.n	800733e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11f      	bne.n	800733c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007304:	4b10      	ldr	r3, [pc, #64]	; (8007348 <USBD_CDC_TransmitPacket+0x7c>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	f003 020f 	and.w	r2, r3, #15
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4403      	add	r3, r0
 800731e:	3314      	adds	r3, #20
 8007320:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <USBD_CDC_TransmitPacket+0x7c>)
 8007324:	7819      	ldrb	r1, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f001 ffe3 	bl	80092fe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20000097 	.word	0x20000097

0800734c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b084      	sub	sp, #16
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	32b0      	adds	r2, #176	; 0xb0
 800735e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007362:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32b0      	adds	r2, #176	; 0xb0
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007376:	2303      	movs	r3, #3
 8007378:	e018      	b.n	80073ac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	7c1b      	ldrb	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d10a      	bne.n	8007398 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007382:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <USBD_CDC_ReceivePacket+0x68>)
 8007384:	7819      	ldrb	r1, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800738c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 ffd5 	bl	8009340 <USBD_LL_PrepareReceive>
 8007396:	e008      	b.n	80073aa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007398:	4b06      	ldr	r3, [pc, #24]	; (80073b4 <USBD_CDC_ReceivePacket+0x68>)
 800739a:	7819      	ldrb	r1, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073a2:	2340      	movs	r3, #64	; 0x40
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f001 ffcb 	bl	8009340 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000098 	.word	0x20000098

080073b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4613      	mov	r3, r2
 80073c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e01f      	b.n	8007410 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	79fa      	ldrb	r2, [r7, #7]
 8007402:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f001 fe45 	bl	8009094 <USBD_LL_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800740e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800742c:	2303      	movs	r3, #3
 800742e:	e025      	b.n	800747c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32ae      	adds	r2, #174	; 0xae
 8007442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00f      	beq.n	800746c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	32ae      	adds	r2, #174	; 0xae
 8007456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	f107 020e 	add.w	r2, r7, #14
 8007460:	4610      	mov	r0, r2
 8007462:	4798      	blx	r3
 8007464:	4602      	mov	r2, r0
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 fe4d 	bl	800912c <USBD_LL_Start>
 8007492:	4603      	mov	r3, r0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074a4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d009      	beq.n	80074e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	4611      	mov	r1, r2
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
 80074dc:	4603      	mov	r3, r0
 80074de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	460b      	mov	r3, r1
 80074f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	78fa      	ldrb	r2, [r7, #3]
 8007504:	4611      	mov	r1, r2
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007510:	2303      	movs	r3, #3
 8007512:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800752e:	6839      	ldr	r1, [r7, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f001 f924 	bl	800877e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007544:	461a      	mov	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	2b02      	cmp	r3, #2
 8007558:	d01a      	beq.n	8007590 <USBD_LL_SetupStage+0x72>
 800755a:	2b02      	cmp	r3, #2
 800755c:	d822      	bhi.n	80075a4 <USBD_LL_SetupStage+0x86>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <USBD_LL_SetupStage+0x4a>
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00a      	beq.n	800757c <USBD_LL_SetupStage+0x5e>
 8007566:	e01d      	b.n	80075a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fb79 	bl	8007c68 <USBD_StdDevReq>
 8007576:	4603      	mov	r3, r0
 8007578:	73fb      	strb	r3, [r7, #15]
      break;
 800757a:	e020      	b.n	80075be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fbe1 	bl	8007d4c <USBD_StdItfReq>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
      break;
 800758e:	e016      	b.n	80075be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fc43 	bl	8007e24 <USBD_StdEPReq>
 800759e:	4603      	mov	r3, r0
 80075a0:	73fb      	strb	r3, [r7, #15]
      break;
 80075a2:	e00c      	b.n	80075be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80075aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	4619      	mov	r1, r3
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 fe1a 	bl	80091ec <USBD_LL_StallEP>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
      break;
 80075bc:	bf00      	nop
  }

  return ret;
 80075be:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	460b      	mov	r3, r1
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d177      	bne.n	80076d0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80075e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	f040 80a1 	bne.w	8007736 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	8992      	ldrh	r2, [r2, #12]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d91c      	bls.n	800763a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	8992      	ldrh	r2, [r2, #12]
 8007608:	1a9a      	subs	r2, r3, r2
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	8992      	ldrh	r2, [r2, #12]
 8007616:	441a      	add	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	6919      	ldr	r1, [r3, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	899b      	ldrh	r3, [r3, #12]
 8007624:	461a      	mov	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	4293      	cmp	r3, r2
 800762c:	bf38      	it	cc
 800762e:	4613      	movcc	r3, r2
 8007630:	461a      	mov	r2, r3
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f001 f9aa 	bl	800898c <USBD_CtlContinueRx>
 8007638:	e07d      	b.n	8007736 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007640:	f003 031f 	and.w	r3, r3, #31
 8007644:	2b02      	cmp	r3, #2
 8007646:	d014      	beq.n	8007672 <USBD_LL_DataOutStage+0xaa>
 8007648:	2b02      	cmp	r3, #2
 800764a:	d81d      	bhi.n	8007688 <USBD_LL_DataOutStage+0xc0>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <USBD_LL_DataOutStage+0x8e>
 8007650:	2b01      	cmp	r3, #1
 8007652:	d003      	beq.n	800765c <USBD_LL_DataOutStage+0x94>
 8007654:	e018      	b.n	8007688 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	75bb      	strb	r3, [r7, #22]
            break;
 800765a:	e018      	b.n	800768e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007662:	b2db      	uxtb	r3, r3
 8007664:	4619      	mov	r1, r3
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fa6e 	bl	8007b48 <USBD_CoreFindIF>
 800766c:	4603      	mov	r3, r0
 800766e:	75bb      	strb	r3, [r7, #22]
            break;
 8007670:	e00d      	b.n	800768e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007678:	b2db      	uxtb	r3, r3
 800767a:	4619      	mov	r1, r3
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fa70 	bl	8007b62 <USBD_CoreFindEP>
 8007682:	4603      	mov	r3, r0
 8007684:	75bb      	strb	r3, [r7, #22]
            break;
 8007686:	e002      	b.n	800768e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	75bb      	strb	r3, [r7, #22]
            break;
 800768c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800768e:	7dbb      	ldrb	r3, [r7, #22]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d119      	bne.n	80076c8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b03      	cmp	r3, #3
 800769e:	d113      	bne.n	80076c8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80076a0:	7dba      	ldrb	r2, [r7, #22]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	32ae      	adds	r2, #174	; 0xae
 80076a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80076b0:	7dba      	ldrb	r2, [r7, #22]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80076b8:	7dba      	ldrb	r2, [r7, #22]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	32ae      	adds	r2, #174	; 0xae
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f001 f970 	bl	80089ae <USBD_CtlSendStatus>
 80076ce:	e032      	b.n	8007736 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fa41 	bl	8007b62 <USBD_CoreFindEP>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076e4:	7dbb      	ldrb	r3, [r7, #22]
 80076e6:	2bff      	cmp	r3, #255	; 0xff
 80076e8:	d025      	beq.n	8007736 <USBD_LL_DataOutStage+0x16e>
 80076ea:	7dbb      	ldrb	r3, [r7, #22]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d122      	bne.n	8007736 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d117      	bne.n	800772c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80076fc:	7dba      	ldrb	r2, [r7, #22]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	32ae      	adds	r2, #174	; 0xae
 8007702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00f      	beq.n	800772c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800770c:	7dba      	ldrb	r2, [r7, #22]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007714:	7dba      	ldrb	r2, [r7, #22]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	32ae      	adds	r2, #174	; 0xae
 800771a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	7afa      	ldrb	r2, [r7, #11]
 8007722:	4611      	mov	r1, r2
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	4798      	blx	r3
 8007728:	4603      	mov	r3, r0
 800772a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	e000      	b.n	8007738 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	460b      	mov	r3, r1
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800774e:	7afb      	ldrb	r3, [r7, #11]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d178      	bne.n	8007846 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3314      	adds	r3, #20
 8007758:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007760:	2b02      	cmp	r3, #2
 8007762:	d163      	bne.n	800782c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	8992      	ldrh	r2, [r2, #12]
 800776c:	4293      	cmp	r3, r2
 800776e:	d91c      	bls.n	80077aa <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	8992      	ldrh	r2, [r2, #12]
 8007778:	1a9a      	subs	r2, r3, r2
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	8992      	ldrh	r2, [r2, #12]
 8007786:	441a      	add	r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	6919      	ldr	r1, [r3, #16]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	461a      	mov	r2, r3
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f001 f8c6 	bl	8008928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800779c:	2300      	movs	r3, #0
 800779e:	2200      	movs	r2, #0
 80077a0:	2100      	movs	r1, #0
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f001 fdcc 	bl	8009340 <USBD_LL_PrepareReceive>
 80077a8:	e040      	b.n	800782c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	899b      	ldrh	r3, [r3, #12]
 80077ae:	461a      	mov	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d11c      	bne.n	80077f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d316      	bcc.n	80077f2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d20f      	bcs.n	80077f2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80077d2:	2200      	movs	r2, #0
 80077d4:	2100      	movs	r1, #0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 f8a6 	bl	8008928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077e4:	2300      	movs	r3, #0
 80077e6:	2200      	movs	r2, #0
 80077e8:	2100      	movs	r1, #0
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f001 fda8 	bl	8009340 <USBD_LL_PrepareReceive>
 80077f0:	e01c      	b.n	800782c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d10f      	bne.n	800781e <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d009      	beq.n	800781e <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800781e:	2180      	movs	r1, #128	; 0x80
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f001 fce3 	bl	80091ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f001 f8d4 	bl	80089d4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d03a      	beq.n	80078ac <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff fe30 	bl	800749c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007844:	e032      	b.n	80078ac <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007846:	7afb      	ldrb	r3, [r7, #11]
 8007848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800784c:	b2db      	uxtb	r3, r3
 800784e:	4619      	mov	r1, r3
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f000 f986 	bl	8007b62 <USBD_CoreFindEP>
 8007856:	4603      	mov	r3, r0
 8007858:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800785a:	7dfb      	ldrb	r3, [r7, #23]
 800785c:	2bff      	cmp	r3, #255	; 0xff
 800785e:	d025      	beq.n	80078ac <USBD_LL_DataInStage+0x16c>
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d122      	bne.n	80078ac <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b03      	cmp	r3, #3
 8007870:	d11c      	bne.n	80078ac <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007872:	7dfa      	ldrb	r2, [r7, #23]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	32ae      	adds	r2, #174	; 0xae
 8007878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d014      	beq.n	80078ac <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007882:	7dfa      	ldrb	r2, [r7, #23]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800788a:	7dfa      	ldrb	r2, [r7, #23]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	32ae      	adds	r2, #174	; 0xae
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	7afa      	ldrb	r2, [r7, #11]
 8007898:	4611      	mov	r1, r2
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	4798      	blx	r3
 800789e:	4603      	mov	r3, r0
 80078a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80078a2:	7dbb      	ldrb	r3, [r7, #22]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80078a8:	7dbb      	ldrb	r3, [r7, #22]
 80078aa:	e000      	b.n	80078ae <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d014      	beq.n	800791c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00e      	beq.n	800791c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6852      	ldr	r2, [r2, #4]
 800790a:	b2d2      	uxtb	r2, r2
 800790c:	4611      	mov	r1, r2
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800791c:	2340      	movs	r3, #64	; 0x40
 800791e:	2200      	movs	r2, #0
 8007920:	2100      	movs	r1, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f001 fc1d 	bl	8009162 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2240      	movs	r2, #64	; 0x40
 8007934:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007938:	2340      	movs	r3, #64	; 0x40
 800793a:	2200      	movs	r2, #0
 800793c:	2180      	movs	r1, #128	; 0x80
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 fc0f 	bl	8009162 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2240      	movs	r2, #64	; 0x40
 8007950:	841a      	strh	r2, [r3, #32]

  return ret;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	460b      	mov	r3, r1
 8007966:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b04      	cmp	r3, #4
 800798e:	d006      	beq.n	800799e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	b2da      	uxtb	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2204      	movs	r2, #4
 80079a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d106      	bne.n	80079d6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d110      	bne.n	8007a1a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00b      	beq.n	8007a1a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a14:	69db      	ldr	r3, [r3, #28]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	32ae      	adds	r2, #174	; 0xae
 8007a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e01c      	b.n	8007a80 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d115      	bne.n	8007a7e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	32ae      	adds	r2, #174	; 0xae
 8007a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	32ae      	adds	r2, #174	; 0xae
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	78fa      	ldrb	r2, [r7, #3]
 8007a78:	4611      	mov	r1, r2
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32ae      	adds	r2, #174	; 0xae
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e01c      	b.n	8007ae4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d115      	bne.n	8007ae2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	32ae      	adds	r2, #174	; 0xae
 8007ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	32ae      	adds	r2, #174	; 0xae
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	78fa      	ldrb	r2, [r7, #3]
 8007adc:	4611      	mov	r1, r2
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00e      	beq.n	8007b3e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6852      	ldr	r2, [r2, #4]
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	4611      	mov	r1, r2
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	4798      	blx	r3
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007b6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007b90:	2300      	movs	r3, #0
 8007b92:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	885b      	ldrh	r3, [r3, #2]
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d920      	bls.n	8007be6 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007bac:	e013      	b.n	8007bd6 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007bae:	f107 030a 	add.w	r3, r7, #10
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6978      	ldr	r0, [r7, #20]
 8007bb6:	f000 f81b 	bl	8007bf0 <USBD_GetNextDesc>
 8007bba:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d108      	bne.n	8007bd6 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	789b      	ldrb	r3, [r3, #2]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d008      	beq.n	8007be4 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	b29a      	uxth	r2, r3
 8007bdc:	897b      	ldrh	r3, [r7, #10]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d8e5      	bhi.n	8007bae <USBD_GetEpDesc+0x32>
 8007be2:	e000      	b.n	8007be6 <USBD_GetEpDesc+0x6a>
          break;
 8007be4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007be6:	693b      	ldr	r3, [r7, #16]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	881a      	ldrh	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4413      	add	r3, r2
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	461a      	mov	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4413      	add	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b087      	sub	sp, #28
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007c48:	8a3b      	ldrh	r3, [r7, #16]
 8007c4a:	021b      	lsls	r3, r3, #8
 8007c4c:	b21a      	sxth	r2, r3
 8007c4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	b21b      	sxth	r3, r3
 8007c56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007c58:	89fb      	ldrh	r3, [r7, #14]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
	...

08007c68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d005      	beq.n	8007c8e <USBD_StdDevReq+0x26>
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d857      	bhi.n	8007d36 <USBD_StdDevReq+0xce>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00f      	beq.n	8007caa <USBD_StdDevReq+0x42>
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d153      	bne.n	8007d36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	32ae      	adds	r2, #174	; 0xae
 8007c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca8:	e04a      	b.n	8007d40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d83b      	bhi.n	8007d2a <USBD_StdDevReq+0xc2>
 8007cb2:	a201      	add	r2, pc, #4	; (adr r2, 8007cb8 <USBD_StdDevReq+0x50>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007d0d 	.word	0x08007d0d
 8007cbc:	08007d21 	.word	0x08007d21
 8007cc0:	08007d2b 	.word	0x08007d2b
 8007cc4:	08007d17 	.word	0x08007d17
 8007cc8:	08007d2b 	.word	0x08007d2b
 8007ccc:	08007ceb 	.word	0x08007ceb
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007d2b 	.word	0x08007d2b
 8007cd8:	08007d03 	.word	0x08007d03
 8007cdc:	08007cf5 	.word	0x08007cf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa3e 	bl	8008164 <USBD_GetDescriptor>
          break;
 8007ce8:	e024      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fba3 	bl	8008438 <USBD_SetAddress>
          break;
 8007cf2:	e01f      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fbe2 	bl	80084c0 <USBD_SetConfig>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	73fb      	strb	r3, [r7, #15]
          break;
 8007d00:	e018      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d02:	6839      	ldr	r1, [r7, #0]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fc85 	bl	8008614 <USBD_GetConfig>
          break;
 8007d0a:	e013      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fcb6 	bl	8008680 <USBD_GetStatus>
          break;
 8007d14:	e00e      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fce5 	bl	80086e8 <USBD_SetFeature>
          break;
 8007d1e:	e009      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fd09 	bl	800873a <USBD_ClrFeature>
          break;
 8007d28:	e004      	b.n	8007d34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fd60 	bl	80087f2 <USBD_CtlError>
          break;
 8007d32:	bf00      	nop
      }
      break;
 8007d34:	e004      	b.n	8007d40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007d36:	6839      	ldr	r1, [r7, #0]
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fd5a 	bl	80087f2 <USBD_CtlError>
      break;
 8007d3e:	bf00      	nop
  }

  return ret;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop

08007d4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	d005      	beq.n	8007d72 <USBD_StdItfReq+0x26>
 8007d66:	2b40      	cmp	r3, #64	; 0x40
 8007d68:	d852      	bhi.n	8007e10 <USBD_StdItfReq+0xc4>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <USBD_StdItfReq+0x26>
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d14e      	bne.n	8007e10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d840      	bhi.n	8007e02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d836      	bhi.n	8007df8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	889b      	ldrh	r3, [r3, #4]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff fed8 	bl	8007b48 <USBD_CoreFindIF>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	2bff      	cmp	r3, #255	; 0xff
 8007da0:	d01d      	beq.n	8007dde <USBD_StdItfReq+0x92>
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d11a      	bne.n	8007dde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007da8:	7bba      	ldrb	r2, [r7, #14]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	32ae      	adds	r2, #174	; 0xae
 8007dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00f      	beq.n	8007dd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007db8:	7bba      	ldrb	r2, [r7, #14]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007dc0:	7bba      	ldrb	r2, [r7, #14]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	32ae      	adds	r2, #174	; 0xae
 8007dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007dd6:	e004      	b.n	8007de2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007ddc:	e001      	b.n	8007de2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d110      	bne.n	8007e0c <USBD_StdItfReq+0xc0>
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10d      	bne.n	8007e0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fddc 	bl	80089ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007df6:	e009      	b.n	8007e0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007df8:	6839      	ldr	r1, [r7, #0]
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fcf9 	bl	80087f2 <USBD_CtlError>
          break;
 8007e00:	e004      	b.n	8007e0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fcf4 	bl	80087f2 <USBD_CtlError>
          break;
 8007e0a:	e000      	b.n	8007e0e <USBD_StdItfReq+0xc2>
          break;
 8007e0c:	bf00      	nop
      }
      break;
 8007e0e:	e004      	b.n	8007e1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fced 	bl	80087f2 <USBD_CtlError>
      break;
 8007e18:	bf00      	nop
  }

  return ret;
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	889b      	ldrh	r3, [r3, #4]
 8007e36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d007      	beq.n	8007e54 <USBD_StdEPReq+0x30>
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	f200 8181 	bhi.w	800814c <USBD_StdEPReq+0x328>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d02a      	beq.n	8007ea4 <USBD_StdEPReq+0x80>
 8007e4e:	2b20      	cmp	r3, #32
 8007e50:	f040 817c 	bne.w	800814c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff fe82 	bl	8007b62 <USBD_CoreFindEP>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e62:	7b7b      	ldrb	r3, [r7, #13]
 8007e64:	2bff      	cmp	r3, #255	; 0xff
 8007e66:	f000 8176 	beq.w	8008156 <USBD_StdEPReq+0x332>
 8007e6a:	7b7b      	ldrb	r3, [r7, #13]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f040 8172 	bne.w	8008156 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8007e72:	7b7a      	ldrb	r2, [r7, #13]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007e7a:	7b7a      	ldrb	r2, [r7, #13]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	32ae      	adds	r2, #174	; 0xae
 8007e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 8165 	beq.w	8008156 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007e8c:	7b7a      	ldrb	r2, [r7, #13]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	32ae      	adds	r2, #174	; 0xae
 8007e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ea2:	e158      	b.n	8008156 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	785b      	ldrb	r3, [r3, #1]
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d008      	beq.n	8007ebe <USBD_StdEPReq+0x9a>
 8007eac:	2b03      	cmp	r3, #3
 8007eae:	f300 8147 	bgt.w	8008140 <USBD_StdEPReq+0x31c>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 809b 	beq.w	8007fee <USBD_StdEPReq+0x1ca>
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d03c      	beq.n	8007f36 <USBD_StdEPReq+0x112>
 8007ebc:	e140      	b.n	8008140 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d002      	beq.n	8007ed0 <USBD_StdEPReq+0xac>
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d016      	beq.n	8007efc <USBD_StdEPReq+0xd8>
 8007ece:	e02c      	b.n	8007f2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00d      	beq.n	8007ef2 <USBD_StdEPReq+0xce>
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b80      	cmp	r3, #128	; 0x80
 8007eda:	d00a      	beq.n	8007ef2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f001 f983 	bl	80091ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ee6:	2180      	movs	r1, #128	; 0x80
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 f97f 	bl	80091ec <USBD_LL_StallEP>
 8007eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ef0:	e020      	b.n	8007f34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fc7c 	bl	80087f2 <USBD_CtlError>
              break;
 8007efa:	e01b      	b.n	8007f34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	885b      	ldrh	r3, [r3, #2]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10e      	bne.n	8007f22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00b      	beq.n	8007f22 <USBD_StdEPReq+0xfe>
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b80      	cmp	r3, #128	; 0x80
 8007f0e:	d008      	beq.n	8007f22 <USBD_StdEPReq+0xfe>
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	88db      	ldrh	r3, [r3, #6]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d104      	bne.n	8007f22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f001 f965 	bl	80091ec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fd43 	bl	80089ae <USBD_CtlSendStatus>

              break;
 8007f28:	e004      	b.n	8007f34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fc60 	bl	80087f2 <USBD_CtlError>
              break;
 8007f32:	bf00      	nop
          }
          break;
 8007f34:	e109      	b.n	800814a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d002      	beq.n	8007f48 <USBD_StdEPReq+0x124>
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d016      	beq.n	8007f74 <USBD_StdEPReq+0x150>
 8007f46:	e04b      	b.n	8007fe0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00d      	beq.n	8007f6a <USBD_StdEPReq+0x146>
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	2b80      	cmp	r3, #128	; 0x80
 8007f52:	d00a      	beq.n	8007f6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	4619      	mov	r1, r3
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f947 	bl	80091ec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f001 f943 	bl	80091ec <USBD_LL_StallEP>
 8007f66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f68:	e040      	b.n	8007fec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc40 	bl	80087f2 <USBD_CtlError>
              break;
 8007f72:	e03b      	b.n	8007fec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	885b      	ldrh	r3, [r3, #2]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d136      	bne.n	8007fea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f001 f94d 	bl	800922a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fd0c 	bl	80089ae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f96:	7bbb      	ldrb	r3, [r7, #14]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff fde1 	bl	8007b62 <USBD_CoreFindEP>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fa4:	7b7b      	ldrb	r3, [r7, #13]
 8007fa6:	2bff      	cmp	r3, #255	; 0xff
 8007fa8:	d01f      	beq.n	8007fea <USBD_StdEPReq+0x1c6>
 8007faa:	7b7b      	ldrb	r3, [r7, #13]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d11c      	bne.n	8007fea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007fb0:	7b7a      	ldrb	r2, [r7, #13]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007fb8:	7b7a      	ldrb	r2, [r7, #13]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	32ae      	adds	r2, #174	; 0xae
 8007fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d010      	beq.n	8007fea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007fc8:	7b7a      	ldrb	r2, [r7, #13]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32ae      	adds	r2, #174	; 0xae
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	6839      	ldr	r1, [r7, #0]
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007fde:	e004      	b.n	8007fea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007fe0:	6839      	ldr	r1, [r7, #0]
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fc05 	bl	80087f2 <USBD_CtlError>
              break;
 8007fe8:	e000      	b.n	8007fec <USBD_StdEPReq+0x1c8>
              break;
 8007fea:	bf00      	nop
          }
          break;
 8007fec:	e0ad      	b.n	800814a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d002      	beq.n	8008000 <USBD_StdEPReq+0x1dc>
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d033      	beq.n	8008066 <USBD_StdEPReq+0x242>
 8007ffe:	e099      	b.n	8008134 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008000:	7bbb      	ldrb	r3, [r7, #14]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d007      	beq.n	8008016 <USBD_StdEPReq+0x1f2>
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	2b80      	cmp	r3, #128	; 0x80
 800800a:	d004      	beq.n	8008016 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fbef 	bl	80087f2 <USBD_CtlError>
                break;
 8008014:	e093      	b.n	800813e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008016:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800801a:	2b00      	cmp	r3, #0
 800801c:	da0b      	bge.n	8008036 <USBD_StdEPReq+0x212>
 800801e:	7bbb      	ldrb	r3, [r7, #14]
 8008020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008024:	4613      	mov	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4413      	add	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	3310      	adds	r3, #16
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	3304      	adds	r3, #4
 8008034:	e00b      	b.n	800804e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800803c:	4613      	mov	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	3304      	adds	r3, #4
 800804e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	2200      	movs	r2, #0
 8008054:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	330e      	adds	r3, #14
 800805a:	2202      	movs	r2, #2
 800805c:	4619      	mov	r1, r3
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc44 	bl	80088ec <USBD_CtlSendData>
              break;
 8008064:	e06b      	b.n	800813e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800806a:	2b00      	cmp	r3, #0
 800806c:	da11      	bge.n	8008092 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	f003 020f 	and.w	r2, r3, #15
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	440b      	add	r3, r1
 8008080:	3323      	adds	r3, #35	; 0x23
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d117      	bne.n	80080b8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fbb1 	bl	80087f2 <USBD_CtlError>
                  break;
 8008090:	e055      	b.n	800813e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008092:	7bbb      	ldrb	r3, [r7, #14]
 8008094:	f003 020f 	and.w	r2, r3, #15
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	f203 1363 	addw	r3, r3, #355	; 0x163
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fb9e 	bl	80087f2 <USBD_CtlError>
                  break;
 80080b6:	e042      	b.n	800813e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	da0b      	bge.n	80080d8 <USBD_StdEPReq+0x2b4>
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	3310      	adds	r3, #16
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	3304      	adds	r3, #4
 80080d6:	e00b      	b.n	80080f0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080d8:	7bbb      	ldrb	r3, [r7, #14]
 80080da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080de:	4613      	mov	r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4413      	add	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	3304      	adds	r3, #4
 80080f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <USBD_StdEPReq+0x2da>
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b80      	cmp	r3, #128	; 0x80
 80080fc:	d103      	bne.n	8008106 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2200      	movs	r2, #0
 8008102:	739a      	strb	r2, [r3, #14]
 8008104:	e00e      	b.n	8008124 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008106:	7bbb      	ldrb	r3, [r7, #14]
 8008108:	4619      	mov	r1, r3
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 f8ac 	bl	8009268 <USBD_LL_IsStallEP>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d003      	beq.n	800811e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2201      	movs	r2, #1
 800811a:	739a      	strb	r2, [r3, #14]
 800811c:	e002      	b.n	8008124 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	330e      	adds	r3, #14
 8008128:	2202      	movs	r2, #2
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fbdd 	bl	80088ec <USBD_CtlSendData>
              break;
 8008132:	e004      	b.n	800813e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008134:	6839      	ldr	r1, [r7, #0]
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fb5b 	bl	80087f2 <USBD_CtlError>
              break;
 800813c:	bf00      	nop
          }
          break;
 800813e:	e004      	b.n	800814a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 fb55 	bl	80087f2 <USBD_CtlError>
          break;
 8008148:	bf00      	nop
      }
      break;
 800814a:	e005      	b.n	8008158 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fb4f 	bl	80087f2 <USBD_CtlError>
      break;
 8008154:	e000      	b.n	8008158 <USBD_StdEPReq+0x334>
      break;
 8008156:	bf00      	nop
  }

  return ret;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	885b      	ldrh	r3, [r3, #2]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	b29b      	uxth	r3, r3
 8008182:	3b01      	subs	r3, #1
 8008184:	2b06      	cmp	r3, #6
 8008186:	f200 8128 	bhi.w	80083da <USBD_GetDescriptor+0x276>
 800818a:	a201      	add	r2, pc, #4	; (adr r2, 8008190 <USBD_GetDescriptor+0x2c>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081ad 	.word	0x080081ad
 8008194:	080081c5 	.word	0x080081c5
 8008198:	08008205 	.word	0x08008205
 800819c:	080083db 	.word	0x080083db
 80081a0:	080083db 	.word	0x080083db
 80081a4:	0800837b 	.word	0x0800837b
 80081a8:	080083a7 	.word	0x080083a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	7c12      	ldrb	r2, [r2, #16]
 80081b8:	f107 0108 	add.w	r1, r7, #8
 80081bc:	4610      	mov	r0, r2
 80081be:	4798      	blx	r3
 80081c0:	60f8      	str	r0, [r7, #12]
      break;
 80081c2:	e112      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	7c1b      	ldrb	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10d      	bne.n	80081e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f107 0208 	add.w	r2, r7, #8
 80081d8:	4610      	mov	r0, r2
 80081da:	4798      	blx	r3
 80081dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	2202      	movs	r2, #2
 80081e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80081e6:	e100      	b.n	80083ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	f107 0208 	add.w	r2, r7, #8
 80081f4:	4610      	mov	r0, r2
 80081f6:	4798      	blx	r3
 80081f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	3301      	adds	r3, #1
 80081fe:	2202      	movs	r2, #2
 8008200:	701a      	strb	r2, [r3, #0]
      break;
 8008202:	e0f2      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	885b      	ldrh	r3, [r3, #2]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	2b05      	cmp	r3, #5
 800820c:	f200 80ac 	bhi.w	8008368 <USBD_GetDescriptor+0x204>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <USBD_GetDescriptor+0xb4>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	08008231 	.word	0x08008231
 800821c:	08008265 	.word	0x08008265
 8008220:	08008299 	.word	0x08008299
 8008224:	080082cd 	.word	0x080082cd
 8008228:	08008301 	.word	0x08008301
 800822c:	08008335 	.word	0x08008335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	7c12      	ldrb	r2, [r2, #16]
 8008248:	f107 0108 	add.w	r1, r7, #8
 800824c:	4610      	mov	r0, r2
 800824e:	4798      	blx	r3
 8008250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008252:	e091      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 facb 	bl	80087f2 <USBD_CtlError>
            err++;
 800825c:	7afb      	ldrb	r3, [r7, #11]
 800825e:	3301      	adds	r3, #1
 8008260:	72fb      	strb	r3, [r7, #11]
          break;
 8008262:	e089      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00b      	beq.n	8008288 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	7c12      	ldrb	r2, [r2, #16]
 800827c:	f107 0108 	add.w	r1, r7, #8
 8008280:	4610      	mov	r0, r2
 8008282:	4798      	blx	r3
 8008284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008286:	e077      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008288:	6839      	ldr	r1, [r7, #0]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fab1 	bl	80087f2 <USBD_CtlError>
            err++;
 8008290:	7afb      	ldrb	r3, [r7, #11]
 8008292:	3301      	adds	r3, #1
 8008294:	72fb      	strb	r3, [r7, #11]
          break;
 8008296:	e06f      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00b      	beq.n	80082bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	7c12      	ldrb	r2, [r2, #16]
 80082b0:	f107 0108 	add.w	r1, r7, #8
 80082b4:	4610      	mov	r0, r2
 80082b6:	4798      	blx	r3
 80082b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ba:	e05d      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082bc:	6839      	ldr	r1, [r7, #0]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fa97 	bl	80087f2 <USBD_CtlError>
            err++;
 80082c4:	7afb      	ldrb	r3, [r7, #11]
 80082c6:	3301      	adds	r3, #1
 80082c8:	72fb      	strb	r3, [r7, #11]
          break;
 80082ca:	e055      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00b      	beq.n	80082f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	7c12      	ldrb	r2, [r2, #16]
 80082e4:	f107 0108 	add.w	r1, r7, #8
 80082e8:	4610      	mov	r0, r2
 80082ea:	4798      	blx	r3
 80082ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ee:	e043      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa7d 	bl	80087f2 <USBD_CtlError>
            err++;
 80082f8:	7afb      	ldrb	r3, [r7, #11]
 80082fa:	3301      	adds	r3, #1
 80082fc:	72fb      	strb	r3, [r7, #11]
          break;
 80082fe:	e03b      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	7c12      	ldrb	r2, [r2, #16]
 8008318:	f107 0108 	add.w	r1, r7, #8
 800831c:	4610      	mov	r0, r2
 800831e:	4798      	blx	r3
 8008320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008322:	e029      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa63 	bl	80087f2 <USBD_CtlError>
            err++;
 800832c:	7afb      	ldrb	r3, [r7, #11]
 800832e:	3301      	adds	r3, #1
 8008330:	72fb      	strb	r3, [r7, #11]
          break;
 8008332:	e021      	b.n	8008378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00b      	beq.n	8008358 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	7c12      	ldrb	r2, [r2, #16]
 800834c:	f107 0108 	add.w	r1, r7, #8
 8008350:	4610      	mov	r0, r2
 8008352:	4798      	blx	r3
 8008354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008356:	e00f      	b.n	8008378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa49 	bl	80087f2 <USBD_CtlError>
            err++;
 8008360:	7afb      	ldrb	r3, [r7, #11]
 8008362:	3301      	adds	r3, #1
 8008364:	72fb      	strb	r3, [r7, #11]
          break;
 8008366:	e007      	b.n	8008378 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa41 	bl	80087f2 <USBD_CtlError>
          err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008376:	bf00      	nop
      }
      break;
 8008378:	e037      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	7c1b      	ldrb	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800838a:	f107 0208 	add.w	r2, r7, #8
 800838e:	4610      	mov	r0, r2
 8008390:	4798      	blx	r3
 8008392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008394:	e029      	b.n	80083ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fa2a 	bl	80087f2 <USBD_CtlError>
        err++;
 800839e:	7afb      	ldrb	r3, [r7, #11]
 80083a0:	3301      	adds	r3, #1
 80083a2:	72fb      	strb	r3, [r7, #11]
      break;
 80083a4:	e021      	b.n	80083ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10d      	bne.n	80083ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	f107 0208 	add.w	r2, r7, #8
 80083ba:	4610      	mov	r0, r2
 80083bc:	4798      	blx	r3
 80083be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	2207      	movs	r2, #7
 80083c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80083c8:	e00f      	b.n	80083ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fa10 	bl	80087f2 <USBD_CtlError>
        err++;
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	3301      	adds	r3, #1
 80083d6:	72fb      	strb	r3, [r7, #11]
      break;
 80083d8:	e007      	b.n	80083ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80083da:	6839      	ldr	r1, [r7, #0]
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fa08 	bl	80087f2 <USBD_CtlError>
      err++;
 80083e2:	7afb      	ldrb	r3, [r7, #11]
 80083e4:	3301      	adds	r3, #1
 80083e6:	72fb      	strb	r3, [r7, #11]
      break;
 80083e8:	bf00      	nop
  }

  if (err != 0U)
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d11e      	bne.n	800842e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	88db      	ldrh	r3, [r3, #6]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d016      	beq.n	8008426 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80083f8:	893b      	ldrh	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00e      	beq.n	800841c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	88da      	ldrh	r2, [r3, #6]
 8008402:	893b      	ldrh	r3, [r7, #8]
 8008404:	4293      	cmp	r3, r2
 8008406:	bf28      	it	cs
 8008408:	4613      	movcs	r3, r2
 800840a:	b29b      	uxth	r3, r3
 800840c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800840e:	893b      	ldrh	r3, [r7, #8]
 8008410:	461a      	mov	r2, r3
 8008412:	68f9      	ldr	r1, [r7, #12]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fa69 	bl	80088ec <USBD_CtlSendData>
 800841a:	e009      	b.n	8008430 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f9e7 	bl	80087f2 <USBD_CtlError>
 8008424:	e004      	b.n	8008430 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fac1 	bl	80089ae <USBD_CtlSendStatus>
 800842c:	e000      	b.n	8008430 <USBD_GetDescriptor+0x2cc>
    return;
 800842e:	bf00      	nop
  }
}
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop

08008438 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	889b      	ldrh	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d131      	bne.n	80084ae <USBD_SetAddress+0x76>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	88db      	ldrh	r3, [r3, #6]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d12d      	bne.n	80084ae <USBD_SetAddress+0x76>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	885b      	ldrh	r3, [r3, #2]
 8008456:	2b7f      	cmp	r3, #127	; 0x7f
 8008458:	d829      	bhi.n	80084ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b03      	cmp	r3, #3
 8008470:	d104      	bne.n	800847c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f9bc 	bl	80087f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800847a:	e01d      	b.n	80084b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7bfa      	ldrb	r2, [r7, #15]
 8008480:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008484:	7bfb      	ldrb	r3, [r7, #15]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 ff19 	bl	80092c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa8d 	bl	80089ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2202      	movs	r2, #2
 800849e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a2:	e009      	b.n	80084b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ac:	e004      	b.n	80084b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 f99e 	bl	80087f2 <USBD_CtlError>
  }
}
 80084b6:	bf00      	nop
 80084b8:	bf00      	nop
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	4b4e      	ldr	r3, [pc, #312]	; (8008610 <USBD_SetConfig+0x150>)
 80084d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084d8:	4b4d      	ldr	r3, [pc, #308]	; (8008610 <USBD_SetConfig+0x150>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d905      	bls.n	80084ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f985 	bl	80087f2 <USBD_CtlError>
    return USBD_FAIL;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e08c      	b.n	8008606 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d002      	beq.n	80084fe <USBD_SetConfig+0x3e>
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d029      	beq.n	8008550 <USBD_SetConfig+0x90>
 80084fc:	e075      	b.n	80085ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80084fe:	4b44      	ldr	r3, [pc, #272]	; (8008610 <USBD_SetConfig+0x150>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d020      	beq.n	8008548 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008506:	4b42      	ldr	r3, [pc, #264]	; (8008610 <USBD_SetConfig+0x150>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008510:	4b3f      	ldr	r3, [pc, #252]	; (8008610 <USBD_SetConfig+0x150>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7fe ffcb 	bl	80074b2 <USBD_SetClassConfig>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d008      	beq.n	8008538 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f962 	bl	80087f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008536:	e065      	b.n	8008604 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 fa38 	bl	80089ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2203      	movs	r2, #3
 8008542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008546:	e05d      	b.n	8008604 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa30 	bl	80089ae <USBD_CtlSendStatus>
      break;
 800854e:	e059      	b.n	8008604 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008550:	4b2f      	ldr	r3, [pc, #188]	; (8008610 <USBD_SetConfig+0x150>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d112      	bne.n	800857e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008560:	4b2b      	ldr	r3, [pc, #172]	; (8008610 <USBD_SetConfig+0x150>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	461a      	mov	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800856a:	4b29      	ldr	r3, [pc, #164]	; (8008610 <USBD_SetConfig+0x150>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f7fe ffba 	bl	80074ea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fa19 	bl	80089ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800857c:	e042      	b.n	8008604 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <USBD_SetConfig+0x150>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	429a      	cmp	r2, r3
 800858a:	d02a      	beq.n	80085e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7fe ffa8 	bl	80074ea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800859a:	4b1d      	ldr	r3, [pc, #116]	; (8008610 <USBD_SetConfig+0x150>)
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085a4:	4b1a      	ldr	r3, [pc, #104]	; (8008610 <USBD_SetConfig+0x150>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fe ff81 	bl	80074b2 <USBD_SetClassConfig>
 80085b0:	4603      	mov	r3, r0
 80085b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00f      	beq.n	80085da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f918 	bl	80087f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7fe ff8d 	bl	80074ea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085d8:	e014      	b.n	8008604 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f9e7 	bl	80089ae <USBD_CtlSendStatus>
      break;
 80085e0:	e010      	b.n	8008604 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 f9e3 	bl	80089ae <USBD_CtlSendStatus>
      break;
 80085e8:	e00c      	b.n	8008604 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 f900 	bl	80087f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <USBD_SetConfig+0x150>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7fe ff76 	bl	80074ea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80085fe:	2303      	movs	r3, #3
 8008600:	73fb      	strb	r3, [r7, #15]
      break;
 8008602:	bf00      	nop
  }

  return ret;
 8008604:	7bfb      	ldrb	r3, [r7, #15]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000500 	.word	0x20000500

08008614 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	88db      	ldrh	r3, [r3, #6]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d004      	beq.n	8008630 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f8e2 	bl	80087f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800862e:	e023      	b.n	8008678 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b02      	cmp	r3, #2
 800863a:	dc02      	bgt.n	8008642 <USBD_GetConfig+0x2e>
 800863c:	2b00      	cmp	r3, #0
 800863e:	dc03      	bgt.n	8008648 <USBD_GetConfig+0x34>
 8008640:	e015      	b.n	800866e <USBD_GetConfig+0x5a>
 8008642:	2b03      	cmp	r3, #3
 8008644:	d00b      	beq.n	800865e <USBD_GetConfig+0x4a>
 8008646:	e012      	b.n	800866e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3308      	adds	r3, #8
 8008652:	2201      	movs	r2, #1
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f948 	bl	80088ec <USBD_CtlSendData>
        break;
 800865c:	e00c      	b.n	8008678 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	3304      	adds	r3, #4
 8008662:	2201      	movs	r2, #1
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f940 	bl	80088ec <USBD_CtlSendData>
        break;
 800866c:	e004      	b.n	8008678 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f8be 	bl	80087f2 <USBD_CtlError>
        break;
 8008676:	bf00      	nop
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008690:	b2db      	uxtb	r3, r3
 8008692:	3b01      	subs	r3, #1
 8008694:	2b02      	cmp	r3, #2
 8008696:	d81e      	bhi.n	80086d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	88db      	ldrh	r3, [r3, #6]
 800869c:	2b02      	cmp	r3, #2
 800869e:	d004      	beq.n	80086aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f8a5 	bl	80087f2 <USBD_CtlError>
        break;
 80086a8:	e01a      	b.n	80086e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2201      	movs	r2, #1
 80086ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f043 0202 	orr.w	r2, r3, #2
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	330c      	adds	r3, #12
 80086ca:	2202      	movs	r2, #2
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f90c 	bl	80088ec <USBD_CtlSendData>
      break;
 80086d4:	e004      	b.n	80086e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f88a 	bl	80087f2 <USBD_CtlError>
      break;
 80086de:	bf00      	nop
  }
}
 80086e0:	bf00      	nop
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d107      	bne.n	800870a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f953 	bl	80089ae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008708:	e013      	b.n	8008732 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	885b      	ldrh	r3, [r3, #2]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d10b      	bne.n	800872a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	889b      	ldrh	r3, [r3, #4]
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b29b      	uxth	r3, r3
 800871a:	b2da      	uxtb	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f943 	bl	80089ae <USBD_CtlSendStatus>
}
 8008728:	e003      	b.n	8008732 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 f860 	bl	80087f2 <USBD_CtlError>
}
 8008732:	bf00      	nop
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b082      	sub	sp, #8
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
 8008742:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800874a:	b2db      	uxtb	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	2b02      	cmp	r3, #2
 8008750:	d80b      	bhi.n	800876a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	885b      	ldrh	r3, [r3, #2]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d10c      	bne.n	8008774 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f923 	bl	80089ae <USBD_CtlSendStatus>
      }
      break;
 8008768:	e004      	b.n	8008774 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800876a:	6839      	ldr	r1, [r7, #0]
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f840 	bl	80087f2 <USBD_CtlError>
      break;
 8008772:	e000      	b.n	8008776 <USBD_ClrFeature+0x3c>
      break;
 8008774:	bf00      	nop
  }
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3301      	adds	r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	781a      	ldrb	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f7ff fa3e 	bl	8007c2a <SWAPBYTE>
 80087ae:	4603      	mov	r3, r0
 80087b0:	461a      	mov	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3301      	adds	r3, #1
 80087ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3301      	adds	r3, #1
 80087c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f7ff fa31 	bl	8007c2a <SWAPBYTE>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3301      	adds	r3, #1
 80087da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7ff fa24 	bl	8007c2a <SWAPBYTE>
 80087e2:	4603      	mov	r3, r0
 80087e4:	461a      	mov	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	80da      	strh	r2, [r3, #6]
}
 80087ea:	bf00      	nop
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b082      	sub	sp, #8
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80087fc:	2180      	movs	r1, #128	; 0x80
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fcf4 	bl	80091ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008804:	2100      	movs	r1, #0
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fcf0 	bl	80091ec <USBD_LL_StallEP>
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008820:	2300      	movs	r3, #0
 8008822:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d042      	beq.n	80088b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800882e:	6938      	ldr	r0, [r7, #16]
 8008830:	f000 f842 	bl	80088b8 <USBD_GetLen>
 8008834:	4603      	mov	r3, r0
 8008836:	3301      	adds	r3, #1
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800883e:	d808      	bhi.n	8008852 <USBD_GetString+0x3e>
 8008840:	6938      	ldr	r0, [r7, #16]
 8008842:	f000 f839 	bl	80088b8 <USBD_GetLen>
 8008846:	4603      	mov	r3, r0
 8008848:	3301      	adds	r3, #1
 800884a:	b29b      	uxth	r3, r3
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	b29a      	uxth	r2, r3
 8008850:	e001      	b.n	8008856 <USBD_GetString+0x42>
 8008852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	4413      	add	r3, r2
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	7812      	ldrb	r2, [r2, #0]
 8008864:	701a      	strb	r2, [r3, #0]
  idx++;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	3301      	adds	r3, #1
 800886a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	4413      	add	r3, r2
 8008872:	2203      	movs	r2, #3
 8008874:	701a      	strb	r2, [r3, #0]
  idx++;
 8008876:	7dfb      	ldrb	r3, [r7, #23]
 8008878:	3301      	adds	r3, #1
 800887a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800887c:	e013      	b.n	80088a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	4413      	add	r3, r2
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	7812      	ldrb	r2, [r2, #0]
 8008888:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	3301      	adds	r3, #1
 800888e:	613b      	str	r3, [r7, #16]
    idx++;
 8008890:	7dfb      	ldrb	r3, [r7, #23]
 8008892:	3301      	adds	r3, #1
 8008894:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	4413      	add	r3, r2
 800889c:	2200      	movs	r2, #0
 800889e:	701a      	strb	r2, [r3, #0]
    idx++;
 80088a0:	7dfb      	ldrb	r3, [r7, #23]
 80088a2:	3301      	adds	r3, #1
 80088a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e7      	bne.n	800887e <USBD_GetString+0x6a>
 80088ae:	e000      	b.n	80088b2 <USBD_GetString+0x9e>
    return;
 80088b0:	bf00      	nop
  }
}
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80088c8:	e005      	b.n	80088d6 <USBD_GetLen+0x1e>
  {
    len++;
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	3301      	adds	r3, #1
 80088ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	3301      	adds	r3, #1
 80088d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f5      	bne.n	80088ca <USBD_GetLen+0x12>
  }

  return len;
 80088de:	7bfb      	ldrb	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	2100      	movs	r1, #0
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fcf0 	bl	80092fe <USBD_LL_Transmit>

  return USBD_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3710      	adds	r7, #16
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fcdf 	bl	80092fe <USBD_LL_Transmit>

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2203      	movs	r2, #3
 800895a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	2100      	movs	r1, #0
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fcdf 	bl	8009340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	2100      	movs	r1, #0
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fcce 	bl	8009340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2204      	movs	r2, #4
 80089ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089be:	2300      	movs	r3, #0
 80089c0:	2200      	movs	r2, #0
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fc9a 	bl	80092fe <USBD_LL_Transmit>

  return USBD_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2205      	movs	r2, #5
 80089e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089e4:	2300      	movs	r3, #0
 80089e6:	2200      	movs	r2, #0
 80089e8:	2100      	movs	r1, #0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fca8 	bl	8009340 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a00:	2200      	movs	r2, #0
 8008a02:	4912      	ldr	r1, [pc, #72]	; (8008a4c <MX_USB_DEVICE_Init+0x50>)
 8008a04:	4812      	ldr	r0, [pc, #72]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a06:	f7fe fcd7 	bl	80073b8 <USBD_Init>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a10:	f7f8 fd7c 	bl	800150c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008a14:	490f      	ldr	r1, [pc, #60]	; (8008a54 <MX_USB_DEVICE_Init+0x58>)
 8008a16:	480e      	ldr	r0, [pc, #56]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a18:	f7fe fcfe 	bl	8007418 <USBD_RegisterClass>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a22:	f7f8 fd73 	bl	800150c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008a26:	490c      	ldr	r1, [pc, #48]	; (8008a58 <MX_USB_DEVICE_Init+0x5c>)
 8008a28:	4809      	ldr	r0, [pc, #36]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a2a:	f7fe fbf5 	bl	8007218 <USBD_CDC_RegisterInterface>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008a34:	f7f8 fd6a 	bl	800150c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a38:	4805      	ldr	r0, [pc, #20]	; (8008a50 <MX_USB_DEVICE_Init+0x54>)
 8008a3a:	f7fe fd23 	bl	8007484 <USBD_Start>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008a44:	f7f8 fd62 	bl	800150c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a48:	bf00      	nop
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	200000b0 	.word	0x200000b0
 8008a50:	20000504 	.word	0x20000504
 8008a54:	2000001c 	.word	0x2000001c
 8008a58:	2000009c 	.word	0x2000009c

08008a5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008a60:	2200      	movs	r2, #0
 8008a62:	4905      	ldr	r1, [pc, #20]	; (8008a78 <CDC_Init_FS+0x1c>)
 8008a64:	4805      	ldr	r0, [pc, #20]	; (8008a7c <CDC_Init_FS+0x20>)
 8008a66:	f7fe fbf1 	bl	800724c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008a6a:	4905      	ldr	r1, [pc, #20]	; (8008a80 <CDC_Init_FS+0x24>)
 8008a6c:	4803      	ldr	r0, [pc, #12]	; (8008a7c <CDC_Init_FS+0x20>)
 8008a6e:	f7fe fc0f 	bl	8007290 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008a72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20000fe0 	.word	0x20000fe0
 8008a7c:	20000504 	.word	0x20000504
 8008a80:	200007e0 	.word	0x200007e0

08008a84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6039      	str	r1, [r7, #0]
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	2b23      	cmp	r3, #35	; 0x23
 8008aa8:	d84a      	bhi.n	8008b40 <CDC_Control_FS+0xac>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <CDC_Control_FS+0x1c>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008b41 	.word	0x08008b41
 8008ab4:	08008b41 	.word	0x08008b41
 8008ab8:	08008b41 	.word	0x08008b41
 8008abc:	08008b41 	.word	0x08008b41
 8008ac0:	08008b41 	.word	0x08008b41
 8008ac4:	08008b41 	.word	0x08008b41
 8008ac8:	08008b41 	.word	0x08008b41
 8008acc:	08008b41 	.word	0x08008b41
 8008ad0:	08008b41 	.word	0x08008b41
 8008ad4:	08008b41 	.word	0x08008b41
 8008ad8:	08008b41 	.word	0x08008b41
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b41 	.word	0x08008b41
 8008ae4:	08008b41 	.word	0x08008b41
 8008ae8:	08008b41 	.word	0x08008b41
 8008aec:	08008b41 	.word	0x08008b41
 8008af0:	08008b41 	.word	0x08008b41
 8008af4:	08008b41 	.word	0x08008b41
 8008af8:	08008b41 	.word	0x08008b41
 8008afc:	08008b41 	.word	0x08008b41
 8008b00:	08008b41 	.word	0x08008b41
 8008b04:	08008b41 	.word	0x08008b41
 8008b08:	08008b41 	.word	0x08008b41
 8008b0c:	08008b41 	.word	0x08008b41
 8008b10:	08008b41 	.word	0x08008b41
 8008b14:	08008b41 	.word	0x08008b41
 8008b18:	08008b41 	.word	0x08008b41
 8008b1c:	08008b41 	.word	0x08008b41
 8008b20:	08008b41 	.word	0x08008b41
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b41 	.word	0x08008b41
 8008b2c:	08008b41 	.word	0x08008b41
 8008b30:	08008b41 	.word	0x08008b41
 8008b34:	08008b41 	.word	0x08008b41
 8008b38:	08008b41 	.word	0x08008b41
 8008b3c:	08008b41 	.word	0x08008b41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008b40:	bf00      	nop
  }

  return (USBD_OK);
 8008b42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	4805      	ldr	r0, [pc, #20]	; (8008b74 <CDC_Receive_FS+0x24>)
 8008b5e:	f7fe fb97 	bl	8007290 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008b62:	4804      	ldr	r0, [pc, #16]	; (8008b74 <CDC_Receive_FS+0x24>)
 8008b64:	f7fe fbf2 	bl	800734c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008b68:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000504 	.word	0x20000504

08008b78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008b88:	4b0d      	ldr	r3, [pc, #52]	; (8008bc0 <CDC_Transmit_FS+0x48>)
 8008b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d001      	beq.n	8008b9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e00b      	b.n	8008bb6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008b9e:	887b      	ldrh	r3, [r7, #2]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4806      	ldr	r0, [pc, #24]	; (8008bc0 <CDC_Transmit_FS+0x48>)
 8008ba6:	f7fe fb51 	bl	800724c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008baa:	4805      	ldr	r0, [pc, #20]	; (8008bc0 <CDC_Transmit_FS+0x48>)
 8008bac:	f7fe fb8e 	bl	80072cc <USBD_CDC_TransmitPacket>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20000504 	.word	0x20000504

08008bc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
	...

08008be8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	4603      	mov	r3, r0
 8008bf0:	6039      	str	r1, [r7, #0]
 8008bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	2212      	movs	r2, #18
 8008bf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008bfa:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	200000cc 	.word	0x200000cc

08008c0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	4603      	mov	r3, r0
 8008c14:	6039      	str	r1, [r7, #0]
 8008c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	2204      	movs	r2, #4
 8008c1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008c1e:	4b03      	ldr	r3, [pc, #12]	; (8008c2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	200000e0 	.word	0x200000e0

08008c30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d105      	bne.n	8008c4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	4907      	ldr	r1, [pc, #28]	; (8008c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c46:	4808      	ldr	r0, [pc, #32]	; (8008c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c48:	f7ff fde4 	bl	8008814 <USBD_GetString>
 8008c4c:	e004      	b.n	8008c58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	4904      	ldr	r1, [pc, #16]	; (8008c64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008c52:	4805      	ldr	r0, [pc, #20]	; (8008c68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008c54:	f7ff fdde 	bl	8008814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	200017e0 	.word	0x200017e0
 8008c68:	0800c784 	.word	0x0800c784

08008c6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	6039      	str	r1, [r7, #0]
 8008c76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	4904      	ldr	r1, [pc, #16]	; (8008c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008c7c:	4804      	ldr	r0, [pc, #16]	; (8008c90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008c7e:	f7ff fdc9 	bl	8008814 <USBD_GetString>
  return USBD_StrDesc;
 8008c82:	4b02      	ldr	r3, [pc, #8]	; (8008c8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	200017e0 	.word	0x200017e0
 8008c90:	0800c79c 	.word	0x0800c79c

08008c94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	221a      	movs	r2, #26
 8008ca4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ca6:	f000 f843 	bl	8008d30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008caa:	4b02      	ldr	r3, [pc, #8]	; (8008cb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200000e4 	.word	0x200000e4

08008cb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	6039      	str	r1, [r7, #0]
 8008cc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008cc4:	79fb      	ldrb	r3, [r7, #7]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d105      	bne.n	8008cd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	4907      	ldr	r1, [pc, #28]	; (8008cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cce:	4808      	ldr	r0, [pc, #32]	; (8008cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cd0:	f7ff fda0 	bl	8008814 <USBD_GetString>
 8008cd4:	e004      	b.n	8008ce0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	4904      	ldr	r1, [pc, #16]	; (8008cec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008cda:	4805      	ldr	r0, [pc, #20]	; (8008cf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008cdc:	f7ff fd9a 	bl	8008814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ce0:	4b02      	ldr	r3, [pc, #8]	; (8008cec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	200017e0 	.word	0x200017e0
 8008cf0:	0800c7b0 	.word	0x0800c7b0

08008cf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	4907      	ldr	r1, [pc, #28]	; (8008d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d0a:	4808      	ldr	r0, [pc, #32]	; (8008d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d0c:	f7ff fd82 	bl	8008814 <USBD_GetString>
 8008d10:	e004      	b.n	8008d1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	4904      	ldr	r1, [pc, #16]	; (8008d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008d16:	4805      	ldr	r0, [pc, #20]	; (8008d2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008d18:	f7ff fd7c 	bl	8008814 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d1c:	4b02      	ldr	r3, [pc, #8]	; (8008d28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200017e0 	.word	0x200017e0
 8008d2c:	0800c7bc 	.word	0x0800c7bc

08008d30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <Get_SerialNum+0x44>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008d3c:	4b0e      	ldr	r3, [pc, #56]	; (8008d78 <Get_SerialNum+0x48>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <Get_SerialNum+0x4c>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d009      	beq.n	8008d6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008d56:	2208      	movs	r2, #8
 8008d58:	4909      	ldr	r1, [pc, #36]	; (8008d80 <Get_SerialNum+0x50>)
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f000 f814 	bl	8008d88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008d60:	2204      	movs	r2, #4
 8008d62:	4908      	ldr	r1, [pc, #32]	; (8008d84 <Get_SerialNum+0x54>)
 8008d64:	68b8      	ldr	r0, [r7, #8]
 8008d66:	f000 f80f 	bl	8008d88 <IntToUnicode>
  }
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	1fff7a10 	.word	0x1fff7a10
 8008d78:	1fff7a14 	.word	0x1fff7a14
 8008d7c:	1fff7a18 	.word	0x1fff7a18
 8008d80:	200000e6 	.word	0x200000e6
 8008d84:	200000f6 	.word	0x200000f6

08008d88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008d96:	2300      	movs	r3, #0
 8008d98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	75fb      	strb	r3, [r7, #23]
 8008d9e:	e027      	b.n	8008df0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	0f1b      	lsrs	r3, r3, #28
 8008da4:	2b09      	cmp	r3, #9
 8008da6:	d80b      	bhi.n	8008dc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	0f1b      	lsrs	r3, r3, #28
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	005b      	lsls	r3, r3, #1
 8008db2:	4619      	mov	r1, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	440b      	add	r3, r1
 8008db8:	3230      	adds	r2, #48	; 0x30
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	e00a      	b.n	8008dd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	0f1b      	lsrs	r3, r3, #28
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	440b      	add	r3, r1
 8008dd0:	3237      	adds	r2, #55	; 0x37
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ddc:	7dfb      	ldrb	r3, [r7, #23]
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	3301      	adds	r3, #1
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	4413      	add	r3, r2
 8008de6:	2200      	movs	r2, #0
 8008de8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	3301      	adds	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
 8008df0:	7dfa      	ldrb	r2, [r7, #23]
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d3d3      	bcc.n	8008da0 <IntToUnicode+0x18>
  }
}
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
 8008dfc:	371c      	adds	r7, #28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e10:	f107 0314 	add.w	r3, r7, #20
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	605a      	str	r2, [r3, #4]
 8008e1a:	609a      	str	r2, [r3, #8]
 8008e1c:	60da      	str	r2, [r3, #12]
 8008e1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e28:	d13a      	bne.n	8008ea0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e32:	4a1d      	ldr	r2, [pc, #116]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e34:	f043 0301 	orr.w	r3, r3, #1
 8008e38:	6313      	str	r3, [r2, #48]	; 0x30
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008e46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e54:	2303      	movs	r3, #3
 8008e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e58:	230a      	movs	r3, #10
 8008e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5c:	f107 0314 	add.w	r3, r7, #20
 8008e60:	4619      	mov	r1, r3
 8008e62:	4812      	ldr	r0, [pc, #72]	; (8008eac <HAL_PCD_MspInit+0xa4>)
 8008e64:	f7f9 f9da 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6c:	4a0e      	ldr	r2, [pc, #56]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e72:	6353      	str	r3, [r2, #52]	; 0x34
 8008e74:	2300      	movs	r3, #0
 8008e76:	60fb      	str	r3, [r7, #12]
 8008e78:	4b0b      	ldr	r3, [pc, #44]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7c:	4a0a      	ldr	r2, [pc, #40]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e82:	6453      	str	r3, [r2, #68]	; 0x44
 8008e84:	4b08      	ldr	r3, [pc, #32]	; (8008ea8 <HAL_PCD_MspInit+0xa0>)
 8008e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e90:	2200      	movs	r2, #0
 8008e92:	2100      	movs	r1, #0
 8008e94:	2043      	movs	r0, #67	; 0x43
 8008e96:	f7f9 f98a 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e9a:	2043      	movs	r0, #67	; 0x43
 8008e9c:	f7f9 f9a3 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008ea0:	bf00      	nop
 8008ea2:	3728      	adds	r7, #40	; 0x28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40023800 	.word	0x40023800
 8008eac:	40020000 	.word	0x40020000

08008eb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f7fe fb29 	bl	800751e <USBD_LL_SetupStage>
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008ee6:	78fa      	ldrb	r2, [r7, #3]
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4613      	mov	r3, r2
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	4619      	mov	r1, r3
 8008efe:	f7fe fb63 	bl	80075c8 <USBD_LL_DataOutStage>
}
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
 8008f12:	460b      	mov	r3, r1
 8008f14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008f1c:	78fa      	ldrb	r2, [r7, #3]
 8008f1e:	6879      	ldr	r1, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	00db      	lsls	r3, r3, #3
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	3320      	adds	r3, #32
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	4619      	mov	r1, r3
 8008f32:	f7fe fc05 	bl	8007740 <USBD_LL_DataInStage>
}
 8008f36:	bf00      	nop
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b082      	sub	sp, #8
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fe fd49 	bl	80079e4 <USBD_LL_SOF>
}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008f62:	2301      	movs	r3, #1
 8008f64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	79db      	ldrb	r3, [r3, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
 8008f72:	e008      	b.n	8008f86 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	79db      	ldrb	r3, [r3, #7]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d102      	bne.n	8008f82 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	73fb      	strb	r3, [r7, #15]
 8008f80:	e001      	b.n	8008f86 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008f82:	f7f8 fac3 	bl	800150c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008f8c:	7bfa      	ldrb	r2, [r7, #15]
 8008f8e:	4611      	mov	r1, r2
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fce3 	bl	800795c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fe fc8a 	bl	80078b6 <USBD_LL_Reset>
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fcde 	bl	800797c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008fd2:	f043 0301 	orr.w	r3, r3, #1
 8008fd6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	7adb      	ldrb	r3, [r3, #11]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <HAL_PCD_SuspendCallback+0x48>)
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	4a03      	ldr	r2, [pc, #12]	; (8008ff4 <HAL_PCD_SuspendCallback+0x48>)
 8008fe6:	f043 0306 	orr.w	r3, r3, #6
 8008fea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008fec:	bf00      	nop
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	e000ed00 	.word	0xe000ed00

08008ff8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009006:	4618      	mov	r0, r3
 8009008:	f7fe fcd4 	bl	80079b4 <USBD_LL_Resume>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	4611      	mov	r1, r2
 800902a:	4618      	mov	r0, r3
 800902c:	f7fe fd2c 	bl	8007a88 <USBD_LL_IsoOUTIncomplete>
}
 8009030:	bf00      	nop
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800904a:	78fa      	ldrb	r2, [r7, #3]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fce8 	bl	8007a24 <USBD_LL_IsoINIncomplete>
}
 8009054:	bf00      	nop
 8009056:	3708      	adds	r7, #8
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fd3e 	bl	8007aec <USBD_LL_DevConnected>
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8009086:	4618      	mov	r0, r3
 8009088:	f7fe fd3b 	bl	8007b02 <USBD_LL_DevDisconnected>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d13c      	bne.n	800911e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80090a4:	4a20      	ldr	r2, [pc, #128]	; (8009128 <USBD_LL_Init+0x94>)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a1e      	ldr	r2, [pc, #120]	; (8009128 <USBD_LL_Init+0x94>)
 80090b0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80090b4:	4b1c      	ldr	r3, [pc, #112]	; (8009128 <USBD_LL_Init+0x94>)
 80090b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80090ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80090bc:	4b1a      	ldr	r3, [pc, #104]	; (8009128 <USBD_LL_Init+0x94>)
 80090be:	2204      	movs	r2, #4
 80090c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80090c2:	4b19      	ldr	r3, [pc, #100]	; (8009128 <USBD_LL_Init+0x94>)
 80090c4:	2202      	movs	r2, #2
 80090c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80090c8:	4b17      	ldr	r3, [pc, #92]	; (8009128 <USBD_LL_Init+0x94>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80090ce:	4b16      	ldr	r3, [pc, #88]	; (8009128 <USBD_LL_Init+0x94>)
 80090d0:	2202      	movs	r2, #2
 80090d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80090d4:	4b14      	ldr	r3, [pc, #80]	; (8009128 <USBD_LL_Init+0x94>)
 80090d6:	2200      	movs	r2, #0
 80090d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80090da:	4b13      	ldr	r3, [pc, #76]	; (8009128 <USBD_LL_Init+0x94>)
 80090dc:	2200      	movs	r2, #0
 80090de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80090e0:	4b11      	ldr	r3, [pc, #68]	; (8009128 <USBD_LL_Init+0x94>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80090e6:	4b10      	ldr	r3, [pc, #64]	; (8009128 <USBD_LL_Init+0x94>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <USBD_LL_Init+0x94>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80090f2:	480d      	ldr	r0, [pc, #52]	; (8009128 <USBD_LL_Init+0x94>)
 80090f4:	f7fa fa6c 	bl	80035d0 <HAL_PCD_Init>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d001      	beq.n	8009102 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80090fe:	f7f8 fa05 	bl	800150c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009102:	2180      	movs	r1, #128	; 0x80
 8009104:	4808      	ldr	r0, [pc, #32]	; (8009128 <USBD_LL_Init+0x94>)
 8009106:	f7fb fc98 	bl	8004a3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800910a:	2240      	movs	r2, #64	; 0x40
 800910c:	2100      	movs	r1, #0
 800910e:	4806      	ldr	r0, [pc, #24]	; (8009128 <USBD_LL_Init+0x94>)
 8009110:	f7fb fc4c 	bl	80049ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009114:	2280      	movs	r2, #128	; 0x80
 8009116:	2101      	movs	r1, #1
 8009118:	4803      	ldr	r0, [pc, #12]	; (8009128 <USBD_LL_Init+0x94>)
 800911a:	f7fb fc47 	bl	80049ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	200019e0 	.word	0x200019e0

0800912c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009142:	4618      	mov	r0, r3
 8009144:	f7fa fb53 	bl	80037ee <HAL_PCD_Start>
 8009148:	4603      	mov	r3, r0
 800914a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	4618      	mov	r0, r3
 8009150:	f000 f942 	bl	80093d8 <USBD_Get_USB_Status>
 8009154:	4603      	mov	r3, r0
 8009156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009158:	7bbb      	ldrb	r3, [r7, #14]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b084      	sub	sp, #16
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	4608      	mov	r0, r1
 800916c:	4611      	mov	r1, r2
 800916e:	461a      	mov	r2, r3
 8009170:	4603      	mov	r3, r0
 8009172:	70fb      	strb	r3, [r7, #3]
 8009174:	460b      	mov	r3, r1
 8009176:	70bb      	strb	r3, [r7, #2]
 8009178:	4613      	mov	r3, r2
 800917a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800918a:	78bb      	ldrb	r3, [r7, #2]
 800918c:	883a      	ldrh	r2, [r7, #0]
 800918e:	78f9      	ldrb	r1, [r7, #3]
 8009190:	f7fb f827 	bl	80041e2 <HAL_PCD_EP_Open>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f91c 	bl	80093d8 <USBD_Get_USB_Status>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	4611      	mov	r1, r2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fb f872 	bl	80042b6 <HAL_PCD_EP_Close>
 80091d2:	4603      	mov	r3, r0
 80091d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 f8fd 	bl	80093d8 <USBD_Get_USB_Status>
 80091de:	4603      	mov	r3, r0
 80091e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4611      	mov	r1, r2
 800920a:	4618      	mov	r0, r3
 800920c:	f7fb f92a 	bl	8004464 <HAL_PCD_EP_SetStall>
 8009210:	4603      	mov	r3, r0
 8009212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	4618      	mov	r0, r3
 8009218:	f000 f8de 	bl	80093d8 <USBD_Get_USB_Status>
 800921c:	4603      	mov	r3, r0
 800921e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009220:	7bbb      	ldrb	r3, [r7, #14]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009236:	2300      	movs	r3, #0
 8009238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009244:	78fa      	ldrb	r2, [r7, #3]
 8009246:	4611      	mov	r1, r2
 8009248:	4618      	mov	r0, r3
 800924a:	f7fb f96e 	bl	800452a <HAL_PCD_EP_ClrStall>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	4618      	mov	r0, r3
 8009256:	f000 f8bf 	bl	80093d8 <USBD_Get_USB_Status>
 800925a:	4603      	mov	r3, r0
 800925c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	460b      	mov	r3, r1
 8009272:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800927a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800927c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009280:	2b00      	cmp	r3, #0
 8009282:	da0b      	bge.n	800929c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800928a:	68f9      	ldr	r1, [r7, #12]
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	440b      	add	r3, r1
 8009296:	3316      	adds	r3, #22
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	e00b      	b.n	80092b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	4613      	mov	r3, r2
 80092a6:	00db      	lsls	r3, r3, #3
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	440b      	add	r3, r1
 80092ae:	f203 2356 	addw	r3, r3, #598	; 0x256
 80092b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fa ff5b 	bl	800419a <HAL_PCD_SetAddress>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 f874 	bl	80093d8 <USBD_Get_USB_Status>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	607a      	str	r2, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	460b      	mov	r3, r1
 800930c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800930e:	2300      	movs	r3, #0
 8009310:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800931c:	7af9      	ldrb	r1, [r7, #11]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	f7fb f865 	bl	80043f0 <HAL_PCD_EP_Transmit>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 f853 	bl	80093d8 <USBD_Get_USB_Status>
 8009332:	4603      	mov	r3, r0
 8009334:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009336:	7dbb      	ldrb	r3, [r7, #22]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3718      	adds	r7, #24
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	607a      	str	r2, [r7, #4]
 800934a:	603b      	str	r3, [r7, #0]
 800934c:	460b      	mov	r3, r1
 800934e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009350:	2300      	movs	r3, #0
 8009352:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800935e:	7af9      	ldrb	r1, [r7, #11]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	f7fa fff1 	bl	800434a <HAL_PCD_EP_Receive>
 8009368:	4603      	mov	r3, r0
 800936a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800936c:	7dfb      	ldrb	r3, [r7, #23]
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f832 	bl	80093d8 <USBD_Get_USB_Status>
 8009374:	4603      	mov	r3, r0
 8009376:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009378:	7dbb      	ldrb	r3, [r7, #22]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3718      	adds	r7, #24
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f7fb f811 	bl	80043c0 <HAL_PCD_EP_GetRxCount>
 800939e:	4603      	mov	r3, r0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80093b0:	4b03      	ldr	r3, [pc, #12]	; (80093c0 <USBD_static_malloc+0x18>)
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	20001ec4 	.word	0x20001ec4

080093c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]

}
 80093cc:	bf00      	nop
 80093ce:	370c      	adds	r7, #12
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	4603      	mov	r3, r0
 80093e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	2b03      	cmp	r3, #3
 80093ea:	d817      	bhi.n	800941c <USBD_Get_USB_Status+0x44>
 80093ec:	a201      	add	r2, pc, #4	; (adr r2, 80093f4 <USBD_Get_USB_Status+0x1c>)
 80093ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f2:	bf00      	nop
 80093f4:	08009405 	.word	0x08009405
 80093f8:	0800940b 	.word	0x0800940b
 80093fc:	08009411 	.word	0x08009411
 8009400:	08009417 	.word	0x08009417
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]
    break;
 8009408:	e00b      	b.n	8009422 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800940a:	2303      	movs	r3, #3
 800940c:	73fb      	strb	r3, [r7, #15]
    break;
 800940e:	e008      	b.n	8009422 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009410:	2301      	movs	r3, #1
 8009412:	73fb      	strb	r3, [r7, #15]
    break;
 8009414:	e005      	b.n	8009422 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009416:	2303      	movs	r3, #3
 8009418:	73fb      	strb	r3, [r7, #15]
    break;
 800941a:	e002      	b.n	8009422 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800941c:	2303      	movs	r3, #3
 800941e:	73fb      	strb	r3, [r7, #15]
    break;
 8009420:	bf00      	nop
  }
  return usb_status;
 8009422:	7bfb      	ldrb	r3, [r7, #15]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <__cvt>:
 8009430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	2d00      	cmp	r5, #0
 800943a:	460e      	mov	r6, r1
 800943c:	4619      	mov	r1, r3
 800943e:	462b      	mov	r3, r5
 8009440:	bfbb      	ittet	lt
 8009442:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009446:	461d      	movlt	r5, r3
 8009448:	2300      	movge	r3, #0
 800944a:	232d      	movlt	r3, #45	; 0x2d
 800944c:	700b      	strb	r3, [r1, #0]
 800944e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009450:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009454:	4691      	mov	r9, r2
 8009456:	f023 0820 	bic.w	r8, r3, #32
 800945a:	bfbc      	itt	lt
 800945c:	4622      	movlt	r2, r4
 800945e:	4614      	movlt	r4, r2
 8009460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009464:	d005      	beq.n	8009472 <__cvt+0x42>
 8009466:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800946a:	d100      	bne.n	800946e <__cvt+0x3e>
 800946c:	3601      	adds	r6, #1
 800946e:	2102      	movs	r1, #2
 8009470:	e000      	b.n	8009474 <__cvt+0x44>
 8009472:	2103      	movs	r1, #3
 8009474:	ab03      	add	r3, sp, #12
 8009476:	9301      	str	r3, [sp, #4]
 8009478:	ab02      	add	r3, sp, #8
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	ec45 4b10 	vmov	d0, r4, r5
 8009480:	4653      	mov	r3, sl
 8009482:	4632      	mov	r2, r6
 8009484:	f000 fe68 	bl	800a158 <_dtoa_r>
 8009488:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800948c:	4607      	mov	r7, r0
 800948e:	d102      	bne.n	8009496 <__cvt+0x66>
 8009490:	f019 0f01 	tst.w	r9, #1
 8009494:	d022      	beq.n	80094dc <__cvt+0xac>
 8009496:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800949a:	eb07 0906 	add.w	r9, r7, r6
 800949e:	d110      	bne.n	80094c2 <__cvt+0x92>
 80094a0:	783b      	ldrb	r3, [r7, #0]
 80094a2:	2b30      	cmp	r3, #48	; 0x30
 80094a4:	d10a      	bne.n	80094bc <__cvt+0x8c>
 80094a6:	2200      	movs	r2, #0
 80094a8:	2300      	movs	r3, #0
 80094aa:	4620      	mov	r0, r4
 80094ac:	4629      	mov	r1, r5
 80094ae:	f7f7 fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80094b2:	b918      	cbnz	r0, 80094bc <__cvt+0x8c>
 80094b4:	f1c6 0601 	rsb	r6, r6, #1
 80094b8:	f8ca 6000 	str.w	r6, [sl]
 80094bc:	f8da 3000 	ldr.w	r3, [sl]
 80094c0:	4499      	add	r9, r3
 80094c2:	2200      	movs	r2, #0
 80094c4:	2300      	movs	r3, #0
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	f7f7 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80094ce:	b108      	cbz	r0, 80094d4 <__cvt+0xa4>
 80094d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80094d4:	2230      	movs	r2, #48	; 0x30
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	454b      	cmp	r3, r9
 80094da:	d307      	bcc.n	80094ec <__cvt+0xbc>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094e0:	1bdb      	subs	r3, r3, r7
 80094e2:	4638      	mov	r0, r7
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	b004      	add	sp, #16
 80094e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ec:	1c59      	adds	r1, r3, #1
 80094ee:	9103      	str	r1, [sp, #12]
 80094f0:	701a      	strb	r2, [r3, #0]
 80094f2:	e7f0      	b.n	80094d6 <__cvt+0xa6>

080094f4 <__exponent>:
 80094f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094f6:	4603      	mov	r3, r0
 80094f8:	2900      	cmp	r1, #0
 80094fa:	bfb8      	it	lt
 80094fc:	4249      	neglt	r1, r1
 80094fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009502:	bfb4      	ite	lt
 8009504:	222d      	movlt	r2, #45	; 0x2d
 8009506:	222b      	movge	r2, #43	; 0x2b
 8009508:	2909      	cmp	r1, #9
 800950a:	7042      	strb	r2, [r0, #1]
 800950c:	dd2a      	ble.n	8009564 <__exponent+0x70>
 800950e:	f10d 0207 	add.w	r2, sp, #7
 8009512:	4617      	mov	r7, r2
 8009514:	260a      	movs	r6, #10
 8009516:	4694      	mov	ip, r2
 8009518:	fb91 f5f6 	sdiv	r5, r1, r6
 800951c:	fb06 1415 	mls	r4, r6, r5, r1
 8009520:	3430      	adds	r4, #48	; 0x30
 8009522:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009526:	460c      	mov	r4, r1
 8009528:	2c63      	cmp	r4, #99	; 0x63
 800952a:	f102 32ff 	add.w	r2, r2, #4294967295
 800952e:	4629      	mov	r1, r5
 8009530:	dcf1      	bgt.n	8009516 <__exponent+0x22>
 8009532:	3130      	adds	r1, #48	; 0x30
 8009534:	f1ac 0402 	sub.w	r4, ip, #2
 8009538:	f802 1c01 	strb.w	r1, [r2, #-1]
 800953c:	1c41      	adds	r1, r0, #1
 800953e:	4622      	mov	r2, r4
 8009540:	42ba      	cmp	r2, r7
 8009542:	d30a      	bcc.n	800955a <__exponent+0x66>
 8009544:	f10d 0209 	add.w	r2, sp, #9
 8009548:	eba2 020c 	sub.w	r2, r2, ip
 800954c:	42bc      	cmp	r4, r7
 800954e:	bf88      	it	hi
 8009550:	2200      	movhi	r2, #0
 8009552:	4413      	add	r3, r2
 8009554:	1a18      	subs	r0, r3, r0
 8009556:	b003      	add	sp, #12
 8009558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800955e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009562:	e7ed      	b.n	8009540 <__exponent+0x4c>
 8009564:	2330      	movs	r3, #48	; 0x30
 8009566:	3130      	adds	r1, #48	; 0x30
 8009568:	7083      	strb	r3, [r0, #2]
 800956a:	70c1      	strb	r1, [r0, #3]
 800956c:	1d03      	adds	r3, r0, #4
 800956e:	e7f1      	b.n	8009554 <__exponent+0x60>

08009570 <_printf_float>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	ed2d 8b02 	vpush	{d8}
 8009578:	b08d      	sub	sp, #52	; 0x34
 800957a:	460c      	mov	r4, r1
 800957c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009580:	4616      	mov	r6, r2
 8009582:	461f      	mov	r7, r3
 8009584:	4605      	mov	r5, r0
 8009586:	f000 fce7 	bl	8009f58 <_localeconv_r>
 800958a:	f8d0 a000 	ldr.w	sl, [r0]
 800958e:	4650      	mov	r0, sl
 8009590:	f7f6 fe6e 	bl	8000270 <strlen>
 8009594:	2300      	movs	r3, #0
 8009596:	930a      	str	r3, [sp, #40]	; 0x28
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	9305      	str	r3, [sp, #20]
 800959c:	f8d8 3000 	ldr.w	r3, [r8]
 80095a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095a4:	3307      	adds	r3, #7
 80095a6:	f023 0307 	bic.w	r3, r3, #7
 80095aa:	f103 0208 	add.w	r2, r3, #8
 80095ae:	f8c8 2000 	str.w	r2, [r8]
 80095b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	f8cd 8018 	str.w	r8, [sp, #24]
 80095c0:	ee08 0a10 	vmov	s16, r0
 80095c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80095c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095cc:	4b9e      	ldr	r3, [pc, #632]	; (8009848 <_printf_float+0x2d8>)
 80095ce:	f04f 32ff 	mov.w	r2, #4294967295
 80095d2:	f7f7 faab 	bl	8000b2c <__aeabi_dcmpun>
 80095d6:	bb88      	cbnz	r0, 800963c <_printf_float+0xcc>
 80095d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095dc:	4b9a      	ldr	r3, [pc, #616]	; (8009848 <_printf_float+0x2d8>)
 80095de:	f04f 32ff 	mov.w	r2, #4294967295
 80095e2:	f7f7 fa85 	bl	8000af0 <__aeabi_dcmple>
 80095e6:	bb48      	cbnz	r0, 800963c <_printf_float+0xcc>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	4640      	mov	r0, r8
 80095ee:	4649      	mov	r1, r9
 80095f0:	f7f7 fa74 	bl	8000adc <__aeabi_dcmplt>
 80095f4:	b110      	cbz	r0, 80095fc <_printf_float+0x8c>
 80095f6:	232d      	movs	r3, #45	; 0x2d
 80095f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095fc:	4a93      	ldr	r2, [pc, #588]	; (800984c <_printf_float+0x2dc>)
 80095fe:	4b94      	ldr	r3, [pc, #592]	; (8009850 <_printf_float+0x2e0>)
 8009600:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009604:	bf94      	ite	ls
 8009606:	4690      	movls	r8, r2
 8009608:	4698      	movhi	r8, r3
 800960a:	2303      	movs	r3, #3
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	9b05      	ldr	r3, [sp, #20]
 8009610:	f023 0304 	bic.w	r3, r3, #4
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	f04f 0900 	mov.w	r9, #0
 800961a:	9700      	str	r7, [sp, #0]
 800961c:	4633      	mov	r3, r6
 800961e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009620:	4621      	mov	r1, r4
 8009622:	4628      	mov	r0, r5
 8009624:	f000 f9da 	bl	80099dc <_printf_common>
 8009628:	3001      	adds	r0, #1
 800962a:	f040 8090 	bne.w	800974e <_printf_float+0x1de>
 800962e:	f04f 30ff 	mov.w	r0, #4294967295
 8009632:	b00d      	add	sp, #52	; 0x34
 8009634:	ecbd 8b02 	vpop	{d8}
 8009638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	4640      	mov	r0, r8
 8009642:	4649      	mov	r1, r9
 8009644:	f7f7 fa72 	bl	8000b2c <__aeabi_dcmpun>
 8009648:	b140      	cbz	r0, 800965c <_printf_float+0xec>
 800964a:	464b      	mov	r3, r9
 800964c:	2b00      	cmp	r3, #0
 800964e:	bfbc      	itt	lt
 8009650:	232d      	movlt	r3, #45	; 0x2d
 8009652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009656:	4a7f      	ldr	r2, [pc, #508]	; (8009854 <_printf_float+0x2e4>)
 8009658:	4b7f      	ldr	r3, [pc, #508]	; (8009858 <_printf_float+0x2e8>)
 800965a:	e7d1      	b.n	8009600 <_printf_float+0x90>
 800965c:	6863      	ldr	r3, [r4, #4]
 800965e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009662:	9206      	str	r2, [sp, #24]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	d13f      	bne.n	80096e8 <_printf_float+0x178>
 8009668:	2306      	movs	r3, #6
 800966a:	6063      	str	r3, [r4, #4]
 800966c:	9b05      	ldr	r3, [sp, #20]
 800966e:	6861      	ldr	r1, [r4, #4]
 8009670:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009674:	2300      	movs	r3, #0
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	ab0a      	add	r3, sp, #40	; 0x28
 800967a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800967e:	ab09      	add	r3, sp, #36	; 0x24
 8009680:	ec49 8b10 	vmov	d0, r8, r9
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	6022      	str	r2, [r4, #0]
 8009688:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800968c:	4628      	mov	r0, r5
 800968e:	f7ff fecf 	bl	8009430 <__cvt>
 8009692:	9b06      	ldr	r3, [sp, #24]
 8009694:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009696:	2b47      	cmp	r3, #71	; 0x47
 8009698:	4680      	mov	r8, r0
 800969a:	d108      	bne.n	80096ae <_printf_float+0x13e>
 800969c:	1cc8      	adds	r0, r1, #3
 800969e:	db02      	blt.n	80096a6 <_printf_float+0x136>
 80096a0:	6863      	ldr	r3, [r4, #4]
 80096a2:	4299      	cmp	r1, r3
 80096a4:	dd41      	ble.n	800972a <_printf_float+0x1ba>
 80096a6:	f1ab 0302 	sub.w	r3, fp, #2
 80096aa:	fa5f fb83 	uxtb.w	fp, r3
 80096ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096b2:	d820      	bhi.n	80096f6 <_printf_float+0x186>
 80096b4:	3901      	subs	r1, #1
 80096b6:	465a      	mov	r2, fp
 80096b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096bc:	9109      	str	r1, [sp, #36]	; 0x24
 80096be:	f7ff ff19 	bl	80094f4 <__exponent>
 80096c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c4:	1813      	adds	r3, r2, r0
 80096c6:	2a01      	cmp	r2, #1
 80096c8:	4681      	mov	r9, r0
 80096ca:	6123      	str	r3, [r4, #16]
 80096cc:	dc02      	bgt.n	80096d4 <_printf_float+0x164>
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	07d2      	lsls	r2, r2, #31
 80096d2:	d501      	bpl.n	80096d8 <_printf_float+0x168>
 80096d4:	3301      	adds	r3, #1
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d09c      	beq.n	800961a <_printf_float+0xaa>
 80096e0:	232d      	movs	r3, #45	; 0x2d
 80096e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096e6:	e798      	b.n	800961a <_printf_float+0xaa>
 80096e8:	9a06      	ldr	r2, [sp, #24]
 80096ea:	2a47      	cmp	r2, #71	; 0x47
 80096ec:	d1be      	bne.n	800966c <_printf_float+0xfc>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1bc      	bne.n	800966c <_printf_float+0xfc>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e7b9      	b.n	800966a <_printf_float+0xfa>
 80096f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096fa:	d118      	bne.n	800972e <_printf_float+0x1be>
 80096fc:	2900      	cmp	r1, #0
 80096fe:	6863      	ldr	r3, [r4, #4]
 8009700:	dd0b      	ble.n	800971a <_printf_float+0x1aa>
 8009702:	6121      	str	r1, [r4, #16]
 8009704:	b913      	cbnz	r3, 800970c <_printf_float+0x19c>
 8009706:	6822      	ldr	r2, [r4, #0]
 8009708:	07d0      	lsls	r0, r2, #31
 800970a:	d502      	bpl.n	8009712 <_printf_float+0x1a2>
 800970c:	3301      	adds	r3, #1
 800970e:	440b      	add	r3, r1
 8009710:	6123      	str	r3, [r4, #16]
 8009712:	65a1      	str	r1, [r4, #88]	; 0x58
 8009714:	f04f 0900 	mov.w	r9, #0
 8009718:	e7de      	b.n	80096d8 <_printf_float+0x168>
 800971a:	b913      	cbnz	r3, 8009722 <_printf_float+0x1b2>
 800971c:	6822      	ldr	r2, [r4, #0]
 800971e:	07d2      	lsls	r2, r2, #31
 8009720:	d501      	bpl.n	8009726 <_printf_float+0x1b6>
 8009722:	3302      	adds	r3, #2
 8009724:	e7f4      	b.n	8009710 <_printf_float+0x1a0>
 8009726:	2301      	movs	r3, #1
 8009728:	e7f2      	b.n	8009710 <_printf_float+0x1a0>
 800972a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800972e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009730:	4299      	cmp	r1, r3
 8009732:	db05      	blt.n	8009740 <_printf_float+0x1d0>
 8009734:	6823      	ldr	r3, [r4, #0]
 8009736:	6121      	str	r1, [r4, #16]
 8009738:	07d8      	lsls	r0, r3, #31
 800973a:	d5ea      	bpl.n	8009712 <_printf_float+0x1a2>
 800973c:	1c4b      	adds	r3, r1, #1
 800973e:	e7e7      	b.n	8009710 <_printf_float+0x1a0>
 8009740:	2900      	cmp	r1, #0
 8009742:	bfd4      	ite	le
 8009744:	f1c1 0202 	rsble	r2, r1, #2
 8009748:	2201      	movgt	r2, #1
 800974a:	4413      	add	r3, r2
 800974c:	e7e0      	b.n	8009710 <_printf_float+0x1a0>
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	055a      	lsls	r2, r3, #21
 8009752:	d407      	bmi.n	8009764 <_printf_float+0x1f4>
 8009754:	6923      	ldr	r3, [r4, #16]
 8009756:	4642      	mov	r2, r8
 8009758:	4631      	mov	r1, r6
 800975a:	4628      	mov	r0, r5
 800975c:	47b8      	blx	r7
 800975e:	3001      	adds	r0, #1
 8009760:	d12c      	bne.n	80097bc <_printf_float+0x24c>
 8009762:	e764      	b.n	800962e <_printf_float+0xbe>
 8009764:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009768:	f240 80e0 	bls.w	800992c <_printf_float+0x3bc>
 800976c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009770:	2200      	movs	r2, #0
 8009772:	2300      	movs	r3, #0
 8009774:	f7f7 f9a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009778:	2800      	cmp	r0, #0
 800977a:	d034      	beq.n	80097e6 <_printf_float+0x276>
 800977c:	4a37      	ldr	r2, [pc, #220]	; (800985c <_printf_float+0x2ec>)
 800977e:	2301      	movs	r3, #1
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f af51 	beq.w	800962e <_printf_float+0xbe>
 800978c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009790:	429a      	cmp	r2, r3
 8009792:	db02      	blt.n	800979a <_printf_float+0x22a>
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	07d8      	lsls	r0, r3, #31
 8009798:	d510      	bpl.n	80097bc <_printf_float+0x24c>
 800979a:	ee18 3a10 	vmov	r3, s16
 800979e:	4652      	mov	r2, sl
 80097a0:	4631      	mov	r1, r6
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	f43f af41 	beq.w	800962e <_printf_float+0xbe>
 80097ac:	f04f 0800 	mov.w	r8, #0
 80097b0:	f104 091a 	add.w	r9, r4, #26
 80097b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097b6:	3b01      	subs	r3, #1
 80097b8:	4543      	cmp	r3, r8
 80097ba:	dc09      	bgt.n	80097d0 <_printf_float+0x260>
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	079b      	lsls	r3, r3, #30
 80097c0:	f100 8107 	bmi.w	80099d2 <_printf_float+0x462>
 80097c4:	68e0      	ldr	r0, [r4, #12]
 80097c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c8:	4298      	cmp	r0, r3
 80097ca:	bfb8      	it	lt
 80097cc:	4618      	movlt	r0, r3
 80097ce:	e730      	b.n	8009632 <_printf_float+0xc2>
 80097d0:	2301      	movs	r3, #1
 80097d2:	464a      	mov	r2, r9
 80097d4:	4631      	mov	r1, r6
 80097d6:	4628      	mov	r0, r5
 80097d8:	47b8      	blx	r7
 80097da:	3001      	adds	r0, #1
 80097dc:	f43f af27 	beq.w	800962e <_printf_float+0xbe>
 80097e0:	f108 0801 	add.w	r8, r8, #1
 80097e4:	e7e6      	b.n	80097b4 <_printf_float+0x244>
 80097e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dc39      	bgt.n	8009860 <_printf_float+0x2f0>
 80097ec:	4a1b      	ldr	r2, [pc, #108]	; (800985c <_printf_float+0x2ec>)
 80097ee:	2301      	movs	r3, #1
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	f43f af19 	beq.w	800962e <_printf_float+0xbe>
 80097fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009800:	4313      	orrs	r3, r2
 8009802:	d102      	bne.n	800980a <_printf_float+0x29a>
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	07d9      	lsls	r1, r3, #31
 8009808:	d5d8      	bpl.n	80097bc <_printf_float+0x24c>
 800980a:	ee18 3a10 	vmov	r3, s16
 800980e:	4652      	mov	r2, sl
 8009810:	4631      	mov	r1, r6
 8009812:	4628      	mov	r0, r5
 8009814:	47b8      	blx	r7
 8009816:	3001      	adds	r0, #1
 8009818:	f43f af09 	beq.w	800962e <_printf_float+0xbe>
 800981c:	f04f 0900 	mov.w	r9, #0
 8009820:	f104 0a1a 	add.w	sl, r4, #26
 8009824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009826:	425b      	negs	r3, r3
 8009828:	454b      	cmp	r3, r9
 800982a:	dc01      	bgt.n	8009830 <_printf_float+0x2c0>
 800982c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982e:	e792      	b.n	8009756 <_printf_float+0x1e6>
 8009830:	2301      	movs	r3, #1
 8009832:	4652      	mov	r2, sl
 8009834:	4631      	mov	r1, r6
 8009836:	4628      	mov	r0, r5
 8009838:	47b8      	blx	r7
 800983a:	3001      	adds	r0, #1
 800983c:	f43f aef7 	beq.w	800962e <_printf_float+0xbe>
 8009840:	f109 0901 	add.w	r9, r9, #1
 8009844:	e7ee      	b.n	8009824 <_printf_float+0x2b4>
 8009846:	bf00      	nop
 8009848:	7fefffff 	.word	0x7fefffff
 800984c:	0800c7e4 	.word	0x0800c7e4
 8009850:	0800c7e8 	.word	0x0800c7e8
 8009854:	0800c7ec 	.word	0x0800c7ec
 8009858:	0800c7f0 	.word	0x0800c7f0
 800985c:	0800c7f4 	.word	0x0800c7f4
 8009860:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009864:	429a      	cmp	r2, r3
 8009866:	bfa8      	it	ge
 8009868:	461a      	movge	r2, r3
 800986a:	2a00      	cmp	r2, #0
 800986c:	4691      	mov	r9, r2
 800986e:	dc37      	bgt.n	80098e0 <_printf_float+0x370>
 8009870:	f04f 0b00 	mov.w	fp, #0
 8009874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009878:	f104 021a 	add.w	r2, r4, #26
 800987c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	eba3 0309 	sub.w	r3, r3, r9
 8009884:	455b      	cmp	r3, fp
 8009886:	dc33      	bgt.n	80098f0 <_printf_float+0x380>
 8009888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800988c:	429a      	cmp	r2, r3
 800988e:	db3b      	blt.n	8009908 <_printf_float+0x398>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	07da      	lsls	r2, r3, #31
 8009894:	d438      	bmi.n	8009908 <_printf_float+0x398>
 8009896:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800989a:	eba2 0903 	sub.w	r9, r2, r3
 800989e:	9b05      	ldr	r3, [sp, #20]
 80098a0:	1ad2      	subs	r2, r2, r3
 80098a2:	4591      	cmp	r9, r2
 80098a4:	bfa8      	it	ge
 80098a6:	4691      	movge	r9, r2
 80098a8:	f1b9 0f00 	cmp.w	r9, #0
 80098ac:	dc35      	bgt.n	800991a <_printf_float+0x3aa>
 80098ae:	f04f 0800 	mov.w	r8, #0
 80098b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098b6:	f104 0a1a 	add.w	sl, r4, #26
 80098ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	eba3 0309 	sub.w	r3, r3, r9
 80098c4:	4543      	cmp	r3, r8
 80098c6:	f77f af79 	ble.w	80097bc <_printf_float+0x24c>
 80098ca:	2301      	movs	r3, #1
 80098cc:	4652      	mov	r2, sl
 80098ce:	4631      	mov	r1, r6
 80098d0:	4628      	mov	r0, r5
 80098d2:	47b8      	blx	r7
 80098d4:	3001      	adds	r0, #1
 80098d6:	f43f aeaa 	beq.w	800962e <_printf_float+0xbe>
 80098da:	f108 0801 	add.w	r8, r8, #1
 80098de:	e7ec      	b.n	80098ba <_printf_float+0x34a>
 80098e0:	4613      	mov	r3, r2
 80098e2:	4631      	mov	r1, r6
 80098e4:	4642      	mov	r2, r8
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	d1c0      	bne.n	8009870 <_printf_float+0x300>
 80098ee:	e69e      	b.n	800962e <_printf_float+0xbe>
 80098f0:	2301      	movs	r3, #1
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	9205      	str	r2, [sp, #20]
 80098f8:	47b8      	blx	r7
 80098fa:	3001      	adds	r0, #1
 80098fc:	f43f ae97 	beq.w	800962e <_printf_float+0xbe>
 8009900:	9a05      	ldr	r2, [sp, #20]
 8009902:	f10b 0b01 	add.w	fp, fp, #1
 8009906:	e7b9      	b.n	800987c <_printf_float+0x30c>
 8009908:	ee18 3a10 	vmov	r3, s16
 800990c:	4652      	mov	r2, sl
 800990e:	4631      	mov	r1, r6
 8009910:	4628      	mov	r0, r5
 8009912:	47b8      	blx	r7
 8009914:	3001      	adds	r0, #1
 8009916:	d1be      	bne.n	8009896 <_printf_float+0x326>
 8009918:	e689      	b.n	800962e <_printf_float+0xbe>
 800991a:	9a05      	ldr	r2, [sp, #20]
 800991c:	464b      	mov	r3, r9
 800991e:	4442      	add	r2, r8
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	d1c1      	bne.n	80098ae <_printf_float+0x33e>
 800992a:	e680      	b.n	800962e <_printf_float+0xbe>
 800992c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800992e:	2a01      	cmp	r2, #1
 8009930:	dc01      	bgt.n	8009936 <_printf_float+0x3c6>
 8009932:	07db      	lsls	r3, r3, #31
 8009934:	d53a      	bpl.n	80099ac <_printf_float+0x43c>
 8009936:	2301      	movs	r3, #1
 8009938:	4642      	mov	r2, r8
 800993a:	4631      	mov	r1, r6
 800993c:	4628      	mov	r0, r5
 800993e:	47b8      	blx	r7
 8009940:	3001      	adds	r0, #1
 8009942:	f43f ae74 	beq.w	800962e <_printf_float+0xbe>
 8009946:	ee18 3a10 	vmov	r3, s16
 800994a:	4652      	mov	r2, sl
 800994c:	4631      	mov	r1, r6
 800994e:	4628      	mov	r0, r5
 8009950:	47b8      	blx	r7
 8009952:	3001      	adds	r0, #1
 8009954:	f43f ae6b 	beq.w	800962e <_printf_float+0xbe>
 8009958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009964:	f7f7 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009968:	b9d8      	cbnz	r0, 80099a2 <_printf_float+0x432>
 800996a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800996e:	f108 0201 	add.w	r2, r8, #1
 8009972:	4631      	mov	r1, r6
 8009974:	4628      	mov	r0, r5
 8009976:	47b8      	blx	r7
 8009978:	3001      	adds	r0, #1
 800997a:	d10e      	bne.n	800999a <_printf_float+0x42a>
 800997c:	e657      	b.n	800962e <_printf_float+0xbe>
 800997e:	2301      	movs	r3, #1
 8009980:	4652      	mov	r2, sl
 8009982:	4631      	mov	r1, r6
 8009984:	4628      	mov	r0, r5
 8009986:	47b8      	blx	r7
 8009988:	3001      	adds	r0, #1
 800998a:	f43f ae50 	beq.w	800962e <_printf_float+0xbe>
 800998e:	f108 0801 	add.w	r8, r8, #1
 8009992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009994:	3b01      	subs	r3, #1
 8009996:	4543      	cmp	r3, r8
 8009998:	dcf1      	bgt.n	800997e <_printf_float+0x40e>
 800999a:	464b      	mov	r3, r9
 800999c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099a0:	e6da      	b.n	8009758 <_printf_float+0x1e8>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	f104 0a1a 	add.w	sl, r4, #26
 80099aa:	e7f2      	b.n	8009992 <_printf_float+0x422>
 80099ac:	2301      	movs	r3, #1
 80099ae:	4642      	mov	r2, r8
 80099b0:	e7df      	b.n	8009972 <_printf_float+0x402>
 80099b2:	2301      	movs	r3, #1
 80099b4:	464a      	mov	r2, r9
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	f43f ae36 	beq.w	800962e <_printf_float+0xbe>
 80099c2:	f108 0801 	add.w	r8, r8, #1
 80099c6:	68e3      	ldr	r3, [r4, #12]
 80099c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099ca:	1a5b      	subs	r3, r3, r1
 80099cc:	4543      	cmp	r3, r8
 80099ce:	dcf0      	bgt.n	80099b2 <_printf_float+0x442>
 80099d0:	e6f8      	b.n	80097c4 <_printf_float+0x254>
 80099d2:	f04f 0800 	mov.w	r8, #0
 80099d6:	f104 0919 	add.w	r9, r4, #25
 80099da:	e7f4      	b.n	80099c6 <_printf_float+0x456>

080099dc <_printf_common>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	4616      	mov	r6, r2
 80099e2:	4699      	mov	r9, r3
 80099e4:	688a      	ldr	r2, [r1, #8]
 80099e6:	690b      	ldr	r3, [r1, #16]
 80099e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099ec:	4293      	cmp	r3, r2
 80099ee:	bfb8      	it	lt
 80099f0:	4613      	movlt	r3, r2
 80099f2:	6033      	str	r3, [r6, #0]
 80099f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099f8:	4607      	mov	r7, r0
 80099fa:	460c      	mov	r4, r1
 80099fc:	b10a      	cbz	r2, 8009a02 <_printf_common+0x26>
 80099fe:	3301      	adds	r3, #1
 8009a00:	6033      	str	r3, [r6, #0]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	0699      	lsls	r1, r3, #26
 8009a06:	bf42      	ittt	mi
 8009a08:	6833      	ldrmi	r3, [r6, #0]
 8009a0a:	3302      	addmi	r3, #2
 8009a0c:	6033      	strmi	r3, [r6, #0]
 8009a0e:	6825      	ldr	r5, [r4, #0]
 8009a10:	f015 0506 	ands.w	r5, r5, #6
 8009a14:	d106      	bne.n	8009a24 <_printf_common+0x48>
 8009a16:	f104 0a19 	add.w	sl, r4, #25
 8009a1a:	68e3      	ldr	r3, [r4, #12]
 8009a1c:	6832      	ldr	r2, [r6, #0]
 8009a1e:	1a9b      	subs	r3, r3, r2
 8009a20:	42ab      	cmp	r3, r5
 8009a22:	dc26      	bgt.n	8009a72 <_printf_common+0x96>
 8009a24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a28:	1e13      	subs	r3, r2, #0
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	bf18      	it	ne
 8009a2e:	2301      	movne	r3, #1
 8009a30:	0692      	lsls	r2, r2, #26
 8009a32:	d42b      	bmi.n	8009a8c <_printf_common+0xb0>
 8009a34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a38:	4649      	mov	r1, r9
 8009a3a:	4638      	mov	r0, r7
 8009a3c:	47c0      	blx	r8
 8009a3e:	3001      	adds	r0, #1
 8009a40:	d01e      	beq.n	8009a80 <_printf_common+0xa4>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	6922      	ldr	r2, [r4, #16]
 8009a46:	f003 0306 	and.w	r3, r3, #6
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	bf02      	ittt	eq
 8009a4e:	68e5      	ldreq	r5, [r4, #12]
 8009a50:	6833      	ldreq	r3, [r6, #0]
 8009a52:	1aed      	subeq	r5, r5, r3
 8009a54:	68a3      	ldr	r3, [r4, #8]
 8009a56:	bf0c      	ite	eq
 8009a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a5c:	2500      	movne	r5, #0
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	bfc4      	itt	gt
 8009a62:	1a9b      	subgt	r3, r3, r2
 8009a64:	18ed      	addgt	r5, r5, r3
 8009a66:	2600      	movs	r6, #0
 8009a68:	341a      	adds	r4, #26
 8009a6a:	42b5      	cmp	r5, r6
 8009a6c:	d11a      	bne.n	8009aa4 <_printf_common+0xc8>
 8009a6e:	2000      	movs	r0, #0
 8009a70:	e008      	b.n	8009a84 <_printf_common+0xa8>
 8009a72:	2301      	movs	r3, #1
 8009a74:	4652      	mov	r2, sl
 8009a76:	4649      	mov	r1, r9
 8009a78:	4638      	mov	r0, r7
 8009a7a:	47c0      	blx	r8
 8009a7c:	3001      	adds	r0, #1
 8009a7e:	d103      	bne.n	8009a88 <_printf_common+0xac>
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a88:	3501      	adds	r5, #1
 8009a8a:	e7c6      	b.n	8009a1a <_printf_common+0x3e>
 8009a8c:	18e1      	adds	r1, r4, r3
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	2030      	movs	r0, #48	; 0x30
 8009a92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a96:	4422      	add	r2, r4
 8009a98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009aa0:	3302      	adds	r3, #2
 8009aa2:	e7c7      	b.n	8009a34 <_printf_common+0x58>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	4638      	mov	r0, r7
 8009aac:	47c0      	blx	r8
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d0e6      	beq.n	8009a80 <_printf_common+0xa4>
 8009ab2:	3601      	adds	r6, #1
 8009ab4:	e7d9      	b.n	8009a6a <_printf_common+0x8e>
	...

08009ab8 <_printf_i>:
 8009ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009abc:	7e0f      	ldrb	r7, [r1, #24]
 8009abe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ac0:	2f78      	cmp	r7, #120	; 0x78
 8009ac2:	4691      	mov	r9, r2
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	469a      	mov	sl, r3
 8009aca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ace:	d807      	bhi.n	8009ae0 <_printf_i+0x28>
 8009ad0:	2f62      	cmp	r7, #98	; 0x62
 8009ad2:	d80a      	bhi.n	8009aea <_printf_i+0x32>
 8009ad4:	2f00      	cmp	r7, #0
 8009ad6:	f000 80d4 	beq.w	8009c82 <_printf_i+0x1ca>
 8009ada:	2f58      	cmp	r7, #88	; 0x58
 8009adc:	f000 80c0 	beq.w	8009c60 <_printf_i+0x1a8>
 8009ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ae8:	e03a      	b.n	8009b60 <_printf_i+0xa8>
 8009aea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aee:	2b15      	cmp	r3, #21
 8009af0:	d8f6      	bhi.n	8009ae0 <_printf_i+0x28>
 8009af2:	a101      	add	r1, pc, #4	; (adr r1, 8009af8 <_printf_i+0x40>)
 8009af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009af8:	08009b51 	.word	0x08009b51
 8009afc:	08009b65 	.word	0x08009b65
 8009b00:	08009ae1 	.word	0x08009ae1
 8009b04:	08009ae1 	.word	0x08009ae1
 8009b08:	08009ae1 	.word	0x08009ae1
 8009b0c:	08009ae1 	.word	0x08009ae1
 8009b10:	08009b65 	.word	0x08009b65
 8009b14:	08009ae1 	.word	0x08009ae1
 8009b18:	08009ae1 	.word	0x08009ae1
 8009b1c:	08009ae1 	.word	0x08009ae1
 8009b20:	08009ae1 	.word	0x08009ae1
 8009b24:	08009c69 	.word	0x08009c69
 8009b28:	08009b91 	.word	0x08009b91
 8009b2c:	08009c23 	.word	0x08009c23
 8009b30:	08009ae1 	.word	0x08009ae1
 8009b34:	08009ae1 	.word	0x08009ae1
 8009b38:	08009c8b 	.word	0x08009c8b
 8009b3c:	08009ae1 	.word	0x08009ae1
 8009b40:	08009b91 	.word	0x08009b91
 8009b44:	08009ae1 	.word	0x08009ae1
 8009b48:	08009ae1 	.word	0x08009ae1
 8009b4c:	08009c2b 	.word	0x08009c2b
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	1d1a      	adds	r2, r3, #4
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	602a      	str	r2, [r5, #0]
 8009b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b60:	2301      	movs	r3, #1
 8009b62:	e09f      	b.n	8009ca4 <_printf_i+0x1ec>
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	682b      	ldr	r3, [r5, #0]
 8009b68:	0607      	lsls	r7, r0, #24
 8009b6a:	f103 0104 	add.w	r1, r3, #4
 8009b6e:	6029      	str	r1, [r5, #0]
 8009b70:	d501      	bpl.n	8009b76 <_printf_i+0xbe>
 8009b72:	681e      	ldr	r6, [r3, #0]
 8009b74:	e003      	b.n	8009b7e <_printf_i+0xc6>
 8009b76:	0646      	lsls	r6, r0, #25
 8009b78:	d5fb      	bpl.n	8009b72 <_printf_i+0xba>
 8009b7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	da03      	bge.n	8009b8a <_printf_i+0xd2>
 8009b82:	232d      	movs	r3, #45	; 0x2d
 8009b84:	4276      	negs	r6, r6
 8009b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8a:	485a      	ldr	r0, [pc, #360]	; (8009cf4 <_printf_i+0x23c>)
 8009b8c:	230a      	movs	r3, #10
 8009b8e:	e012      	b.n	8009bb6 <_printf_i+0xfe>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	6820      	ldr	r0, [r4, #0]
 8009b94:	1d19      	adds	r1, r3, #4
 8009b96:	6029      	str	r1, [r5, #0]
 8009b98:	0605      	lsls	r5, r0, #24
 8009b9a:	d501      	bpl.n	8009ba0 <_printf_i+0xe8>
 8009b9c:	681e      	ldr	r6, [r3, #0]
 8009b9e:	e002      	b.n	8009ba6 <_printf_i+0xee>
 8009ba0:	0641      	lsls	r1, r0, #25
 8009ba2:	d5fb      	bpl.n	8009b9c <_printf_i+0xe4>
 8009ba4:	881e      	ldrh	r6, [r3, #0]
 8009ba6:	4853      	ldr	r0, [pc, #332]	; (8009cf4 <_printf_i+0x23c>)
 8009ba8:	2f6f      	cmp	r7, #111	; 0x6f
 8009baa:	bf0c      	ite	eq
 8009bac:	2308      	moveq	r3, #8
 8009bae:	230a      	movne	r3, #10
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bb6:	6865      	ldr	r5, [r4, #4]
 8009bb8:	60a5      	str	r5, [r4, #8]
 8009bba:	2d00      	cmp	r5, #0
 8009bbc:	bfa2      	ittt	ge
 8009bbe:	6821      	ldrge	r1, [r4, #0]
 8009bc0:	f021 0104 	bicge.w	r1, r1, #4
 8009bc4:	6021      	strge	r1, [r4, #0]
 8009bc6:	b90e      	cbnz	r6, 8009bcc <_printf_i+0x114>
 8009bc8:	2d00      	cmp	r5, #0
 8009bca:	d04b      	beq.n	8009c64 <_printf_i+0x1ac>
 8009bcc:	4615      	mov	r5, r2
 8009bce:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bd2:	fb03 6711 	mls	r7, r3, r1, r6
 8009bd6:	5dc7      	ldrb	r7, [r0, r7]
 8009bd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bdc:	4637      	mov	r7, r6
 8009bde:	42bb      	cmp	r3, r7
 8009be0:	460e      	mov	r6, r1
 8009be2:	d9f4      	bls.n	8009bce <_printf_i+0x116>
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d10b      	bne.n	8009c00 <_printf_i+0x148>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	07de      	lsls	r6, r3, #31
 8009bec:	d508      	bpl.n	8009c00 <_printf_i+0x148>
 8009bee:	6923      	ldr	r3, [r4, #16]
 8009bf0:	6861      	ldr	r1, [r4, #4]
 8009bf2:	4299      	cmp	r1, r3
 8009bf4:	bfde      	ittt	le
 8009bf6:	2330      	movle	r3, #48	; 0x30
 8009bf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009c00:	1b52      	subs	r2, r2, r5
 8009c02:	6122      	str	r2, [r4, #16]
 8009c04:	f8cd a000 	str.w	sl, [sp]
 8009c08:	464b      	mov	r3, r9
 8009c0a:	aa03      	add	r2, sp, #12
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	4640      	mov	r0, r8
 8009c10:	f7ff fee4 	bl	80099dc <_printf_common>
 8009c14:	3001      	adds	r0, #1
 8009c16:	d14a      	bne.n	8009cae <_printf_i+0x1f6>
 8009c18:	f04f 30ff 	mov.w	r0, #4294967295
 8009c1c:	b004      	add	sp, #16
 8009c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	f043 0320 	orr.w	r3, r3, #32
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	4833      	ldr	r0, [pc, #204]	; (8009cf8 <_printf_i+0x240>)
 8009c2c:	2778      	movs	r7, #120	; 0x78
 8009c2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	6829      	ldr	r1, [r5, #0]
 8009c36:	061f      	lsls	r7, r3, #24
 8009c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c3c:	d402      	bmi.n	8009c44 <_printf_i+0x18c>
 8009c3e:	065f      	lsls	r7, r3, #25
 8009c40:	bf48      	it	mi
 8009c42:	b2b6      	uxthmi	r6, r6
 8009c44:	07df      	lsls	r7, r3, #31
 8009c46:	bf48      	it	mi
 8009c48:	f043 0320 	orrmi.w	r3, r3, #32
 8009c4c:	6029      	str	r1, [r5, #0]
 8009c4e:	bf48      	it	mi
 8009c50:	6023      	strmi	r3, [r4, #0]
 8009c52:	b91e      	cbnz	r6, 8009c5c <_printf_i+0x1a4>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	f023 0320 	bic.w	r3, r3, #32
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	2310      	movs	r3, #16
 8009c5e:	e7a7      	b.n	8009bb0 <_printf_i+0xf8>
 8009c60:	4824      	ldr	r0, [pc, #144]	; (8009cf4 <_printf_i+0x23c>)
 8009c62:	e7e4      	b.n	8009c2e <_printf_i+0x176>
 8009c64:	4615      	mov	r5, r2
 8009c66:	e7bd      	b.n	8009be4 <_printf_i+0x12c>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	6826      	ldr	r6, [r4, #0]
 8009c6c:	6961      	ldr	r1, [r4, #20]
 8009c6e:	1d18      	adds	r0, r3, #4
 8009c70:	6028      	str	r0, [r5, #0]
 8009c72:	0635      	lsls	r5, r6, #24
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	d501      	bpl.n	8009c7c <_printf_i+0x1c4>
 8009c78:	6019      	str	r1, [r3, #0]
 8009c7a:	e002      	b.n	8009c82 <_printf_i+0x1ca>
 8009c7c:	0670      	lsls	r0, r6, #25
 8009c7e:	d5fb      	bpl.n	8009c78 <_printf_i+0x1c0>
 8009c80:	8019      	strh	r1, [r3, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	6123      	str	r3, [r4, #16]
 8009c86:	4615      	mov	r5, r2
 8009c88:	e7bc      	b.n	8009c04 <_printf_i+0x14c>
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	1d1a      	adds	r2, r3, #4
 8009c8e:	602a      	str	r2, [r5, #0]
 8009c90:	681d      	ldr	r5, [r3, #0]
 8009c92:	6862      	ldr	r2, [r4, #4]
 8009c94:	2100      	movs	r1, #0
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7f6 fa9a 	bl	80001d0 <memchr>
 8009c9c:	b108      	cbz	r0, 8009ca2 <_printf_i+0x1ea>
 8009c9e:	1b40      	subs	r0, r0, r5
 8009ca0:	6060      	str	r0, [r4, #4]
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cac:	e7aa      	b.n	8009c04 <_printf_i+0x14c>
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	462a      	mov	r2, r5
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	4640      	mov	r0, r8
 8009cb6:	47d0      	blx	sl
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d0ad      	beq.n	8009c18 <_printf_i+0x160>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	079b      	lsls	r3, r3, #30
 8009cc0:	d413      	bmi.n	8009cea <_printf_i+0x232>
 8009cc2:	68e0      	ldr	r0, [r4, #12]
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	4298      	cmp	r0, r3
 8009cc8:	bfb8      	it	lt
 8009cca:	4618      	movlt	r0, r3
 8009ccc:	e7a6      	b.n	8009c1c <_printf_i+0x164>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d09d      	beq.n	8009c18 <_printf_i+0x160>
 8009cdc:	3501      	adds	r5, #1
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	9903      	ldr	r1, [sp, #12]
 8009ce2:	1a5b      	subs	r3, r3, r1
 8009ce4:	42ab      	cmp	r3, r5
 8009ce6:	dcf2      	bgt.n	8009cce <_printf_i+0x216>
 8009ce8:	e7eb      	b.n	8009cc2 <_printf_i+0x20a>
 8009cea:	2500      	movs	r5, #0
 8009cec:	f104 0619 	add.w	r6, r4, #25
 8009cf0:	e7f5      	b.n	8009cde <_printf_i+0x226>
 8009cf2:	bf00      	nop
 8009cf4:	0800c7f6 	.word	0x0800c7f6
 8009cf8:	0800c807 	.word	0x0800c807

08009cfc <std>:
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	4604      	mov	r4, r0
 8009d02:	e9c0 3300 	strd	r3, r3, [r0]
 8009d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d0a:	6083      	str	r3, [r0, #8]
 8009d0c:	8181      	strh	r1, [r0, #12]
 8009d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d10:	81c2      	strh	r2, [r0, #14]
 8009d12:	6183      	str	r3, [r0, #24]
 8009d14:	4619      	mov	r1, r3
 8009d16:	2208      	movs	r2, #8
 8009d18:	305c      	adds	r0, #92	; 0x5c
 8009d1a:	f000 f914 	bl	8009f46 <memset>
 8009d1e:	4b0d      	ldr	r3, [pc, #52]	; (8009d54 <std+0x58>)
 8009d20:	6263      	str	r3, [r4, #36]	; 0x24
 8009d22:	4b0d      	ldr	r3, [pc, #52]	; (8009d58 <std+0x5c>)
 8009d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d26:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <std+0x60>)
 8009d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <std+0x64>)
 8009d2c:	6323      	str	r3, [r4, #48]	; 0x30
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	; (8009d64 <std+0x68>)
 8009d30:	6224      	str	r4, [r4, #32]
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d006      	beq.n	8009d44 <std+0x48>
 8009d36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009d3a:	4294      	cmp	r4, r2
 8009d3c:	d002      	beq.n	8009d44 <std+0x48>
 8009d3e:	33d0      	adds	r3, #208	; 0xd0
 8009d40:	429c      	cmp	r4, r3
 8009d42:	d105      	bne.n	8009d50 <std+0x54>
 8009d44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d4c:	f000 b978 	b.w	800a040 <__retarget_lock_init_recursive>
 8009d50:	bd10      	pop	{r4, pc}
 8009d52:	bf00      	nop
 8009d54:	08009ec1 	.word	0x08009ec1
 8009d58:	08009ee3 	.word	0x08009ee3
 8009d5c:	08009f1b 	.word	0x08009f1b
 8009d60:	08009f3f 	.word	0x08009f3f
 8009d64:	200020e4 	.word	0x200020e4

08009d68 <stdio_exit_handler>:
 8009d68:	4a02      	ldr	r2, [pc, #8]	; (8009d74 <stdio_exit_handler+0xc>)
 8009d6a:	4903      	ldr	r1, [pc, #12]	; (8009d78 <stdio_exit_handler+0x10>)
 8009d6c:	4803      	ldr	r0, [pc, #12]	; (8009d7c <stdio_exit_handler+0x14>)
 8009d6e:	f000 b869 	b.w	8009e44 <_fwalk_sglue>
 8009d72:	bf00      	nop
 8009d74:	20000100 	.word	0x20000100
 8009d78:	0800b9f1 	.word	0x0800b9f1
 8009d7c:	2000010c 	.word	0x2000010c

08009d80 <cleanup_stdio>:
 8009d80:	6841      	ldr	r1, [r0, #4]
 8009d82:	4b0c      	ldr	r3, [pc, #48]	; (8009db4 <cleanup_stdio+0x34>)
 8009d84:	4299      	cmp	r1, r3
 8009d86:	b510      	push	{r4, lr}
 8009d88:	4604      	mov	r4, r0
 8009d8a:	d001      	beq.n	8009d90 <cleanup_stdio+0x10>
 8009d8c:	f001 fe30 	bl	800b9f0 <_fflush_r>
 8009d90:	68a1      	ldr	r1, [r4, #8]
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <cleanup_stdio+0x38>)
 8009d94:	4299      	cmp	r1, r3
 8009d96:	d002      	beq.n	8009d9e <cleanup_stdio+0x1e>
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f001 fe29 	bl	800b9f0 <_fflush_r>
 8009d9e:	68e1      	ldr	r1, [r4, #12]
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <cleanup_stdio+0x3c>)
 8009da2:	4299      	cmp	r1, r3
 8009da4:	d004      	beq.n	8009db0 <cleanup_stdio+0x30>
 8009da6:	4620      	mov	r0, r4
 8009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dac:	f001 be20 	b.w	800b9f0 <_fflush_r>
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	200020e4 	.word	0x200020e4
 8009db8:	2000214c 	.word	0x2000214c
 8009dbc:	200021b4 	.word	0x200021b4

08009dc0 <global_stdio_init.part.0>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	4b0b      	ldr	r3, [pc, #44]	; (8009df0 <global_stdio_init.part.0+0x30>)
 8009dc4:	4c0b      	ldr	r4, [pc, #44]	; (8009df4 <global_stdio_init.part.0+0x34>)
 8009dc6:	4a0c      	ldr	r2, [pc, #48]	; (8009df8 <global_stdio_init.part.0+0x38>)
 8009dc8:	601a      	str	r2, [r3, #0]
 8009dca:	4620      	mov	r0, r4
 8009dcc:	2200      	movs	r2, #0
 8009dce:	2104      	movs	r1, #4
 8009dd0:	f7ff ff94 	bl	8009cfc <std>
 8009dd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2109      	movs	r1, #9
 8009ddc:	f7ff ff8e 	bl	8009cfc <std>
 8009de0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009de4:	2202      	movs	r2, #2
 8009de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dea:	2112      	movs	r1, #18
 8009dec:	f7ff bf86 	b.w	8009cfc <std>
 8009df0:	2000221c 	.word	0x2000221c
 8009df4:	200020e4 	.word	0x200020e4
 8009df8:	08009d69 	.word	0x08009d69

08009dfc <__sfp_lock_acquire>:
 8009dfc:	4801      	ldr	r0, [pc, #4]	; (8009e04 <__sfp_lock_acquire+0x8>)
 8009dfe:	f000 b920 	b.w	800a042 <__retarget_lock_acquire_recursive>
 8009e02:	bf00      	nop
 8009e04:	20002225 	.word	0x20002225

08009e08 <__sfp_lock_release>:
 8009e08:	4801      	ldr	r0, [pc, #4]	; (8009e10 <__sfp_lock_release+0x8>)
 8009e0a:	f000 b91b 	b.w	800a044 <__retarget_lock_release_recursive>
 8009e0e:	bf00      	nop
 8009e10:	20002225 	.word	0x20002225

08009e14 <__sinit>:
 8009e14:	b510      	push	{r4, lr}
 8009e16:	4604      	mov	r4, r0
 8009e18:	f7ff fff0 	bl	8009dfc <__sfp_lock_acquire>
 8009e1c:	6a23      	ldr	r3, [r4, #32]
 8009e1e:	b11b      	cbz	r3, 8009e28 <__sinit+0x14>
 8009e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e24:	f7ff bff0 	b.w	8009e08 <__sfp_lock_release>
 8009e28:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <__sinit+0x28>)
 8009e2a:	6223      	str	r3, [r4, #32]
 8009e2c:	4b04      	ldr	r3, [pc, #16]	; (8009e40 <__sinit+0x2c>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1f5      	bne.n	8009e20 <__sinit+0xc>
 8009e34:	f7ff ffc4 	bl	8009dc0 <global_stdio_init.part.0>
 8009e38:	e7f2      	b.n	8009e20 <__sinit+0xc>
 8009e3a:	bf00      	nop
 8009e3c:	08009d81 	.word	0x08009d81
 8009e40:	2000221c 	.word	0x2000221c

08009e44 <_fwalk_sglue>:
 8009e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e48:	4607      	mov	r7, r0
 8009e4a:	4688      	mov	r8, r1
 8009e4c:	4614      	mov	r4, r2
 8009e4e:	2600      	movs	r6, #0
 8009e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e54:	f1b9 0901 	subs.w	r9, r9, #1
 8009e58:	d505      	bpl.n	8009e66 <_fwalk_sglue+0x22>
 8009e5a:	6824      	ldr	r4, [r4, #0]
 8009e5c:	2c00      	cmp	r4, #0
 8009e5e:	d1f7      	bne.n	8009e50 <_fwalk_sglue+0xc>
 8009e60:	4630      	mov	r0, r6
 8009e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e66:	89ab      	ldrh	r3, [r5, #12]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d907      	bls.n	8009e7c <_fwalk_sglue+0x38>
 8009e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e70:	3301      	adds	r3, #1
 8009e72:	d003      	beq.n	8009e7c <_fwalk_sglue+0x38>
 8009e74:	4629      	mov	r1, r5
 8009e76:	4638      	mov	r0, r7
 8009e78:	47c0      	blx	r8
 8009e7a:	4306      	orrs	r6, r0
 8009e7c:	3568      	adds	r5, #104	; 0x68
 8009e7e:	e7e9      	b.n	8009e54 <_fwalk_sglue+0x10>

08009e80 <siprintf>:
 8009e80:	b40e      	push	{r1, r2, r3}
 8009e82:	b500      	push	{lr}
 8009e84:	b09c      	sub	sp, #112	; 0x70
 8009e86:	ab1d      	add	r3, sp, #116	; 0x74
 8009e88:	9002      	str	r0, [sp, #8]
 8009e8a:	9006      	str	r0, [sp, #24]
 8009e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e90:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <siprintf+0x38>)
 8009e92:	9107      	str	r1, [sp, #28]
 8009e94:	9104      	str	r1, [sp, #16]
 8009e96:	4909      	ldr	r1, [pc, #36]	; (8009ebc <siprintf+0x3c>)
 8009e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9c:	9105      	str	r1, [sp, #20]
 8009e9e:	6800      	ldr	r0, [r0, #0]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	a902      	add	r1, sp, #8
 8009ea4:	f001 fc20 	bl	800b6e8 <_svfiprintf_r>
 8009ea8:	9b02      	ldr	r3, [sp, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	b01c      	add	sp, #112	; 0x70
 8009eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb4:	b003      	add	sp, #12
 8009eb6:	4770      	bx	lr
 8009eb8:	20000158 	.word	0x20000158
 8009ebc:	ffff0208 	.word	0xffff0208

08009ec0 <__sread>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec8:	f000 f86c 	bl	8009fa4 <_read_r>
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	bfab      	itete	ge
 8009ed0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009ed2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ed4:	181b      	addge	r3, r3, r0
 8009ed6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009eda:	bfac      	ite	ge
 8009edc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ede:	81a3      	strhlt	r3, [r4, #12]
 8009ee0:	bd10      	pop	{r4, pc}

08009ee2 <__swrite>:
 8009ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee6:	461f      	mov	r7, r3
 8009ee8:	898b      	ldrh	r3, [r1, #12]
 8009eea:	05db      	lsls	r3, r3, #23
 8009eec:	4605      	mov	r5, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	4616      	mov	r6, r2
 8009ef2:	d505      	bpl.n	8009f00 <__swrite+0x1e>
 8009ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef8:	2302      	movs	r3, #2
 8009efa:	2200      	movs	r2, #0
 8009efc:	f000 f840 	bl	8009f80 <_lseek_r>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	4632      	mov	r2, r6
 8009f0e:	463b      	mov	r3, r7
 8009f10:	4628      	mov	r0, r5
 8009f12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f16:	f000 b857 	b.w	8009fc8 <_write_r>

08009f1a <__sseek>:
 8009f1a:	b510      	push	{r4, lr}
 8009f1c:	460c      	mov	r4, r1
 8009f1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f22:	f000 f82d 	bl	8009f80 <_lseek_r>
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	89a3      	ldrh	r3, [r4, #12]
 8009f2a:	bf15      	itete	ne
 8009f2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f36:	81a3      	strheq	r3, [r4, #12]
 8009f38:	bf18      	it	ne
 8009f3a:	81a3      	strhne	r3, [r4, #12]
 8009f3c:	bd10      	pop	{r4, pc}

08009f3e <__sclose>:
 8009f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f42:	f000 b80d 	b.w	8009f60 <_close_r>

08009f46 <memset>:
 8009f46:	4402      	add	r2, r0
 8009f48:	4603      	mov	r3, r0
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d100      	bne.n	8009f50 <memset+0xa>
 8009f4e:	4770      	bx	lr
 8009f50:	f803 1b01 	strb.w	r1, [r3], #1
 8009f54:	e7f9      	b.n	8009f4a <memset+0x4>
	...

08009f58 <_localeconv_r>:
 8009f58:	4800      	ldr	r0, [pc, #0]	; (8009f5c <_localeconv_r+0x4>)
 8009f5a:	4770      	bx	lr
 8009f5c:	2000024c 	.word	0x2000024c

08009f60 <_close_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d06      	ldr	r5, [pc, #24]	; (8009f7c <_close_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f7 ff07 	bl	8001d7e <_close>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_close_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_close_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20002220 	.word	0x20002220

08009f80 <_lseek_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d07      	ldr	r5, [pc, #28]	; (8009fa0 <_lseek_r+0x20>)
 8009f84:	4604      	mov	r4, r0
 8009f86:	4608      	mov	r0, r1
 8009f88:	4611      	mov	r1, r2
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	602a      	str	r2, [r5, #0]
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f7f7 ff1c 	bl	8001dcc <_lseek>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_lseek_r+0x1e>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_lseek_r+0x1e>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	20002220 	.word	0x20002220

08009fa4 <_read_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_read_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7f7 feaa 	bl	8001d0c <_read>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_read_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_read_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	20002220 	.word	0x20002220

08009fc8 <_write_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4d07      	ldr	r5, [pc, #28]	; (8009fe8 <_write_r+0x20>)
 8009fcc:	4604      	mov	r4, r0
 8009fce:	4608      	mov	r0, r1
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	602a      	str	r2, [r5, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	f7f7 feb5 	bl	8001d46 <_write>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_write_r+0x1e>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_write_r+0x1e>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20002220 	.word	0x20002220

08009fec <__errno>:
 8009fec:	4b01      	ldr	r3, [pc, #4]	; (8009ff4 <__errno+0x8>)
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000158 	.word	0x20000158

08009ff8 <__libc_init_array>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4d0d      	ldr	r5, [pc, #52]	; (800a030 <__libc_init_array+0x38>)
 8009ffc:	4c0d      	ldr	r4, [pc, #52]	; (800a034 <__libc_init_array+0x3c>)
 8009ffe:	1b64      	subs	r4, r4, r5
 800a000:	10a4      	asrs	r4, r4, #2
 800a002:	2600      	movs	r6, #0
 800a004:	42a6      	cmp	r6, r4
 800a006:	d109      	bne.n	800a01c <__libc_init_array+0x24>
 800a008:	4d0b      	ldr	r5, [pc, #44]	; (800a038 <__libc_init_array+0x40>)
 800a00a:	4c0c      	ldr	r4, [pc, #48]	; (800a03c <__libc_init_array+0x44>)
 800a00c:	f002 fb9e 	bl	800c74c <_init>
 800a010:	1b64      	subs	r4, r4, r5
 800a012:	10a4      	asrs	r4, r4, #2
 800a014:	2600      	movs	r6, #0
 800a016:	42a6      	cmp	r6, r4
 800a018:	d105      	bne.n	800a026 <__libc_init_array+0x2e>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a020:	4798      	blx	r3
 800a022:	3601      	adds	r6, #1
 800a024:	e7ee      	b.n	800a004 <__libc_init_array+0xc>
 800a026:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02a:	4798      	blx	r3
 800a02c:	3601      	adds	r6, #1
 800a02e:	e7f2      	b.n	800a016 <__libc_init_array+0x1e>
 800a030:	0800cb5c 	.word	0x0800cb5c
 800a034:	0800cb5c 	.word	0x0800cb5c
 800a038:	0800cb5c 	.word	0x0800cb5c
 800a03c:	0800cb60 	.word	0x0800cb60

0800a040 <__retarget_lock_init_recursive>:
 800a040:	4770      	bx	lr

0800a042 <__retarget_lock_acquire_recursive>:
 800a042:	4770      	bx	lr

0800a044 <__retarget_lock_release_recursive>:
 800a044:	4770      	bx	lr

0800a046 <quorem>:
 800a046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04a:	6903      	ldr	r3, [r0, #16]
 800a04c:	690c      	ldr	r4, [r1, #16]
 800a04e:	42a3      	cmp	r3, r4
 800a050:	4607      	mov	r7, r0
 800a052:	db7e      	blt.n	800a152 <quorem+0x10c>
 800a054:	3c01      	subs	r4, #1
 800a056:	f101 0814 	add.w	r8, r1, #20
 800a05a:	f100 0514 	add.w	r5, r0, #20
 800a05e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a06c:	3301      	adds	r3, #1
 800a06e:	429a      	cmp	r2, r3
 800a070:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a078:	fbb2 f6f3 	udiv	r6, r2, r3
 800a07c:	d331      	bcc.n	800a0e2 <quorem+0x9c>
 800a07e:	f04f 0e00 	mov.w	lr, #0
 800a082:	4640      	mov	r0, r8
 800a084:	46ac      	mov	ip, r5
 800a086:	46f2      	mov	sl, lr
 800a088:	f850 2b04 	ldr.w	r2, [r0], #4
 800a08c:	b293      	uxth	r3, r2
 800a08e:	fb06 e303 	mla	r3, r6, r3, lr
 800a092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a096:	0c1a      	lsrs	r2, r3, #16
 800a098:	b29b      	uxth	r3, r3
 800a09a:	ebaa 0303 	sub.w	r3, sl, r3
 800a09e:	f8dc a000 	ldr.w	sl, [ip]
 800a0a2:	fa13 f38a 	uxtah	r3, r3, sl
 800a0a6:	fb06 220e 	mla	r2, r6, lr, r2
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	9b00      	ldr	r3, [sp, #0]
 800a0ae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0b2:	b292      	uxth	r2, r2
 800a0b4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0bc:	f8bd 3000 	ldrh.w	r3, [sp]
 800a0c0:	4581      	cmp	r9, r0
 800a0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c6:	f84c 3b04 	str.w	r3, [ip], #4
 800a0ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0ce:	d2db      	bcs.n	800a088 <quorem+0x42>
 800a0d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0d4:	b92b      	cbnz	r3, 800a0e2 <quorem+0x9c>
 800a0d6:	9b01      	ldr	r3, [sp, #4]
 800a0d8:	3b04      	subs	r3, #4
 800a0da:	429d      	cmp	r5, r3
 800a0dc:	461a      	mov	r2, r3
 800a0de:	d32c      	bcc.n	800a13a <quorem+0xf4>
 800a0e0:	613c      	str	r4, [r7, #16]
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	f001 f9a6 	bl	800b434 <__mcmp>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	db22      	blt.n	800a132 <quorem+0xec>
 800a0ec:	3601      	adds	r6, #1
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0f6:	f8d1 c000 	ldr.w	ip, [r1]
 800a0fa:	b293      	uxth	r3, r2
 800a0fc:	1ac3      	subs	r3, r0, r3
 800a0fe:	0c12      	lsrs	r2, r2, #16
 800a100:	fa13 f38c 	uxtah	r3, r3, ip
 800a104:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a108:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a112:	45c1      	cmp	r9, r8
 800a114:	f841 3b04 	str.w	r3, [r1], #4
 800a118:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a11c:	d2e9      	bcs.n	800a0f2 <quorem+0xac>
 800a11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a122:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a126:	b922      	cbnz	r2, 800a132 <quorem+0xec>
 800a128:	3b04      	subs	r3, #4
 800a12a:	429d      	cmp	r5, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	d30a      	bcc.n	800a146 <quorem+0x100>
 800a130:	613c      	str	r4, [r7, #16]
 800a132:	4630      	mov	r0, r6
 800a134:	b003      	add	sp, #12
 800a136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	3b04      	subs	r3, #4
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d1ce      	bne.n	800a0e0 <quorem+0x9a>
 800a142:	3c01      	subs	r4, #1
 800a144:	e7c9      	b.n	800a0da <quorem+0x94>
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	3b04      	subs	r3, #4
 800a14a:	2a00      	cmp	r2, #0
 800a14c:	d1f0      	bne.n	800a130 <quorem+0xea>
 800a14e:	3c01      	subs	r4, #1
 800a150:	e7eb      	b.n	800a12a <quorem+0xe4>
 800a152:	2000      	movs	r0, #0
 800a154:	e7ee      	b.n	800a134 <quorem+0xee>
	...

0800a158 <_dtoa_r>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	ed2d 8b04 	vpush	{d8-d9}
 800a160:	69c5      	ldr	r5, [r0, #28]
 800a162:	b093      	sub	sp, #76	; 0x4c
 800a164:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a168:	ec57 6b10 	vmov	r6, r7, d0
 800a16c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a170:	9107      	str	r1, [sp, #28]
 800a172:	4604      	mov	r4, r0
 800a174:	920a      	str	r2, [sp, #40]	; 0x28
 800a176:	930d      	str	r3, [sp, #52]	; 0x34
 800a178:	b975      	cbnz	r5, 800a198 <_dtoa_r+0x40>
 800a17a:	2010      	movs	r0, #16
 800a17c:	f000 fe2a 	bl	800add4 <malloc>
 800a180:	4602      	mov	r2, r0
 800a182:	61e0      	str	r0, [r4, #28]
 800a184:	b920      	cbnz	r0, 800a190 <_dtoa_r+0x38>
 800a186:	4bae      	ldr	r3, [pc, #696]	; (800a440 <_dtoa_r+0x2e8>)
 800a188:	21ef      	movs	r1, #239	; 0xef
 800a18a:	48ae      	ldr	r0, [pc, #696]	; (800a444 <_dtoa_r+0x2ec>)
 800a18c:	f001 fc90 	bl	800bab0 <__assert_func>
 800a190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a194:	6005      	str	r5, [r0, #0]
 800a196:	60c5      	str	r5, [r0, #12]
 800a198:	69e3      	ldr	r3, [r4, #28]
 800a19a:	6819      	ldr	r1, [r3, #0]
 800a19c:	b151      	cbz	r1, 800a1b4 <_dtoa_r+0x5c>
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	604a      	str	r2, [r1, #4]
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4093      	lsls	r3, r2
 800a1a6:	608b      	str	r3, [r1, #8]
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	f000 ff07 	bl	800afbc <_Bfree>
 800a1ae:	69e3      	ldr	r3, [r4, #28]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	601a      	str	r2, [r3, #0]
 800a1b4:	1e3b      	subs	r3, r7, #0
 800a1b6:	bfbb      	ittet	lt
 800a1b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1bc:	9303      	strlt	r3, [sp, #12]
 800a1be:	2300      	movge	r3, #0
 800a1c0:	2201      	movlt	r2, #1
 800a1c2:	bfac      	ite	ge
 800a1c4:	f8c8 3000 	strge.w	r3, [r8]
 800a1c8:	f8c8 2000 	strlt.w	r2, [r8]
 800a1cc:	4b9e      	ldr	r3, [pc, #632]	; (800a448 <_dtoa_r+0x2f0>)
 800a1ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a1d2:	ea33 0308 	bics.w	r3, r3, r8
 800a1d6:	d11b      	bne.n	800a210 <_dtoa_r+0xb8>
 800a1d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a1e4:	4333      	orrs	r3, r6
 800a1e6:	f000 8593 	beq.w	800ad10 <_dtoa_r+0xbb8>
 800a1ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1ec:	b963      	cbnz	r3, 800a208 <_dtoa_r+0xb0>
 800a1ee:	4b97      	ldr	r3, [pc, #604]	; (800a44c <_dtoa_r+0x2f4>)
 800a1f0:	e027      	b.n	800a242 <_dtoa_r+0xea>
 800a1f2:	4b97      	ldr	r3, [pc, #604]	; (800a450 <_dtoa_r+0x2f8>)
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	9800      	ldr	r0, [sp, #0]
 800a1fe:	b013      	add	sp, #76	; 0x4c
 800a200:	ecbd 8b04 	vpop	{d8-d9}
 800a204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a208:	4b90      	ldr	r3, [pc, #576]	; (800a44c <_dtoa_r+0x2f4>)
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	3303      	adds	r3, #3
 800a20e:	e7f3      	b.n	800a1f8 <_dtoa_r+0xa0>
 800a210:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a214:	2200      	movs	r2, #0
 800a216:	ec51 0b17 	vmov	r0, r1, d7
 800a21a:	eeb0 8a47 	vmov.f32	s16, s14
 800a21e:	eef0 8a67 	vmov.f32	s17, s15
 800a222:	2300      	movs	r3, #0
 800a224:	f7f6 fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 800a228:	4681      	mov	r9, r0
 800a22a:	b160      	cbz	r0, 800a246 <_dtoa_r+0xee>
 800a22c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a22e:	2301      	movs	r3, #1
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 8568 	beq.w	800ad0a <_dtoa_r+0xbb2>
 800a23a:	4b86      	ldr	r3, [pc, #536]	; (800a454 <_dtoa_r+0x2fc>)
 800a23c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	3b01      	subs	r3, #1
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	e7da      	b.n	800a1fc <_dtoa_r+0xa4>
 800a246:	aa10      	add	r2, sp, #64	; 0x40
 800a248:	a911      	add	r1, sp, #68	; 0x44
 800a24a:	4620      	mov	r0, r4
 800a24c:	eeb0 0a48 	vmov.f32	s0, s16
 800a250:	eef0 0a68 	vmov.f32	s1, s17
 800a254:	f001 f994 	bl	800b580 <__d2b>
 800a258:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a25c:	4682      	mov	sl, r0
 800a25e:	2d00      	cmp	r5, #0
 800a260:	d07f      	beq.n	800a362 <_dtoa_r+0x20a>
 800a262:	ee18 3a90 	vmov	r3, s17
 800a266:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a26a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a26e:	ec51 0b18 	vmov	r0, r1, d8
 800a272:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a27a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a27e:	4619      	mov	r1, r3
 800a280:	2200      	movs	r2, #0
 800a282:	4b75      	ldr	r3, [pc, #468]	; (800a458 <_dtoa_r+0x300>)
 800a284:	f7f6 f800 	bl	8000288 <__aeabi_dsub>
 800a288:	a367      	add	r3, pc, #412	; (adr r3, 800a428 <_dtoa_r+0x2d0>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f9b3 	bl	80005f8 <__aeabi_dmul>
 800a292:	a367      	add	r3, pc, #412	; (adr r3, 800a430 <_dtoa_r+0x2d8>)
 800a294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a298:	f7f5 fff8 	bl	800028c <__adddf3>
 800a29c:	4606      	mov	r6, r0
 800a29e:	4628      	mov	r0, r5
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	f7f6 f93f 	bl	8000524 <__aeabi_i2d>
 800a2a6:	a364      	add	r3, pc, #400	; (adr r3, 800a438 <_dtoa_r+0x2e0>)
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	f7f6 f9a4 	bl	80005f8 <__aeabi_dmul>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7f5 ffe8 	bl	800028c <__adddf3>
 800a2bc:	4606      	mov	r6, r0
 800a2be:	460f      	mov	r7, r1
 800a2c0:	f7f6 fc4a 	bl	8000b58 <__aeabi_d2iz>
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	4683      	mov	fp, r0
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	f7f6 fc05 	bl	8000adc <__aeabi_dcmplt>
 800a2d2:	b148      	cbz	r0, 800a2e8 <_dtoa_r+0x190>
 800a2d4:	4658      	mov	r0, fp
 800a2d6:	f7f6 f925 	bl	8000524 <__aeabi_i2d>
 800a2da:	4632      	mov	r2, r6
 800a2dc:	463b      	mov	r3, r7
 800a2de:	f7f6 fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2e2:	b908      	cbnz	r0, 800a2e8 <_dtoa_r+0x190>
 800a2e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2e8:	f1bb 0f16 	cmp.w	fp, #22
 800a2ec:	d857      	bhi.n	800a39e <_dtoa_r+0x246>
 800a2ee:	4b5b      	ldr	r3, [pc, #364]	; (800a45c <_dtoa_r+0x304>)
 800a2f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	ec51 0b18 	vmov	r0, r1, d8
 800a2fc:	f7f6 fbee 	bl	8000adc <__aeabi_dcmplt>
 800a300:	2800      	cmp	r0, #0
 800a302:	d04e      	beq.n	800a3a2 <_dtoa_r+0x24a>
 800a304:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a308:	2300      	movs	r3, #0
 800a30a:	930c      	str	r3, [sp, #48]	; 0x30
 800a30c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a30e:	1b5b      	subs	r3, r3, r5
 800a310:	1e5a      	subs	r2, r3, #1
 800a312:	bf45      	ittet	mi
 800a314:	f1c3 0301 	rsbmi	r3, r3, #1
 800a318:	9305      	strmi	r3, [sp, #20]
 800a31a:	2300      	movpl	r3, #0
 800a31c:	2300      	movmi	r3, #0
 800a31e:	9206      	str	r2, [sp, #24]
 800a320:	bf54      	ite	pl
 800a322:	9305      	strpl	r3, [sp, #20]
 800a324:	9306      	strmi	r3, [sp, #24]
 800a326:	f1bb 0f00 	cmp.w	fp, #0
 800a32a:	db3c      	blt.n	800a3a6 <_dtoa_r+0x24e>
 800a32c:	9b06      	ldr	r3, [sp, #24]
 800a32e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a332:	445b      	add	r3, fp
 800a334:	9306      	str	r3, [sp, #24]
 800a336:	2300      	movs	r3, #0
 800a338:	9308      	str	r3, [sp, #32]
 800a33a:	9b07      	ldr	r3, [sp, #28]
 800a33c:	2b09      	cmp	r3, #9
 800a33e:	d868      	bhi.n	800a412 <_dtoa_r+0x2ba>
 800a340:	2b05      	cmp	r3, #5
 800a342:	bfc4      	itt	gt
 800a344:	3b04      	subgt	r3, #4
 800a346:	9307      	strgt	r3, [sp, #28]
 800a348:	9b07      	ldr	r3, [sp, #28]
 800a34a:	f1a3 0302 	sub.w	r3, r3, #2
 800a34e:	bfcc      	ite	gt
 800a350:	2500      	movgt	r5, #0
 800a352:	2501      	movle	r5, #1
 800a354:	2b03      	cmp	r3, #3
 800a356:	f200 8085 	bhi.w	800a464 <_dtoa_r+0x30c>
 800a35a:	e8df f003 	tbb	[pc, r3]
 800a35e:	3b2e      	.short	0x3b2e
 800a360:	5839      	.short	0x5839
 800a362:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a366:	441d      	add	r5, r3
 800a368:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	bfc1      	itttt	gt
 800a370:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a374:	fa08 f803 	lslgt.w	r8, r8, r3
 800a378:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a37c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a380:	bfd6      	itet	le
 800a382:	f1c3 0320 	rsble	r3, r3, #32
 800a386:	ea48 0003 	orrgt.w	r0, r8, r3
 800a38a:	fa06 f003 	lslle.w	r0, r6, r3
 800a38e:	f7f6 f8b9 	bl	8000504 <__aeabi_ui2d>
 800a392:	2201      	movs	r2, #1
 800a394:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a398:	3d01      	subs	r5, #1
 800a39a:	920e      	str	r2, [sp, #56]	; 0x38
 800a39c:	e76f      	b.n	800a27e <_dtoa_r+0x126>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e7b3      	b.n	800a30a <_dtoa_r+0x1b2>
 800a3a2:	900c      	str	r0, [sp, #48]	; 0x30
 800a3a4:	e7b2      	b.n	800a30c <_dtoa_r+0x1b4>
 800a3a6:	9b05      	ldr	r3, [sp, #20]
 800a3a8:	eba3 030b 	sub.w	r3, r3, fp
 800a3ac:	9305      	str	r3, [sp, #20]
 800a3ae:	f1cb 0300 	rsb	r3, fp, #0
 800a3b2:	9308      	str	r3, [sp, #32]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3b8:	e7bf      	b.n	800a33a <_dtoa_r+0x1e2>
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc52      	bgt.n	800a46a <_dtoa_r+0x312>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a3ce:	e00b      	b.n	800a3e8 <_dtoa_r+0x290>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e7f3      	b.n	800a3bc <_dtoa_r+0x264>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3da:	445b      	add	r3, fp
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	9304      	str	r3, [sp, #16]
 800a3e4:	bfb8      	it	lt
 800a3e6:	2301      	movlt	r3, #1
 800a3e8:	69e0      	ldr	r0, [r4, #28]
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	f102 0614 	add.w	r6, r2, #20
 800a3f2:	429e      	cmp	r6, r3
 800a3f4:	d93d      	bls.n	800a472 <_dtoa_r+0x31a>
 800a3f6:	6041      	str	r1, [r0, #4]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f000 fd9f 	bl	800af3c <_Balloc>
 800a3fe:	9000      	str	r0, [sp, #0]
 800a400:	2800      	cmp	r0, #0
 800a402:	d139      	bne.n	800a478 <_dtoa_r+0x320>
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <_dtoa_r+0x308>)
 800a406:	4602      	mov	r2, r0
 800a408:	f240 11af 	movw	r1, #431	; 0x1af
 800a40c:	e6bd      	b.n	800a18a <_dtoa_r+0x32>
 800a40e:	2301      	movs	r3, #1
 800a410:	e7e1      	b.n	800a3d6 <_dtoa_r+0x27e>
 800a412:	2501      	movs	r5, #1
 800a414:	2300      	movs	r3, #0
 800a416:	9307      	str	r3, [sp, #28]
 800a418:	9509      	str	r5, [sp, #36]	; 0x24
 800a41a:	f04f 33ff 	mov.w	r3, #4294967295
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	2200      	movs	r2, #0
 800a424:	2312      	movs	r3, #18
 800a426:	e7d1      	b.n	800a3cc <_dtoa_r+0x274>
 800a428:	636f4361 	.word	0x636f4361
 800a42c:	3fd287a7 	.word	0x3fd287a7
 800a430:	8b60c8b3 	.word	0x8b60c8b3
 800a434:	3fc68a28 	.word	0x3fc68a28
 800a438:	509f79fb 	.word	0x509f79fb
 800a43c:	3fd34413 	.word	0x3fd34413
 800a440:	0800c825 	.word	0x0800c825
 800a444:	0800c83c 	.word	0x0800c83c
 800a448:	7ff00000 	.word	0x7ff00000
 800a44c:	0800c821 	.word	0x0800c821
 800a450:	0800c818 	.word	0x0800c818
 800a454:	0800c7f5 	.word	0x0800c7f5
 800a458:	3ff80000 	.word	0x3ff80000
 800a45c:	0800c928 	.word	0x0800c928
 800a460:	0800c894 	.word	0x0800c894
 800a464:	2301      	movs	r3, #1
 800a466:	9309      	str	r3, [sp, #36]	; 0x24
 800a468:	e7d7      	b.n	800a41a <_dtoa_r+0x2c2>
 800a46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	e7ba      	b.n	800a3e8 <_dtoa_r+0x290>
 800a472:	3101      	adds	r1, #1
 800a474:	0052      	lsls	r2, r2, #1
 800a476:	e7ba      	b.n	800a3ee <_dtoa_r+0x296>
 800a478:	69e3      	ldr	r3, [r4, #28]
 800a47a:	9a00      	ldr	r2, [sp, #0]
 800a47c:	601a      	str	r2, [r3, #0]
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	2b0e      	cmp	r3, #14
 800a482:	f200 80a8 	bhi.w	800a5d6 <_dtoa_r+0x47e>
 800a486:	2d00      	cmp	r5, #0
 800a488:	f000 80a5 	beq.w	800a5d6 <_dtoa_r+0x47e>
 800a48c:	f1bb 0f00 	cmp.w	fp, #0
 800a490:	dd38      	ble.n	800a504 <_dtoa_r+0x3ac>
 800a492:	4bc0      	ldr	r3, [pc, #768]	; (800a794 <_dtoa_r+0x63c>)
 800a494:	f00b 020f 	and.w	r2, fp, #15
 800a498:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a49c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a4a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a4a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a4a8:	d019      	beq.n	800a4de <_dtoa_r+0x386>
 800a4aa:	4bbb      	ldr	r3, [pc, #748]	; (800a798 <_dtoa_r+0x640>)
 800a4ac:	ec51 0b18 	vmov	r0, r1, d8
 800a4b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4b4:	f7f6 f9ca 	bl	800084c <__aeabi_ddiv>
 800a4b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4bc:	f008 080f 	and.w	r8, r8, #15
 800a4c0:	2503      	movs	r5, #3
 800a4c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a798 <_dtoa_r+0x640>
 800a4c6:	f1b8 0f00 	cmp.w	r8, #0
 800a4ca:	d10a      	bne.n	800a4e2 <_dtoa_r+0x38a>
 800a4cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4d0:	4632      	mov	r2, r6
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	f7f6 f9ba 	bl	800084c <__aeabi_ddiv>
 800a4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4dc:	e02b      	b.n	800a536 <_dtoa_r+0x3de>
 800a4de:	2502      	movs	r5, #2
 800a4e0:	e7ef      	b.n	800a4c2 <_dtoa_r+0x36a>
 800a4e2:	f018 0f01 	tst.w	r8, #1
 800a4e6:	d008      	beq.n	800a4fa <_dtoa_r+0x3a2>
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	4639      	mov	r1, r7
 800a4ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a4f0:	f7f6 f882 	bl	80005f8 <__aeabi_dmul>
 800a4f4:	3501      	adds	r5, #1
 800a4f6:	4606      	mov	r6, r0
 800a4f8:	460f      	mov	r7, r1
 800a4fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a4fe:	f109 0908 	add.w	r9, r9, #8
 800a502:	e7e0      	b.n	800a4c6 <_dtoa_r+0x36e>
 800a504:	f000 809f 	beq.w	800a646 <_dtoa_r+0x4ee>
 800a508:	f1cb 0600 	rsb	r6, fp, #0
 800a50c:	4ba1      	ldr	r3, [pc, #644]	; (800a794 <_dtoa_r+0x63c>)
 800a50e:	4fa2      	ldr	r7, [pc, #648]	; (800a798 <_dtoa_r+0x640>)
 800a510:	f006 020f 	and.w	r2, r6, #15
 800a514:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	ec51 0b18 	vmov	r0, r1, d8
 800a520:	f7f6 f86a 	bl	80005f8 <__aeabi_dmul>
 800a524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a528:	1136      	asrs	r6, r6, #4
 800a52a:	2300      	movs	r3, #0
 800a52c:	2502      	movs	r5, #2
 800a52e:	2e00      	cmp	r6, #0
 800a530:	d17e      	bne.n	800a630 <_dtoa_r+0x4d8>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1d0      	bne.n	800a4d8 <_dtoa_r+0x380>
 800a536:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a538:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 8084 	beq.w	800a64a <_dtoa_r+0x4f2>
 800a542:	4b96      	ldr	r3, [pc, #600]	; (800a79c <_dtoa_r+0x644>)
 800a544:	2200      	movs	r2, #0
 800a546:	4640      	mov	r0, r8
 800a548:	4649      	mov	r1, r9
 800a54a:	f7f6 fac7 	bl	8000adc <__aeabi_dcmplt>
 800a54e:	2800      	cmp	r0, #0
 800a550:	d07b      	beq.n	800a64a <_dtoa_r+0x4f2>
 800a552:	9b04      	ldr	r3, [sp, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d078      	beq.n	800a64a <_dtoa_r+0x4f2>
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	dd39      	ble.n	800a5d2 <_dtoa_r+0x47a>
 800a55e:	4b90      	ldr	r3, [pc, #576]	; (800a7a0 <_dtoa_r+0x648>)
 800a560:	2200      	movs	r2, #0
 800a562:	4640      	mov	r0, r8
 800a564:	4649      	mov	r1, r9
 800a566:	f7f6 f847 	bl	80005f8 <__aeabi_dmul>
 800a56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a56e:	9e01      	ldr	r6, [sp, #4]
 800a570:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a574:	3501      	adds	r5, #1
 800a576:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a57a:	4628      	mov	r0, r5
 800a57c:	f7f5 ffd2 	bl	8000524 <__aeabi_i2d>
 800a580:	4642      	mov	r2, r8
 800a582:	464b      	mov	r3, r9
 800a584:	f7f6 f838 	bl	80005f8 <__aeabi_dmul>
 800a588:	4b86      	ldr	r3, [pc, #536]	; (800a7a4 <_dtoa_r+0x64c>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f5 fe7e 	bl	800028c <__adddf3>
 800a590:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	2e00      	cmp	r6, #0
 800a59c:	d158      	bne.n	800a650 <_dtoa_r+0x4f8>
 800a59e:	4b82      	ldr	r3, [pc, #520]	; (800a7a8 <_dtoa_r+0x650>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4640      	mov	r0, r8
 800a5a4:	4649      	mov	r1, r9
 800a5a6:	f7f5 fe6f 	bl	8000288 <__aeabi_dsub>
 800a5aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4689      	mov	r9, r1
 800a5b2:	f7f6 fab1 	bl	8000b18 <__aeabi_dcmpgt>
 800a5b6:	2800      	cmp	r0, #0
 800a5b8:	f040 8296 	bne.w	800aae8 <_dtoa_r+0x990>
 800a5bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	f7f6 fa88 	bl	8000adc <__aeabi_dcmplt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f040 8289 	bne.w	800aae4 <_dtoa_r+0x98c>
 800a5d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a5d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f2c0 814e 	blt.w	800a87a <_dtoa_r+0x722>
 800a5de:	f1bb 0f0e 	cmp.w	fp, #14
 800a5e2:	f300 814a 	bgt.w	800a87a <_dtoa_r+0x722>
 800a5e6:	4b6b      	ldr	r3, [pc, #428]	; (800a794 <_dtoa_r+0x63c>)
 800a5e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f280 80dc 	bge.w	800a7b0 <_dtoa_r+0x658>
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f300 80d8 	bgt.w	800a7b0 <_dtoa_r+0x658>
 800a600:	f040 826f 	bne.w	800aae2 <_dtoa_r+0x98a>
 800a604:	4b68      	ldr	r3, [pc, #416]	; (800a7a8 <_dtoa_r+0x650>)
 800a606:	2200      	movs	r2, #0
 800a608:	4640      	mov	r0, r8
 800a60a:	4649      	mov	r1, r9
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a614:	f7f6 fa76 	bl	8000b04 <__aeabi_dcmpge>
 800a618:	9e04      	ldr	r6, [sp, #16]
 800a61a:	4637      	mov	r7, r6
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f040 8245 	bne.w	800aaac <_dtoa_r+0x954>
 800a622:	9d00      	ldr	r5, [sp, #0]
 800a624:	2331      	movs	r3, #49	; 0x31
 800a626:	f805 3b01 	strb.w	r3, [r5], #1
 800a62a:	f10b 0b01 	add.w	fp, fp, #1
 800a62e:	e241      	b.n	800aab4 <_dtoa_r+0x95c>
 800a630:	07f2      	lsls	r2, r6, #31
 800a632:	d505      	bpl.n	800a640 <_dtoa_r+0x4e8>
 800a634:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a638:	f7f5 ffde 	bl	80005f8 <__aeabi_dmul>
 800a63c:	3501      	adds	r5, #1
 800a63e:	2301      	movs	r3, #1
 800a640:	1076      	asrs	r6, r6, #1
 800a642:	3708      	adds	r7, #8
 800a644:	e773      	b.n	800a52e <_dtoa_r+0x3d6>
 800a646:	2502      	movs	r5, #2
 800a648:	e775      	b.n	800a536 <_dtoa_r+0x3de>
 800a64a:	9e04      	ldr	r6, [sp, #16]
 800a64c:	465f      	mov	r7, fp
 800a64e:	e792      	b.n	800a576 <_dtoa_r+0x41e>
 800a650:	9900      	ldr	r1, [sp, #0]
 800a652:	4b50      	ldr	r3, [pc, #320]	; (800a794 <_dtoa_r+0x63c>)
 800a654:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a658:	4431      	add	r1, r6
 800a65a:	9102      	str	r1, [sp, #8]
 800a65c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a65e:	eeb0 9a47 	vmov.f32	s18, s14
 800a662:	eef0 9a67 	vmov.f32	s19, s15
 800a666:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a66a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a66e:	2900      	cmp	r1, #0
 800a670:	d044      	beq.n	800a6fc <_dtoa_r+0x5a4>
 800a672:	494e      	ldr	r1, [pc, #312]	; (800a7ac <_dtoa_r+0x654>)
 800a674:	2000      	movs	r0, #0
 800a676:	f7f6 f8e9 	bl	800084c <__aeabi_ddiv>
 800a67a:	ec53 2b19 	vmov	r2, r3, d9
 800a67e:	f7f5 fe03 	bl	8000288 <__aeabi_dsub>
 800a682:	9d00      	ldr	r5, [sp, #0]
 800a684:	ec41 0b19 	vmov	d9, r0, r1
 800a688:	4649      	mov	r1, r9
 800a68a:	4640      	mov	r0, r8
 800a68c:	f7f6 fa64 	bl	8000b58 <__aeabi_d2iz>
 800a690:	4606      	mov	r6, r0
 800a692:	f7f5 ff47 	bl	8000524 <__aeabi_i2d>
 800a696:	4602      	mov	r2, r0
 800a698:	460b      	mov	r3, r1
 800a69a:	4640      	mov	r0, r8
 800a69c:	4649      	mov	r1, r9
 800a69e:	f7f5 fdf3 	bl	8000288 <__aeabi_dsub>
 800a6a2:	3630      	adds	r6, #48	; 0x30
 800a6a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a6a8:	ec53 2b19 	vmov	r2, r3, d9
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	4689      	mov	r9, r1
 800a6b0:	f7f6 fa14 	bl	8000adc <__aeabi_dcmplt>
 800a6b4:	2800      	cmp	r0, #0
 800a6b6:	d164      	bne.n	800a782 <_dtoa_r+0x62a>
 800a6b8:	4642      	mov	r2, r8
 800a6ba:	464b      	mov	r3, r9
 800a6bc:	4937      	ldr	r1, [pc, #220]	; (800a79c <_dtoa_r+0x644>)
 800a6be:	2000      	movs	r0, #0
 800a6c0:	f7f5 fde2 	bl	8000288 <__aeabi_dsub>
 800a6c4:	ec53 2b19 	vmov	r2, r3, d9
 800a6c8:	f7f6 fa08 	bl	8000adc <__aeabi_dcmplt>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	f040 80b6 	bne.w	800a83e <_dtoa_r+0x6e6>
 800a6d2:	9b02      	ldr	r3, [sp, #8]
 800a6d4:	429d      	cmp	r5, r3
 800a6d6:	f43f af7c 	beq.w	800a5d2 <_dtoa_r+0x47a>
 800a6da:	4b31      	ldr	r3, [pc, #196]	; (800a7a0 <_dtoa_r+0x648>)
 800a6dc:	ec51 0b19 	vmov	r0, r1, d9
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f7f5 ff89 	bl	80005f8 <__aeabi_dmul>
 800a6e6:	4b2e      	ldr	r3, [pc, #184]	; (800a7a0 <_dtoa_r+0x648>)
 800a6e8:	ec41 0b19 	vmov	d9, r0, r1
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4640      	mov	r0, r8
 800a6f0:	4649      	mov	r1, r9
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4689      	mov	r9, r1
 800a6fa:	e7c5      	b.n	800a688 <_dtoa_r+0x530>
 800a6fc:	ec51 0b17 	vmov	r0, r1, d7
 800a700:	f7f5 ff7a 	bl	80005f8 <__aeabi_dmul>
 800a704:	9b02      	ldr	r3, [sp, #8]
 800a706:	9d00      	ldr	r5, [sp, #0]
 800a708:	930f      	str	r3, [sp, #60]	; 0x3c
 800a70a:	ec41 0b19 	vmov	d9, r0, r1
 800a70e:	4649      	mov	r1, r9
 800a710:	4640      	mov	r0, r8
 800a712:	f7f6 fa21 	bl	8000b58 <__aeabi_d2iz>
 800a716:	4606      	mov	r6, r0
 800a718:	f7f5 ff04 	bl	8000524 <__aeabi_i2d>
 800a71c:	3630      	adds	r6, #48	; 0x30
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 fdaf 	bl	8000288 <__aeabi_dsub>
 800a72a:	f805 6b01 	strb.w	r6, [r5], #1
 800a72e:	9b02      	ldr	r3, [sp, #8]
 800a730:	429d      	cmp	r5, r3
 800a732:	4680      	mov	r8, r0
 800a734:	4689      	mov	r9, r1
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	d124      	bne.n	800a786 <_dtoa_r+0x62e>
 800a73c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ac <_dtoa_r+0x654>)
 800a73e:	ec51 0b19 	vmov	r0, r1, d9
 800a742:	f7f5 fda3 	bl	800028c <__adddf3>
 800a746:	4602      	mov	r2, r0
 800a748:	460b      	mov	r3, r1
 800a74a:	4640      	mov	r0, r8
 800a74c:	4649      	mov	r1, r9
 800a74e:	f7f6 f9e3 	bl	8000b18 <__aeabi_dcmpgt>
 800a752:	2800      	cmp	r0, #0
 800a754:	d173      	bne.n	800a83e <_dtoa_r+0x6e6>
 800a756:	ec53 2b19 	vmov	r2, r3, d9
 800a75a:	4914      	ldr	r1, [pc, #80]	; (800a7ac <_dtoa_r+0x654>)
 800a75c:	2000      	movs	r0, #0
 800a75e:	f7f5 fd93 	bl	8000288 <__aeabi_dsub>
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	4640      	mov	r0, r8
 800a768:	4649      	mov	r1, r9
 800a76a:	f7f6 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800a76e:	2800      	cmp	r0, #0
 800a770:	f43f af2f 	beq.w	800a5d2 <_dtoa_r+0x47a>
 800a774:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a776:	1e6b      	subs	r3, r5, #1
 800a778:	930f      	str	r3, [sp, #60]	; 0x3c
 800a77a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a77e:	2b30      	cmp	r3, #48	; 0x30
 800a780:	d0f8      	beq.n	800a774 <_dtoa_r+0x61c>
 800a782:	46bb      	mov	fp, r7
 800a784:	e04a      	b.n	800a81c <_dtoa_r+0x6c4>
 800a786:	4b06      	ldr	r3, [pc, #24]	; (800a7a0 <_dtoa_r+0x648>)
 800a788:	f7f5 ff36 	bl	80005f8 <__aeabi_dmul>
 800a78c:	4680      	mov	r8, r0
 800a78e:	4689      	mov	r9, r1
 800a790:	e7bd      	b.n	800a70e <_dtoa_r+0x5b6>
 800a792:	bf00      	nop
 800a794:	0800c928 	.word	0x0800c928
 800a798:	0800c900 	.word	0x0800c900
 800a79c:	3ff00000 	.word	0x3ff00000
 800a7a0:	40240000 	.word	0x40240000
 800a7a4:	401c0000 	.word	0x401c0000
 800a7a8:	40140000 	.word	0x40140000
 800a7ac:	3fe00000 	.word	0x3fe00000
 800a7b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7b4:	9d00      	ldr	r5, [sp, #0]
 800a7b6:	4642      	mov	r2, r8
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f6 f845 	bl	800084c <__aeabi_ddiv>
 800a7c2:	f7f6 f9c9 	bl	8000b58 <__aeabi_d2iz>
 800a7c6:	9001      	str	r0, [sp, #4]
 800a7c8:	f7f5 feac 	bl	8000524 <__aeabi_i2d>
 800a7cc:	4642      	mov	r2, r8
 800a7ce:	464b      	mov	r3, r9
 800a7d0:	f7f5 ff12 	bl	80005f8 <__aeabi_dmul>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f5 fd54 	bl	8000288 <__aeabi_dsub>
 800a7e0:	9e01      	ldr	r6, [sp, #4]
 800a7e2:	9f04      	ldr	r7, [sp, #16]
 800a7e4:	3630      	adds	r6, #48	; 0x30
 800a7e6:	f805 6b01 	strb.w	r6, [r5], #1
 800a7ea:	9e00      	ldr	r6, [sp, #0]
 800a7ec:	1bae      	subs	r6, r5, r6
 800a7ee:	42b7      	cmp	r7, r6
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	d134      	bne.n	800a860 <_dtoa_r+0x708>
 800a7f6:	f7f5 fd49 	bl	800028c <__adddf3>
 800a7fa:	4642      	mov	r2, r8
 800a7fc:	464b      	mov	r3, r9
 800a7fe:	4606      	mov	r6, r0
 800a800:	460f      	mov	r7, r1
 800a802:	f7f6 f989 	bl	8000b18 <__aeabi_dcmpgt>
 800a806:	b9c8      	cbnz	r0, 800a83c <_dtoa_r+0x6e4>
 800a808:	4642      	mov	r2, r8
 800a80a:	464b      	mov	r3, r9
 800a80c:	4630      	mov	r0, r6
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f6 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a814:	b110      	cbz	r0, 800a81c <_dtoa_r+0x6c4>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	07db      	lsls	r3, r3, #31
 800a81a:	d40f      	bmi.n	800a83c <_dtoa_r+0x6e4>
 800a81c:	4651      	mov	r1, sl
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fbcc 	bl	800afbc <_Bfree>
 800a824:	2300      	movs	r3, #0
 800a826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a828:	702b      	strb	r3, [r5, #0]
 800a82a:	f10b 0301 	add.w	r3, fp, #1
 800a82e:	6013      	str	r3, [r2, #0]
 800a830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a832:	2b00      	cmp	r3, #0
 800a834:	f43f ace2 	beq.w	800a1fc <_dtoa_r+0xa4>
 800a838:	601d      	str	r5, [r3, #0]
 800a83a:	e4df      	b.n	800a1fc <_dtoa_r+0xa4>
 800a83c:	465f      	mov	r7, fp
 800a83e:	462b      	mov	r3, r5
 800a840:	461d      	mov	r5, r3
 800a842:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a846:	2a39      	cmp	r2, #57	; 0x39
 800a848:	d106      	bne.n	800a858 <_dtoa_r+0x700>
 800a84a:	9a00      	ldr	r2, [sp, #0]
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d1f7      	bne.n	800a840 <_dtoa_r+0x6e8>
 800a850:	9900      	ldr	r1, [sp, #0]
 800a852:	2230      	movs	r2, #48	; 0x30
 800a854:	3701      	adds	r7, #1
 800a856:	700a      	strb	r2, [r1, #0]
 800a858:	781a      	ldrb	r2, [r3, #0]
 800a85a:	3201      	adds	r2, #1
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	e790      	b.n	800a782 <_dtoa_r+0x62a>
 800a860:	4ba3      	ldr	r3, [pc, #652]	; (800aaf0 <_dtoa_r+0x998>)
 800a862:	2200      	movs	r2, #0
 800a864:	f7f5 fec8 	bl	80005f8 <__aeabi_dmul>
 800a868:	2200      	movs	r2, #0
 800a86a:	2300      	movs	r3, #0
 800a86c:	4606      	mov	r6, r0
 800a86e:	460f      	mov	r7, r1
 800a870:	f7f6 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a874:	2800      	cmp	r0, #0
 800a876:	d09e      	beq.n	800a7b6 <_dtoa_r+0x65e>
 800a878:	e7d0      	b.n	800a81c <_dtoa_r+0x6c4>
 800a87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a87c:	2a00      	cmp	r2, #0
 800a87e:	f000 80ca 	beq.w	800aa16 <_dtoa_r+0x8be>
 800a882:	9a07      	ldr	r2, [sp, #28]
 800a884:	2a01      	cmp	r2, #1
 800a886:	f300 80ad 	bgt.w	800a9e4 <_dtoa_r+0x88c>
 800a88a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	f000 80a5 	beq.w	800a9dc <_dtoa_r+0x884>
 800a892:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a896:	9e08      	ldr	r6, [sp, #32]
 800a898:	9d05      	ldr	r5, [sp, #20]
 800a89a:	9a05      	ldr	r2, [sp, #20]
 800a89c:	441a      	add	r2, r3
 800a89e:	9205      	str	r2, [sp, #20]
 800a8a0:	9a06      	ldr	r2, [sp, #24]
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	441a      	add	r2, r3
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	9206      	str	r2, [sp, #24]
 800a8aa:	f000 fc3d 	bl	800b128 <__i2b>
 800a8ae:	4607      	mov	r7, r0
 800a8b0:	b165      	cbz	r5, 800a8cc <_dtoa_r+0x774>
 800a8b2:	9b06      	ldr	r3, [sp, #24]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dd09      	ble.n	800a8cc <_dtoa_r+0x774>
 800a8b8:	42ab      	cmp	r3, r5
 800a8ba:	9a05      	ldr	r2, [sp, #20]
 800a8bc:	bfa8      	it	ge
 800a8be:	462b      	movge	r3, r5
 800a8c0:	1ad2      	subs	r2, r2, r3
 800a8c2:	9205      	str	r2, [sp, #20]
 800a8c4:	9a06      	ldr	r2, [sp, #24]
 800a8c6:	1aed      	subs	r5, r5, r3
 800a8c8:	1ad3      	subs	r3, r2, r3
 800a8ca:	9306      	str	r3, [sp, #24]
 800a8cc:	9b08      	ldr	r3, [sp, #32]
 800a8ce:	b1f3      	cbz	r3, 800a90e <_dtoa_r+0x7b6>
 800a8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 80a3 	beq.w	800aa1e <_dtoa_r+0x8c6>
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	dd10      	ble.n	800a8fe <_dtoa_r+0x7a6>
 800a8dc:	4639      	mov	r1, r7
 800a8de:	4632      	mov	r2, r6
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f000 fce1 	bl	800b2a8 <__pow5mult>
 800a8e6:	4652      	mov	r2, sl
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	4607      	mov	r7, r0
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 fc31 	bl	800b154 <__multiply>
 800a8f2:	4651      	mov	r1, sl
 800a8f4:	4680      	mov	r8, r0
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fb60 	bl	800afbc <_Bfree>
 800a8fc:	46c2      	mov	sl, r8
 800a8fe:	9b08      	ldr	r3, [sp, #32]
 800a900:	1b9a      	subs	r2, r3, r6
 800a902:	d004      	beq.n	800a90e <_dtoa_r+0x7b6>
 800a904:	4651      	mov	r1, sl
 800a906:	4620      	mov	r0, r4
 800a908:	f000 fcce 	bl	800b2a8 <__pow5mult>
 800a90c:	4682      	mov	sl, r0
 800a90e:	2101      	movs	r1, #1
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fc09 	bl	800b128 <__i2b>
 800a916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a918:	2b00      	cmp	r3, #0
 800a91a:	4606      	mov	r6, r0
 800a91c:	f340 8081 	ble.w	800aa22 <_dtoa_r+0x8ca>
 800a920:	461a      	mov	r2, r3
 800a922:	4601      	mov	r1, r0
 800a924:	4620      	mov	r0, r4
 800a926:	f000 fcbf 	bl	800b2a8 <__pow5mult>
 800a92a:	9b07      	ldr	r3, [sp, #28]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	4606      	mov	r6, r0
 800a930:	dd7a      	ble.n	800aa28 <_dtoa_r+0x8d0>
 800a932:	f04f 0800 	mov.w	r8, #0
 800a936:	6933      	ldr	r3, [r6, #16]
 800a938:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a93c:	6918      	ldr	r0, [r3, #16]
 800a93e:	f000 fba5 	bl	800b08c <__hi0bits>
 800a942:	f1c0 0020 	rsb	r0, r0, #32
 800a946:	9b06      	ldr	r3, [sp, #24]
 800a948:	4418      	add	r0, r3
 800a94a:	f010 001f 	ands.w	r0, r0, #31
 800a94e:	f000 8094 	beq.w	800aa7a <_dtoa_r+0x922>
 800a952:	f1c0 0320 	rsb	r3, r0, #32
 800a956:	2b04      	cmp	r3, #4
 800a958:	f340 8085 	ble.w	800aa66 <_dtoa_r+0x90e>
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	f1c0 001c 	rsb	r0, r0, #28
 800a962:	4403      	add	r3, r0
 800a964:	9305      	str	r3, [sp, #20]
 800a966:	9b06      	ldr	r3, [sp, #24]
 800a968:	4403      	add	r3, r0
 800a96a:	4405      	add	r5, r0
 800a96c:	9306      	str	r3, [sp, #24]
 800a96e:	9b05      	ldr	r3, [sp, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	dd05      	ble.n	800a980 <_dtoa_r+0x828>
 800a974:	4651      	mov	r1, sl
 800a976:	461a      	mov	r2, r3
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fcef 	bl	800b35c <__lshift>
 800a97e:	4682      	mov	sl, r0
 800a980:	9b06      	ldr	r3, [sp, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	dd05      	ble.n	800a992 <_dtoa_r+0x83a>
 800a986:	4631      	mov	r1, r6
 800a988:	461a      	mov	r2, r3
 800a98a:	4620      	mov	r0, r4
 800a98c:	f000 fce6 	bl	800b35c <__lshift>
 800a990:	4606      	mov	r6, r0
 800a992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a994:	2b00      	cmp	r3, #0
 800a996:	d072      	beq.n	800aa7e <_dtoa_r+0x926>
 800a998:	4631      	mov	r1, r6
 800a99a:	4650      	mov	r0, sl
 800a99c:	f000 fd4a 	bl	800b434 <__mcmp>
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	da6c      	bge.n	800aa7e <_dtoa_r+0x926>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4651      	mov	r1, sl
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 fb28 	bl	800b000 <__multadd>
 800a9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9b6:	4682      	mov	sl, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 81b0 	beq.w	800ad1e <_dtoa_r+0xbc6>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	4639      	mov	r1, r7
 800a9c2:	220a      	movs	r2, #10
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	f000 fb1b 	bl	800b000 <__multadd>
 800a9ca:	9b01      	ldr	r3, [sp, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	4607      	mov	r7, r0
 800a9d0:	f300 8096 	bgt.w	800ab00 <_dtoa_r+0x9a8>
 800a9d4:	9b07      	ldr	r3, [sp, #28]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	dc59      	bgt.n	800aa8e <_dtoa_r+0x936>
 800a9da:	e091      	b.n	800ab00 <_dtoa_r+0x9a8>
 800a9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9e2:	e758      	b.n	800a896 <_dtoa_r+0x73e>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	1e5e      	subs	r6, r3, #1
 800a9e8:	9b08      	ldr	r3, [sp, #32]
 800a9ea:	42b3      	cmp	r3, r6
 800a9ec:	bfbf      	itttt	lt
 800a9ee:	9b08      	ldrlt	r3, [sp, #32]
 800a9f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a9f2:	9608      	strlt	r6, [sp, #32]
 800a9f4:	1af3      	sublt	r3, r6, r3
 800a9f6:	bfb4      	ite	lt
 800a9f8:	18d2      	addlt	r2, r2, r3
 800a9fa:	1b9e      	subge	r6, r3, r6
 800a9fc:	9b04      	ldr	r3, [sp, #16]
 800a9fe:	bfbc      	itt	lt
 800aa00:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800aa02:	2600      	movlt	r6, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfb7      	itett	lt
 800aa08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aa0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aa10:	1a9d      	sublt	r5, r3, r2
 800aa12:	2300      	movlt	r3, #0
 800aa14:	e741      	b.n	800a89a <_dtoa_r+0x742>
 800aa16:	9e08      	ldr	r6, [sp, #32]
 800aa18:	9d05      	ldr	r5, [sp, #20]
 800aa1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aa1c:	e748      	b.n	800a8b0 <_dtoa_r+0x758>
 800aa1e:	9a08      	ldr	r2, [sp, #32]
 800aa20:	e770      	b.n	800a904 <_dtoa_r+0x7ac>
 800aa22:	9b07      	ldr	r3, [sp, #28]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	dc19      	bgt.n	800aa5c <_dtoa_r+0x904>
 800aa28:	9b02      	ldr	r3, [sp, #8]
 800aa2a:	b9bb      	cbnz	r3, 800aa5c <_dtoa_r+0x904>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa32:	b99b      	cbnz	r3, 800aa5c <_dtoa_r+0x904>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa3a:	0d1b      	lsrs	r3, r3, #20
 800aa3c:	051b      	lsls	r3, r3, #20
 800aa3e:	b183      	cbz	r3, 800aa62 <_dtoa_r+0x90a>
 800aa40:	9b05      	ldr	r3, [sp, #20]
 800aa42:	3301      	adds	r3, #1
 800aa44:	9305      	str	r3, [sp, #20]
 800aa46:	9b06      	ldr	r3, [sp, #24]
 800aa48:	3301      	adds	r3, #1
 800aa4a:	9306      	str	r3, [sp, #24]
 800aa4c:	f04f 0801 	mov.w	r8, #1
 800aa50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f47f af6f 	bne.w	800a936 <_dtoa_r+0x7de>
 800aa58:	2001      	movs	r0, #1
 800aa5a:	e774      	b.n	800a946 <_dtoa_r+0x7ee>
 800aa5c:	f04f 0800 	mov.w	r8, #0
 800aa60:	e7f6      	b.n	800aa50 <_dtoa_r+0x8f8>
 800aa62:	4698      	mov	r8, r3
 800aa64:	e7f4      	b.n	800aa50 <_dtoa_r+0x8f8>
 800aa66:	d082      	beq.n	800a96e <_dtoa_r+0x816>
 800aa68:	9a05      	ldr	r2, [sp, #20]
 800aa6a:	331c      	adds	r3, #28
 800aa6c:	441a      	add	r2, r3
 800aa6e:	9205      	str	r2, [sp, #20]
 800aa70:	9a06      	ldr	r2, [sp, #24]
 800aa72:	441a      	add	r2, r3
 800aa74:	441d      	add	r5, r3
 800aa76:	9206      	str	r2, [sp, #24]
 800aa78:	e779      	b.n	800a96e <_dtoa_r+0x816>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	e7f4      	b.n	800aa68 <_dtoa_r+0x910>
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dc37      	bgt.n	800aaf4 <_dtoa_r+0x99c>
 800aa84:	9b07      	ldr	r3, [sp, #28]
 800aa86:	2b02      	cmp	r3, #2
 800aa88:	dd34      	ble.n	800aaf4 <_dtoa_r+0x99c>
 800aa8a:	9b04      	ldr	r3, [sp, #16]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	b963      	cbnz	r3, 800aaac <_dtoa_r+0x954>
 800aa92:	4631      	mov	r1, r6
 800aa94:	2205      	movs	r2, #5
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 fab2 	bl	800b000 <__multadd>
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	f000 fcc7 	bl	800b434 <__mcmp>
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f73f adbb 	bgt.w	800a622 <_dtoa_r+0x4ca>
 800aaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaae:	9d00      	ldr	r5, [sp, #0]
 800aab0:	ea6f 0b03 	mvn.w	fp, r3
 800aab4:	f04f 0800 	mov.w	r8, #0
 800aab8:	4631      	mov	r1, r6
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fa7e 	bl	800afbc <_Bfree>
 800aac0:	2f00      	cmp	r7, #0
 800aac2:	f43f aeab 	beq.w	800a81c <_dtoa_r+0x6c4>
 800aac6:	f1b8 0f00 	cmp.w	r8, #0
 800aaca:	d005      	beq.n	800aad8 <_dtoa_r+0x980>
 800aacc:	45b8      	cmp	r8, r7
 800aace:	d003      	beq.n	800aad8 <_dtoa_r+0x980>
 800aad0:	4641      	mov	r1, r8
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fa72 	bl	800afbc <_Bfree>
 800aad8:	4639      	mov	r1, r7
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fa6e 	bl	800afbc <_Bfree>
 800aae0:	e69c      	b.n	800a81c <_dtoa_r+0x6c4>
 800aae2:	2600      	movs	r6, #0
 800aae4:	4637      	mov	r7, r6
 800aae6:	e7e1      	b.n	800aaac <_dtoa_r+0x954>
 800aae8:	46bb      	mov	fp, r7
 800aaea:	4637      	mov	r7, r6
 800aaec:	e599      	b.n	800a622 <_dtoa_r+0x4ca>
 800aaee:	bf00      	nop
 800aaf0:	40240000 	.word	0x40240000
 800aaf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 80c8 	beq.w	800ac8c <_dtoa_r+0xb34>
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	dd05      	ble.n	800ab10 <_dtoa_r+0x9b8>
 800ab04:	4639      	mov	r1, r7
 800ab06:	462a      	mov	r2, r5
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fc27 	bl	800b35c <__lshift>
 800ab0e:	4607      	mov	r7, r0
 800ab10:	f1b8 0f00 	cmp.w	r8, #0
 800ab14:	d05b      	beq.n	800abce <_dtoa_r+0xa76>
 800ab16:	6879      	ldr	r1, [r7, #4]
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fa0f 	bl	800af3c <_Balloc>
 800ab1e:	4605      	mov	r5, r0
 800ab20:	b928      	cbnz	r0, 800ab2e <_dtoa_r+0x9d6>
 800ab22:	4b83      	ldr	r3, [pc, #524]	; (800ad30 <_dtoa_r+0xbd8>)
 800ab24:	4602      	mov	r2, r0
 800ab26:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab2a:	f7ff bb2e 	b.w	800a18a <_dtoa_r+0x32>
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	3202      	adds	r2, #2
 800ab32:	0092      	lsls	r2, r2, #2
 800ab34:	f107 010c 	add.w	r1, r7, #12
 800ab38:	300c      	adds	r0, #12
 800ab3a:	f000 ffab 	bl	800ba94 <memcpy>
 800ab3e:	2201      	movs	r2, #1
 800ab40:	4629      	mov	r1, r5
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 fc0a 	bl	800b35c <__lshift>
 800ab48:	9b00      	ldr	r3, [sp, #0]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab52:	4413      	add	r3, r2
 800ab54:	9308      	str	r3, [sp, #32]
 800ab56:	9b02      	ldr	r3, [sp, #8]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	46b8      	mov	r8, r7
 800ab5e:	9306      	str	r3, [sp, #24]
 800ab60:	4607      	mov	r7, r0
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	4631      	mov	r1, r6
 800ab66:	3b01      	subs	r3, #1
 800ab68:	4650      	mov	r0, sl
 800ab6a:	9301      	str	r3, [sp, #4]
 800ab6c:	f7ff fa6b 	bl	800a046 <quorem>
 800ab70:	4641      	mov	r1, r8
 800ab72:	9002      	str	r0, [sp, #8]
 800ab74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab78:	4650      	mov	r0, sl
 800ab7a:	f000 fc5b 	bl	800b434 <__mcmp>
 800ab7e:	463a      	mov	r2, r7
 800ab80:	9005      	str	r0, [sp, #20]
 800ab82:	4631      	mov	r1, r6
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fc71 	bl	800b46c <__mdiff>
 800ab8a:	68c2      	ldr	r2, [r0, #12]
 800ab8c:	4605      	mov	r5, r0
 800ab8e:	bb02      	cbnz	r2, 800abd2 <_dtoa_r+0xa7a>
 800ab90:	4601      	mov	r1, r0
 800ab92:	4650      	mov	r0, sl
 800ab94:	f000 fc4e 	bl	800b434 <__mcmp>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	4629      	mov	r1, r5
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	9209      	str	r2, [sp, #36]	; 0x24
 800aba0:	f000 fa0c 	bl	800afbc <_Bfree>
 800aba4:	9b07      	ldr	r3, [sp, #28]
 800aba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aba8:	9d04      	ldr	r5, [sp, #16]
 800abaa:	ea43 0102 	orr.w	r1, r3, r2
 800abae:	9b06      	ldr	r3, [sp, #24]
 800abb0:	4319      	orrs	r1, r3
 800abb2:	d110      	bne.n	800abd6 <_dtoa_r+0xa7e>
 800abb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abb8:	d029      	beq.n	800ac0e <_dtoa_r+0xab6>
 800abba:	9b05      	ldr	r3, [sp, #20]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dd02      	ble.n	800abc6 <_dtoa_r+0xa6e>
 800abc0:	9b02      	ldr	r3, [sp, #8]
 800abc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	f883 9000 	strb.w	r9, [r3]
 800abcc:	e774      	b.n	800aab8 <_dtoa_r+0x960>
 800abce:	4638      	mov	r0, r7
 800abd0:	e7ba      	b.n	800ab48 <_dtoa_r+0x9f0>
 800abd2:	2201      	movs	r2, #1
 800abd4:	e7e1      	b.n	800ab9a <_dtoa_r+0xa42>
 800abd6:	9b05      	ldr	r3, [sp, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	db04      	blt.n	800abe6 <_dtoa_r+0xa8e>
 800abdc:	9907      	ldr	r1, [sp, #28]
 800abde:	430b      	orrs	r3, r1
 800abe0:	9906      	ldr	r1, [sp, #24]
 800abe2:	430b      	orrs	r3, r1
 800abe4:	d120      	bne.n	800ac28 <_dtoa_r+0xad0>
 800abe6:	2a00      	cmp	r2, #0
 800abe8:	dded      	ble.n	800abc6 <_dtoa_r+0xa6e>
 800abea:	4651      	mov	r1, sl
 800abec:	2201      	movs	r2, #1
 800abee:	4620      	mov	r0, r4
 800abf0:	f000 fbb4 	bl	800b35c <__lshift>
 800abf4:	4631      	mov	r1, r6
 800abf6:	4682      	mov	sl, r0
 800abf8:	f000 fc1c 	bl	800b434 <__mcmp>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	dc03      	bgt.n	800ac08 <_dtoa_r+0xab0>
 800ac00:	d1e1      	bne.n	800abc6 <_dtoa_r+0xa6e>
 800ac02:	f019 0f01 	tst.w	r9, #1
 800ac06:	d0de      	beq.n	800abc6 <_dtoa_r+0xa6e>
 800ac08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac0c:	d1d8      	bne.n	800abc0 <_dtoa_r+0xa68>
 800ac0e:	9a01      	ldr	r2, [sp, #4]
 800ac10:	2339      	movs	r3, #57	; 0x39
 800ac12:	7013      	strb	r3, [r2, #0]
 800ac14:	462b      	mov	r3, r5
 800ac16:	461d      	mov	r5, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ac1e:	2a39      	cmp	r2, #57	; 0x39
 800ac20:	d06c      	beq.n	800acfc <_dtoa_r+0xba4>
 800ac22:	3201      	adds	r2, #1
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e747      	b.n	800aab8 <_dtoa_r+0x960>
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	dd07      	ble.n	800ac3c <_dtoa_r+0xae4>
 800ac2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac30:	d0ed      	beq.n	800ac0e <_dtoa_r+0xab6>
 800ac32:	9a01      	ldr	r2, [sp, #4]
 800ac34:	f109 0301 	add.w	r3, r9, #1
 800ac38:	7013      	strb	r3, [r2, #0]
 800ac3a:	e73d      	b.n	800aab8 <_dtoa_r+0x960>
 800ac3c:	9b04      	ldr	r3, [sp, #16]
 800ac3e:	9a08      	ldr	r2, [sp, #32]
 800ac40:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d043      	beq.n	800acd0 <_dtoa_r+0xb78>
 800ac48:	4651      	mov	r1, sl
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	220a      	movs	r2, #10
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 f9d6 	bl	800b000 <__multadd>
 800ac54:	45b8      	cmp	r8, r7
 800ac56:	4682      	mov	sl, r0
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	f04f 020a 	mov.w	r2, #10
 800ac60:	4641      	mov	r1, r8
 800ac62:	4620      	mov	r0, r4
 800ac64:	d107      	bne.n	800ac76 <_dtoa_r+0xb1e>
 800ac66:	f000 f9cb 	bl	800b000 <__multadd>
 800ac6a:	4680      	mov	r8, r0
 800ac6c:	4607      	mov	r7, r0
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	3301      	adds	r3, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	e775      	b.n	800ab62 <_dtoa_r+0xa0a>
 800ac76:	f000 f9c3 	bl	800b000 <__multadd>
 800ac7a:	4639      	mov	r1, r7
 800ac7c:	4680      	mov	r8, r0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	220a      	movs	r2, #10
 800ac82:	4620      	mov	r0, r4
 800ac84:	f000 f9bc 	bl	800b000 <__multadd>
 800ac88:	4607      	mov	r7, r0
 800ac8a:	e7f0      	b.n	800ac6e <_dtoa_r+0xb16>
 800ac8c:	9b04      	ldr	r3, [sp, #16]
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	9d00      	ldr	r5, [sp, #0]
 800ac92:	4631      	mov	r1, r6
 800ac94:	4650      	mov	r0, sl
 800ac96:	f7ff f9d6 	bl	800a046 <quorem>
 800ac9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac9e:	9b00      	ldr	r3, [sp, #0]
 800aca0:	f805 9b01 	strb.w	r9, [r5], #1
 800aca4:	1aea      	subs	r2, r5, r3
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	4293      	cmp	r3, r2
 800acaa:	dd07      	ble.n	800acbc <_dtoa_r+0xb64>
 800acac:	4651      	mov	r1, sl
 800acae:	2300      	movs	r3, #0
 800acb0:	220a      	movs	r2, #10
 800acb2:	4620      	mov	r0, r4
 800acb4:	f000 f9a4 	bl	800b000 <__multadd>
 800acb8:	4682      	mov	sl, r0
 800acba:	e7ea      	b.n	800ac92 <_dtoa_r+0xb3a>
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bfc8      	it	gt
 800acc2:	461d      	movgt	r5, r3
 800acc4:	9b00      	ldr	r3, [sp, #0]
 800acc6:	bfd8      	it	le
 800acc8:	2501      	movle	r5, #1
 800acca:	441d      	add	r5, r3
 800accc:	f04f 0800 	mov.w	r8, #0
 800acd0:	4651      	mov	r1, sl
 800acd2:	2201      	movs	r2, #1
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 fb41 	bl	800b35c <__lshift>
 800acda:	4631      	mov	r1, r6
 800acdc:	4682      	mov	sl, r0
 800acde:	f000 fba9 	bl	800b434 <__mcmp>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dc96      	bgt.n	800ac14 <_dtoa_r+0xabc>
 800ace6:	d102      	bne.n	800acee <_dtoa_r+0xb96>
 800ace8:	f019 0f01 	tst.w	r9, #1
 800acec:	d192      	bne.n	800ac14 <_dtoa_r+0xabc>
 800acee:	462b      	mov	r3, r5
 800acf0:	461d      	mov	r5, r3
 800acf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acf6:	2a30      	cmp	r2, #48	; 0x30
 800acf8:	d0fa      	beq.n	800acf0 <_dtoa_r+0xb98>
 800acfa:	e6dd      	b.n	800aab8 <_dtoa_r+0x960>
 800acfc:	9a00      	ldr	r2, [sp, #0]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d189      	bne.n	800ac16 <_dtoa_r+0xabe>
 800ad02:	f10b 0b01 	add.w	fp, fp, #1
 800ad06:	2331      	movs	r3, #49	; 0x31
 800ad08:	e796      	b.n	800ac38 <_dtoa_r+0xae0>
 800ad0a:	4b0a      	ldr	r3, [pc, #40]	; (800ad34 <_dtoa_r+0xbdc>)
 800ad0c:	f7ff ba99 	b.w	800a242 <_dtoa_r+0xea>
 800ad10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f47f aa6d 	bne.w	800a1f2 <_dtoa_r+0x9a>
 800ad18:	4b07      	ldr	r3, [pc, #28]	; (800ad38 <_dtoa_r+0xbe0>)
 800ad1a:	f7ff ba92 	b.w	800a242 <_dtoa_r+0xea>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	dcb5      	bgt.n	800ac90 <_dtoa_r+0xb38>
 800ad24:	9b07      	ldr	r3, [sp, #28]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	f73f aeb1 	bgt.w	800aa8e <_dtoa_r+0x936>
 800ad2c:	e7b0      	b.n	800ac90 <_dtoa_r+0xb38>
 800ad2e:	bf00      	nop
 800ad30:	0800c894 	.word	0x0800c894
 800ad34:	0800c7f4 	.word	0x0800c7f4
 800ad38:	0800c818 	.word	0x0800c818

0800ad3c <_free_r>:
 800ad3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad3e:	2900      	cmp	r1, #0
 800ad40:	d044      	beq.n	800adcc <_free_r+0x90>
 800ad42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad46:	9001      	str	r0, [sp, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ad4e:	bfb8      	it	lt
 800ad50:	18e4      	addlt	r4, r4, r3
 800ad52:	f000 f8e7 	bl	800af24 <__malloc_lock>
 800ad56:	4a1e      	ldr	r2, [pc, #120]	; (800add0 <_free_r+0x94>)
 800ad58:	9801      	ldr	r0, [sp, #4]
 800ad5a:	6813      	ldr	r3, [r2, #0]
 800ad5c:	b933      	cbnz	r3, 800ad6c <_free_r+0x30>
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	6014      	str	r4, [r2, #0]
 800ad62:	b003      	add	sp, #12
 800ad64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad68:	f000 b8e2 	b.w	800af30 <__malloc_unlock>
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	d908      	bls.n	800ad82 <_free_r+0x46>
 800ad70:	6825      	ldr	r5, [r4, #0]
 800ad72:	1961      	adds	r1, r4, r5
 800ad74:	428b      	cmp	r3, r1
 800ad76:	bf01      	itttt	eq
 800ad78:	6819      	ldreq	r1, [r3, #0]
 800ad7a:	685b      	ldreq	r3, [r3, #4]
 800ad7c:	1949      	addeq	r1, r1, r5
 800ad7e:	6021      	streq	r1, [r4, #0]
 800ad80:	e7ed      	b.n	800ad5e <_free_r+0x22>
 800ad82:	461a      	mov	r2, r3
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	b10b      	cbz	r3, 800ad8c <_free_r+0x50>
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d9fa      	bls.n	800ad82 <_free_r+0x46>
 800ad8c:	6811      	ldr	r1, [r2, #0]
 800ad8e:	1855      	adds	r5, r2, r1
 800ad90:	42a5      	cmp	r5, r4
 800ad92:	d10b      	bne.n	800adac <_free_r+0x70>
 800ad94:	6824      	ldr	r4, [r4, #0]
 800ad96:	4421      	add	r1, r4
 800ad98:	1854      	adds	r4, r2, r1
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	d1e0      	bne.n	800ad62 <_free_r+0x26>
 800ada0:	681c      	ldr	r4, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	6053      	str	r3, [r2, #4]
 800ada6:	440c      	add	r4, r1
 800ada8:	6014      	str	r4, [r2, #0]
 800adaa:	e7da      	b.n	800ad62 <_free_r+0x26>
 800adac:	d902      	bls.n	800adb4 <_free_r+0x78>
 800adae:	230c      	movs	r3, #12
 800adb0:	6003      	str	r3, [r0, #0]
 800adb2:	e7d6      	b.n	800ad62 <_free_r+0x26>
 800adb4:	6825      	ldr	r5, [r4, #0]
 800adb6:	1961      	adds	r1, r4, r5
 800adb8:	428b      	cmp	r3, r1
 800adba:	bf04      	itt	eq
 800adbc:	6819      	ldreq	r1, [r3, #0]
 800adbe:	685b      	ldreq	r3, [r3, #4]
 800adc0:	6063      	str	r3, [r4, #4]
 800adc2:	bf04      	itt	eq
 800adc4:	1949      	addeq	r1, r1, r5
 800adc6:	6021      	streq	r1, [r4, #0]
 800adc8:	6054      	str	r4, [r2, #4]
 800adca:	e7ca      	b.n	800ad62 <_free_r+0x26>
 800adcc:	b003      	add	sp, #12
 800adce:	bd30      	pop	{r4, r5, pc}
 800add0:	20002228 	.word	0x20002228

0800add4 <malloc>:
 800add4:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <malloc+0xc>)
 800add6:	4601      	mov	r1, r0
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	f000 b823 	b.w	800ae24 <_malloc_r>
 800adde:	bf00      	nop
 800ade0:	20000158 	.word	0x20000158

0800ade4 <sbrk_aligned>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	4e0e      	ldr	r6, [pc, #56]	; (800ae20 <sbrk_aligned+0x3c>)
 800ade8:	460c      	mov	r4, r1
 800adea:	6831      	ldr	r1, [r6, #0]
 800adec:	4605      	mov	r5, r0
 800adee:	b911      	cbnz	r1, 800adf6 <sbrk_aligned+0x12>
 800adf0:	f000 fe40 	bl	800ba74 <_sbrk_r>
 800adf4:	6030      	str	r0, [r6, #0]
 800adf6:	4621      	mov	r1, r4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 fe3b 	bl	800ba74 <_sbrk_r>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d00a      	beq.n	800ae18 <sbrk_aligned+0x34>
 800ae02:	1cc4      	adds	r4, r0, #3
 800ae04:	f024 0403 	bic.w	r4, r4, #3
 800ae08:	42a0      	cmp	r0, r4
 800ae0a:	d007      	beq.n	800ae1c <sbrk_aligned+0x38>
 800ae0c:	1a21      	subs	r1, r4, r0
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f000 fe30 	bl	800ba74 <_sbrk_r>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d101      	bne.n	800ae1c <sbrk_aligned+0x38>
 800ae18:	f04f 34ff 	mov.w	r4, #4294967295
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}
 800ae20:	2000222c 	.word	0x2000222c

0800ae24 <_malloc_r>:
 800ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	1ccd      	adds	r5, r1, #3
 800ae2a:	f025 0503 	bic.w	r5, r5, #3
 800ae2e:	3508      	adds	r5, #8
 800ae30:	2d0c      	cmp	r5, #12
 800ae32:	bf38      	it	cc
 800ae34:	250c      	movcc	r5, #12
 800ae36:	2d00      	cmp	r5, #0
 800ae38:	4607      	mov	r7, r0
 800ae3a:	db01      	blt.n	800ae40 <_malloc_r+0x1c>
 800ae3c:	42a9      	cmp	r1, r5
 800ae3e:	d905      	bls.n	800ae4c <_malloc_r+0x28>
 800ae40:	230c      	movs	r3, #12
 800ae42:	603b      	str	r3, [r7, #0]
 800ae44:	2600      	movs	r6, #0
 800ae46:	4630      	mov	r0, r6
 800ae48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af20 <_malloc_r+0xfc>
 800ae50:	f000 f868 	bl	800af24 <__malloc_lock>
 800ae54:	f8d8 3000 	ldr.w	r3, [r8]
 800ae58:	461c      	mov	r4, r3
 800ae5a:	bb5c      	cbnz	r4, 800aeb4 <_malloc_r+0x90>
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	4638      	mov	r0, r7
 800ae60:	f7ff ffc0 	bl	800ade4 <sbrk_aligned>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	4604      	mov	r4, r0
 800ae68:	d155      	bne.n	800af16 <_malloc_r+0xf2>
 800ae6a:	f8d8 4000 	ldr.w	r4, [r8]
 800ae6e:	4626      	mov	r6, r4
 800ae70:	2e00      	cmp	r6, #0
 800ae72:	d145      	bne.n	800af00 <_malloc_r+0xdc>
 800ae74:	2c00      	cmp	r4, #0
 800ae76:	d048      	beq.n	800af0a <_malloc_r+0xe6>
 800ae78:	6823      	ldr	r3, [r4, #0]
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	eb04 0903 	add.w	r9, r4, r3
 800ae82:	f000 fdf7 	bl	800ba74 <_sbrk_r>
 800ae86:	4581      	cmp	r9, r0
 800ae88:	d13f      	bne.n	800af0a <_malloc_r+0xe6>
 800ae8a:	6821      	ldr	r1, [r4, #0]
 800ae8c:	1a6d      	subs	r5, r5, r1
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4638      	mov	r0, r7
 800ae92:	f7ff ffa7 	bl	800ade4 <sbrk_aligned>
 800ae96:	3001      	adds	r0, #1
 800ae98:	d037      	beq.n	800af0a <_malloc_r+0xe6>
 800ae9a:	6823      	ldr	r3, [r4, #0]
 800ae9c:	442b      	add	r3, r5
 800ae9e:	6023      	str	r3, [r4, #0]
 800aea0:	f8d8 3000 	ldr.w	r3, [r8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d038      	beq.n	800af1a <_malloc_r+0xf6>
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	42a2      	cmp	r2, r4
 800aeac:	d12b      	bne.n	800af06 <_malloc_r+0xe2>
 800aeae:	2200      	movs	r2, #0
 800aeb0:	605a      	str	r2, [r3, #4]
 800aeb2:	e00f      	b.n	800aed4 <_malloc_r+0xb0>
 800aeb4:	6822      	ldr	r2, [r4, #0]
 800aeb6:	1b52      	subs	r2, r2, r5
 800aeb8:	d41f      	bmi.n	800aefa <_malloc_r+0xd6>
 800aeba:	2a0b      	cmp	r2, #11
 800aebc:	d917      	bls.n	800aeee <_malloc_r+0xca>
 800aebe:	1961      	adds	r1, r4, r5
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	6025      	str	r5, [r4, #0]
 800aec4:	bf18      	it	ne
 800aec6:	6059      	strne	r1, [r3, #4]
 800aec8:	6863      	ldr	r3, [r4, #4]
 800aeca:	bf08      	it	eq
 800aecc:	f8c8 1000 	streq.w	r1, [r8]
 800aed0:	5162      	str	r2, [r4, r5]
 800aed2:	604b      	str	r3, [r1, #4]
 800aed4:	4638      	mov	r0, r7
 800aed6:	f104 060b 	add.w	r6, r4, #11
 800aeda:	f000 f829 	bl	800af30 <__malloc_unlock>
 800aede:	f026 0607 	bic.w	r6, r6, #7
 800aee2:	1d23      	adds	r3, r4, #4
 800aee4:	1af2      	subs	r2, r6, r3
 800aee6:	d0ae      	beq.n	800ae46 <_malloc_r+0x22>
 800aee8:	1b9b      	subs	r3, r3, r6
 800aeea:	50a3      	str	r3, [r4, r2]
 800aeec:	e7ab      	b.n	800ae46 <_malloc_r+0x22>
 800aeee:	42a3      	cmp	r3, r4
 800aef0:	6862      	ldr	r2, [r4, #4]
 800aef2:	d1dd      	bne.n	800aeb0 <_malloc_r+0x8c>
 800aef4:	f8c8 2000 	str.w	r2, [r8]
 800aef8:	e7ec      	b.n	800aed4 <_malloc_r+0xb0>
 800aefa:	4623      	mov	r3, r4
 800aefc:	6864      	ldr	r4, [r4, #4]
 800aefe:	e7ac      	b.n	800ae5a <_malloc_r+0x36>
 800af00:	4634      	mov	r4, r6
 800af02:	6876      	ldr	r6, [r6, #4]
 800af04:	e7b4      	b.n	800ae70 <_malloc_r+0x4c>
 800af06:	4613      	mov	r3, r2
 800af08:	e7cc      	b.n	800aea4 <_malloc_r+0x80>
 800af0a:	230c      	movs	r3, #12
 800af0c:	603b      	str	r3, [r7, #0]
 800af0e:	4638      	mov	r0, r7
 800af10:	f000 f80e 	bl	800af30 <__malloc_unlock>
 800af14:	e797      	b.n	800ae46 <_malloc_r+0x22>
 800af16:	6025      	str	r5, [r4, #0]
 800af18:	e7dc      	b.n	800aed4 <_malloc_r+0xb0>
 800af1a:	605b      	str	r3, [r3, #4]
 800af1c:	deff      	udf	#255	; 0xff
 800af1e:	bf00      	nop
 800af20:	20002228 	.word	0x20002228

0800af24 <__malloc_lock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_lock+0x8>)
 800af26:	f7ff b88c 	b.w	800a042 <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	20002224 	.word	0x20002224

0800af30 <__malloc_unlock>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__malloc_unlock+0x8>)
 800af32:	f7ff b887 	b.w	800a044 <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	20002224 	.word	0x20002224

0800af3c <_Balloc>:
 800af3c:	b570      	push	{r4, r5, r6, lr}
 800af3e:	69c6      	ldr	r6, [r0, #28]
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	b976      	cbnz	r6, 800af64 <_Balloc+0x28>
 800af46:	2010      	movs	r0, #16
 800af48:	f7ff ff44 	bl	800add4 <malloc>
 800af4c:	4602      	mov	r2, r0
 800af4e:	61e0      	str	r0, [r4, #28]
 800af50:	b920      	cbnz	r0, 800af5c <_Balloc+0x20>
 800af52:	4b18      	ldr	r3, [pc, #96]	; (800afb4 <_Balloc+0x78>)
 800af54:	4818      	ldr	r0, [pc, #96]	; (800afb8 <_Balloc+0x7c>)
 800af56:	216b      	movs	r1, #107	; 0x6b
 800af58:	f000 fdaa 	bl	800bab0 <__assert_func>
 800af5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af60:	6006      	str	r6, [r0, #0]
 800af62:	60c6      	str	r6, [r0, #12]
 800af64:	69e6      	ldr	r6, [r4, #28]
 800af66:	68f3      	ldr	r3, [r6, #12]
 800af68:	b183      	cbz	r3, 800af8c <_Balloc+0x50>
 800af6a:	69e3      	ldr	r3, [r4, #28]
 800af6c:	68db      	ldr	r3, [r3, #12]
 800af6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af72:	b9b8      	cbnz	r0, 800afa4 <_Balloc+0x68>
 800af74:	2101      	movs	r1, #1
 800af76:	fa01 f605 	lsl.w	r6, r1, r5
 800af7a:	1d72      	adds	r2, r6, #5
 800af7c:	0092      	lsls	r2, r2, #2
 800af7e:	4620      	mov	r0, r4
 800af80:	f000 fdb4 	bl	800baec <_calloc_r>
 800af84:	b160      	cbz	r0, 800afa0 <_Balloc+0x64>
 800af86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af8a:	e00e      	b.n	800afaa <_Balloc+0x6e>
 800af8c:	2221      	movs	r2, #33	; 0x21
 800af8e:	2104      	movs	r1, #4
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fdab 	bl	800baec <_calloc_r>
 800af96:	69e3      	ldr	r3, [r4, #28]
 800af98:	60f0      	str	r0, [r6, #12]
 800af9a:	68db      	ldr	r3, [r3, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e4      	bne.n	800af6a <_Balloc+0x2e>
 800afa0:	2000      	movs	r0, #0
 800afa2:	bd70      	pop	{r4, r5, r6, pc}
 800afa4:	6802      	ldr	r2, [r0, #0]
 800afa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afaa:	2300      	movs	r3, #0
 800afac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afb0:	e7f7      	b.n	800afa2 <_Balloc+0x66>
 800afb2:	bf00      	nop
 800afb4:	0800c825 	.word	0x0800c825
 800afb8:	0800c8a5 	.word	0x0800c8a5

0800afbc <_Bfree>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	69c6      	ldr	r6, [r0, #28]
 800afc0:	4605      	mov	r5, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	b976      	cbnz	r6, 800afe4 <_Bfree+0x28>
 800afc6:	2010      	movs	r0, #16
 800afc8:	f7ff ff04 	bl	800add4 <malloc>
 800afcc:	4602      	mov	r2, r0
 800afce:	61e8      	str	r0, [r5, #28]
 800afd0:	b920      	cbnz	r0, 800afdc <_Bfree+0x20>
 800afd2:	4b09      	ldr	r3, [pc, #36]	; (800aff8 <_Bfree+0x3c>)
 800afd4:	4809      	ldr	r0, [pc, #36]	; (800affc <_Bfree+0x40>)
 800afd6:	218f      	movs	r1, #143	; 0x8f
 800afd8:	f000 fd6a 	bl	800bab0 <__assert_func>
 800afdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afe0:	6006      	str	r6, [r0, #0]
 800afe2:	60c6      	str	r6, [r0, #12]
 800afe4:	b13c      	cbz	r4, 800aff6 <_Bfree+0x3a>
 800afe6:	69eb      	ldr	r3, [r5, #28]
 800afe8:	6862      	ldr	r2, [r4, #4]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aff0:	6021      	str	r1, [r4, #0]
 800aff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	0800c825 	.word	0x0800c825
 800affc:	0800c8a5 	.word	0x0800c8a5

0800b000 <__multadd>:
 800b000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b004:	690d      	ldr	r5, [r1, #16]
 800b006:	4607      	mov	r7, r0
 800b008:	460c      	mov	r4, r1
 800b00a:	461e      	mov	r6, r3
 800b00c:	f101 0c14 	add.w	ip, r1, #20
 800b010:	2000      	movs	r0, #0
 800b012:	f8dc 3000 	ldr.w	r3, [ip]
 800b016:	b299      	uxth	r1, r3
 800b018:	fb02 6101 	mla	r1, r2, r1, r6
 800b01c:	0c1e      	lsrs	r6, r3, #16
 800b01e:	0c0b      	lsrs	r3, r1, #16
 800b020:	fb02 3306 	mla	r3, r2, r6, r3
 800b024:	b289      	uxth	r1, r1
 800b026:	3001      	adds	r0, #1
 800b028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b02c:	4285      	cmp	r5, r0
 800b02e:	f84c 1b04 	str.w	r1, [ip], #4
 800b032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b036:	dcec      	bgt.n	800b012 <__multadd+0x12>
 800b038:	b30e      	cbz	r6, 800b07e <__multadd+0x7e>
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	42ab      	cmp	r3, r5
 800b03e:	dc19      	bgt.n	800b074 <__multadd+0x74>
 800b040:	6861      	ldr	r1, [r4, #4]
 800b042:	4638      	mov	r0, r7
 800b044:	3101      	adds	r1, #1
 800b046:	f7ff ff79 	bl	800af3c <_Balloc>
 800b04a:	4680      	mov	r8, r0
 800b04c:	b928      	cbnz	r0, 800b05a <__multadd+0x5a>
 800b04e:	4602      	mov	r2, r0
 800b050:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <__multadd+0x84>)
 800b052:	480d      	ldr	r0, [pc, #52]	; (800b088 <__multadd+0x88>)
 800b054:	21ba      	movs	r1, #186	; 0xba
 800b056:	f000 fd2b 	bl	800bab0 <__assert_func>
 800b05a:	6922      	ldr	r2, [r4, #16]
 800b05c:	3202      	adds	r2, #2
 800b05e:	f104 010c 	add.w	r1, r4, #12
 800b062:	0092      	lsls	r2, r2, #2
 800b064:	300c      	adds	r0, #12
 800b066:	f000 fd15 	bl	800ba94 <memcpy>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff ffa5 	bl	800afbc <_Bfree>
 800b072:	4644      	mov	r4, r8
 800b074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b078:	3501      	adds	r5, #1
 800b07a:	615e      	str	r6, [r3, #20]
 800b07c:	6125      	str	r5, [r4, #16]
 800b07e:	4620      	mov	r0, r4
 800b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b084:	0800c894 	.word	0x0800c894
 800b088:	0800c8a5 	.word	0x0800c8a5

0800b08c <__hi0bits>:
 800b08c:	0c03      	lsrs	r3, r0, #16
 800b08e:	041b      	lsls	r3, r3, #16
 800b090:	b9d3      	cbnz	r3, 800b0c8 <__hi0bits+0x3c>
 800b092:	0400      	lsls	r0, r0, #16
 800b094:	2310      	movs	r3, #16
 800b096:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b09a:	bf04      	itt	eq
 800b09c:	0200      	lsleq	r0, r0, #8
 800b09e:	3308      	addeq	r3, #8
 800b0a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0a4:	bf04      	itt	eq
 800b0a6:	0100      	lsleq	r0, r0, #4
 800b0a8:	3304      	addeq	r3, #4
 800b0aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0ae:	bf04      	itt	eq
 800b0b0:	0080      	lsleq	r0, r0, #2
 800b0b2:	3302      	addeq	r3, #2
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	db05      	blt.n	800b0c4 <__hi0bits+0x38>
 800b0b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0bc:	f103 0301 	add.w	r3, r3, #1
 800b0c0:	bf08      	it	eq
 800b0c2:	2320      	moveq	r3, #32
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	4770      	bx	lr
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	e7e4      	b.n	800b096 <__hi0bits+0xa>

0800b0cc <__lo0bits>:
 800b0cc:	6803      	ldr	r3, [r0, #0]
 800b0ce:	f013 0207 	ands.w	r2, r3, #7
 800b0d2:	d00c      	beq.n	800b0ee <__lo0bits+0x22>
 800b0d4:	07d9      	lsls	r1, r3, #31
 800b0d6:	d422      	bmi.n	800b11e <__lo0bits+0x52>
 800b0d8:	079a      	lsls	r2, r3, #30
 800b0da:	bf49      	itett	mi
 800b0dc:	085b      	lsrmi	r3, r3, #1
 800b0de:	089b      	lsrpl	r3, r3, #2
 800b0e0:	6003      	strmi	r3, [r0, #0]
 800b0e2:	2201      	movmi	r2, #1
 800b0e4:	bf5c      	itt	pl
 800b0e6:	6003      	strpl	r3, [r0, #0]
 800b0e8:	2202      	movpl	r2, #2
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	4770      	bx	lr
 800b0ee:	b299      	uxth	r1, r3
 800b0f0:	b909      	cbnz	r1, 800b0f6 <__lo0bits+0x2a>
 800b0f2:	0c1b      	lsrs	r3, r3, #16
 800b0f4:	2210      	movs	r2, #16
 800b0f6:	b2d9      	uxtb	r1, r3
 800b0f8:	b909      	cbnz	r1, 800b0fe <__lo0bits+0x32>
 800b0fa:	3208      	adds	r2, #8
 800b0fc:	0a1b      	lsrs	r3, r3, #8
 800b0fe:	0719      	lsls	r1, r3, #28
 800b100:	bf04      	itt	eq
 800b102:	091b      	lsreq	r3, r3, #4
 800b104:	3204      	addeq	r2, #4
 800b106:	0799      	lsls	r1, r3, #30
 800b108:	bf04      	itt	eq
 800b10a:	089b      	lsreq	r3, r3, #2
 800b10c:	3202      	addeq	r2, #2
 800b10e:	07d9      	lsls	r1, r3, #31
 800b110:	d403      	bmi.n	800b11a <__lo0bits+0x4e>
 800b112:	085b      	lsrs	r3, r3, #1
 800b114:	f102 0201 	add.w	r2, r2, #1
 800b118:	d003      	beq.n	800b122 <__lo0bits+0x56>
 800b11a:	6003      	str	r3, [r0, #0]
 800b11c:	e7e5      	b.n	800b0ea <__lo0bits+0x1e>
 800b11e:	2200      	movs	r2, #0
 800b120:	e7e3      	b.n	800b0ea <__lo0bits+0x1e>
 800b122:	2220      	movs	r2, #32
 800b124:	e7e1      	b.n	800b0ea <__lo0bits+0x1e>
	...

0800b128 <__i2b>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	460c      	mov	r4, r1
 800b12c:	2101      	movs	r1, #1
 800b12e:	f7ff ff05 	bl	800af3c <_Balloc>
 800b132:	4602      	mov	r2, r0
 800b134:	b928      	cbnz	r0, 800b142 <__i2b+0x1a>
 800b136:	4b05      	ldr	r3, [pc, #20]	; (800b14c <__i2b+0x24>)
 800b138:	4805      	ldr	r0, [pc, #20]	; (800b150 <__i2b+0x28>)
 800b13a:	f240 1145 	movw	r1, #325	; 0x145
 800b13e:	f000 fcb7 	bl	800bab0 <__assert_func>
 800b142:	2301      	movs	r3, #1
 800b144:	6144      	str	r4, [r0, #20]
 800b146:	6103      	str	r3, [r0, #16]
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop
 800b14c:	0800c894 	.word	0x0800c894
 800b150:	0800c8a5 	.word	0x0800c8a5

0800b154 <__multiply>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	4691      	mov	r9, r2
 800b15a:	690a      	ldr	r2, [r1, #16]
 800b15c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b160:	429a      	cmp	r2, r3
 800b162:	bfb8      	it	lt
 800b164:	460b      	movlt	r3, r1
 800b166:	460c      	mov	r4, r1
 800b168:	bfbc      	itt	lt
 800b16a:	464c      	movlt	r4, r9
 800b16c:	4699      	movlt	r9, r3
 800b16e:	6927      	ldr	r7, [r4, #16]
 800b170:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b174:	68a3      	ldr	r3, [r4, #8]
 800b176:	6861      	ldr	r1, [r4, #4]
 800b178:	eb07 060a 	add.w	r6, r7, sl
 800b17c:	42b3      	cmp	r3, r6
 800b17e:	b085      	sub	sp, #20
 800b180:	bfb8      	it	lt
 800b182:	3101      	addlt	r1, #1
 800b184:	f7ff feda 	bl	800af3c <_Balloc>
 800b188:	b930      	cbnz	r0, 800b198 <__multiply+0x44>
 800b18a:	4602      	mov	r2, r0
 800b18c:	4b44      	ldr	r3, [pc, #272]	; (800b2a0 <__multiply+0x14c>)
 800b18e:	4845      	ldr	r0, [pc, #276]	; (800b2a4 <__multiply+0x150>)
 800b190:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b194:	f000 fc8c 	bl	800bab0 <__assert_func>
 800b198:	f100 0514 	add.w	r5, r0, #20
 800b19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4543      	cmp	r3, r8
 800b1a6:	d321      	bcc.n	800b1ec <__multiply+0x98>
 800b1a8:	f104 0314 	add.w	r3, r4, #20
 800b1ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1b0:	f109 0314 	add.w	r3, r9, #20
 800b1b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1b8:	9202      	str	r2, [sp, #8]
 800b1ba:	1b3a      	subs	r2, r7, r4
 800b1bc:	3a15      	subs	r2, #21
 800b1be:	f022 0203 	bic.w	r2, r2, #3
 800b1c2:	3204      	adds	r2, #4
 800b1c4:	f104 0115 	add.w	r1, r4, #21
 800b1c8:	428f      	cmp	r7, r1
 800b1ca:	bf38      	it	cc
 800b1cc:	2204      	movcc	r2, #4
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	9a02      	ldr	r2, [sp, #8]
 800b1d2:	9303      	str	r3, [sp, #12]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d80c      	bhi.n	800b1f2 <__multiply+0x9e>
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	dd03      	ble.n	800b1e4 <__multiply+0x90>
 800b1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d05b      	beq.n	800b29c <__multiply+0x148>
 800b1e4:	6106      	str	r6, [r0, #16]
 800b1e6:	b005      	add	sp, #20
 800b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ec:	f843 2b04 	str.w	r2, [r3], #4
 800b1f0:	e7d8      	b.n	800b1a4 <__multiply+0x50>
 800b1f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1f6:	f1ba 0f00 	cmp.w	sl, #0
 800b1fa:	d024      	beq.n	800b246 <__multiply+0xf2>
 800b1fc:	f104 0e14 	add.w	lr, r4, #20
 800b200:	46a9      	mov	r9, r5
 800b202:	f04f 0c00 	mov.w	ip, #0
 800b206:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b20a:	f8d9 1000 	ldr.w	r1, [r9]
 800b20e:	fa1f fb82 	uxth.w	fp, r2
 800b212:	b289      	uxth	r1, r1
 800b214:	fb0a 110b 	mla	r1, sl, fp, r1
 800b218:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b21c:	f8d9 2000 	ldr.w	r2, [r9]
 800b220:	4461      	add	r1, ip
 800b222:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b226:	fb0a c20b 	mla	r2, sl, fp, ip
 800b22a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b22e:	b289      	uxth	r1, r1
 800b230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b234:	4577      	cmp	r7, lr
 800b236:	f849 1b04 	str.w	r1, [r9], #4
 800b23a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b23e:	d8e2      	bhi.n	800b206 <__multiply+0xb2>
 800b240:	9a01      	ldr	r2, [sp, #4]
 800b242:	f845 c002 	str.w	ip, [r5, r2]
 800b246:	9a03      	ldr	r2, [sp, #12]
 800b248:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b24c:	3304      	adds	r3, #4
 800b24e:	f1b9 0f00 	cmp.w	r9, #0
 800b252:	d021      	beq.n	800b298 <__multiply+0x144>
 800b254:	6829      	ldr	r1, [r5, #0]
 800b256:	f104 0c14 	add.w	ip, r4, #20
 800b25a:	46ae      	mov	lr, r5
 800b25c:	f04f 0a00 	mov.w	sl, #0
 800b260:	f8bc b000 	ldrh.w	fp, [ip]
 800b264:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b268:	fb09 220b 	mla	r2, r9, fp, r2
 800b26c:	4452      	add	r2, sl
 800b26e:	b289      	uxth	r1, r1
 800b270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b274:	f84e 1b04 	str.w	r1, [lr], #4
 800b278:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b27c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b280:	f8be 1000 	ldrh.w	r1, [lr]
 800b284:	fb09 110a 	mla	r1, r9, sl, r1
 800b288:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b28c:	4567      	cmp	r7, ip
 800b28e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b292:	d8e5      	bhi.n	800b260 <__multiply+0x10c>
 800b294:	9a01      	ldr	r2, [sp, #4]
 800b296:	50a9      	str	r1, [r5, r2]
 800b298:	3504      	adds	r5, #4
 800b29a:	e799      	b.n	800b1d0 <__multiply+0x7c>
 800b29c:	3e01      	subs	r6, #1
 800b29e:	e79b      	b.n	800b1d8 <__multiply+0x84>
 800b2a0:	0800c894 	.word	0x0800c894
 800b2a4:	0800c8a5 	.word	0x0800c8a5

0800b2a8 <__pow5mult>:
 800b2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	f012 0203 	ands.w	r2, r2, #3
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	d007      	beq.n	800b2c8 <__pow5mult+0x20>
 800b2b8:	4c25      	ldr	r4, [pc, #148]	; (800b350 <__pow5mult+0xa8>)
 800b2ba:	3a01      	subs	r2, #1
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2c2:	f7ff fe9d 	bl	800b000 <__multadd>
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	10ad      	asrs	r5, r5, #2
 800b2ca:	d03d      	beq.n	800b348 <__pow5mult+0xa0>
 800b2cc:	69f4      	ldr	r4, [r6, #28]
 800b2ce:	b97c      	cbnz	r4, 800b2f0 <__pow5mult+0x48>
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f7ff fd7f 	bl	800add4 <malloc>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	61f0      	str	r0, [r6, #28]
 800b2da:	b928      	cbnz	r0, 800b2e8 <__pow5mult+0x40>
 800b2dc:	4b1d      	ldr	r3, [pc, #116]	; (800b354 <__pow5mult+0xac>)
 800b2de:	481e      	ldr	r0, [pc, #120]	; (800b358 <__pow5mult+0xb0>)
 800b2e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b2e4:	f000 fbe4 	bl	800bab0 <__assert_func>
 800b2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2ec:	6004      	str	r4, [r0, #0]
 800b2ee:	60c4      	str	r4, [r0, #12]
 800b2f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2f8:	b94c      	cbnz	r4, 800b30e <__pow5mult+0x66>
 800b2fa:	f240 2171 	movw	r1, #625	; 0x271
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7ff ff12 	bl	800b128 <__i2b>
 800b304:	2300      	movs	r3, #0
 800b306:	f8c8 0008 	str.w	r0, [r8, #8]
 800b30a:	4604      	mov	r4, r0
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	07eb      	lsls	r3, r5, #31
 800b314:	d50a      	bpl.n	800b32c <__pow5mult+0x84>
 800b316:	4639      	mov	r1, r7
 800b318:	4622      	mov	r2, r4
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ff1a 	bl	800b154 <__multiply>
 800b320:	4639      	mov	r1, r7
 800b322:	4680      	mov	r8, r0
 800b324:	4630      	mov	r0, r6
 800b326:	f7ff fe49 	bl	800afbc <_Bfree>
 800b32a:	4647      	mov	r7, r8
 800b32c:	106d      	asrs	r5, r5, #1
 800b32e:	d00b      	beq.n	800b348 <__pow5mult+0xa0>
 800b330:	6820      	ldr	r0, [r4, #0]
 800b332:	b938      	cbnz	r0, 800b344 <__pow5mult+0x9c>
 800b334:	4622      	mov	r2, r4
 800b336:	4621      	mov	r1, r4
 800b338:	4630      	mov	r0, r6
 800b33a:	f7ff ff0b 	bl	800b154 <__multiply>
 800b33e:	6020      	str	r0, [r4, #0]
 800b340:	f8c0 9000 	str.w	r9, [r0]
 800b344:	4604      	mov	r4, r0
 800b346:	e7e4      	b.n	800b312 <__pow5mult+0x6a>
 800b348:	4638      	mov	r0, r7
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34e:	bf00      	nop
 800b350:	0800c9f0 	.word	0x0800c9f0
 800b354:	0800c825 	.word	0x0800c825
 800b358:	0800c8a5 	.word	0x0800c8a5

0800b35c <__lshift>:
 800b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	460c      	mov	r4, r1
 800b362:	6849      	ldr	r1, [r1, #4]
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	4607      	mov	r7, r0
 800b36e:	4691      	mov	r9, r2
 800b370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b374:	f108 0601 	add.w	r6, r8, #1
 800b378:	42b3      	cmp	r3, r6
 800b37a:	db0b      	blt.n	800b394 <__lshift+0x38>
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7ff fddd 	bl	800af3c <_Balloc>
 800b382:	4605      	mov	r5, r0
 800b384:	b948      	cbnz	r0, 800b39a <__lshift+0x3e>
 800b386:	4602      	mov	r2, r0
 800b388:	4b28      	ldr	r3, [pc, #160]	; (800b42c <__lshift+0xd0>)
 800b38a:	4829      	ldr	r0, [pc, #164]	; (800b430 <__lshift+0xd4>)
 800b38c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b390:	f000 fb8e 	bl	800bab0 <__assert_func>
 800b394:	3101      	adds	r1, #1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	e7ee      	b.n	800b378 <__lshift+0x1c>
 800b39a:	2300      	movs	r3, #0
 800b39c:	f100 0114 	add.w	r1, r0, #20
 800b3a0:	f100 0210 	add.w	r2, r0, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	4553      	cmp	r3, sl
 800b3a8:	db33      	blt.n	800b412 <__lshift+0xb6>
 800b3aa:	6920      	ldr	r0, [r4, #16]
 800b3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3b0:	f104 0314 	add.w	r3, r4, #20
 800b3b4:	f019 091f 	ands.w	r9, r9, #31
 800b3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3c0:	d02b      	beq.n	800b41a <__lshift+0xbe>
 800b3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3c6:	468a      	mov	sl, r1
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b3d0:	4310      	orrs	r0, r2
 800b3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3da:	459c      	cmp	ip, r3
 800b3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3e0:	d8f3      	bhi.n	800b3ca <__lshift+0x6e>
 800b3e2:	ebac 0304 	sub.w	r3, ip, r4
 800b3e6:	3b15      	subs	r3, #21
 800b3e8:	f023 0303 	bic.w	r3, r3, #3
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	f104 0015 	add.w	r0, r4, #21
 800b3f2:	4584      	cmp	ip, r0
 800b3f4:	bf38      	it	cc
 800b3f6:	2304      	movcc	r3, #4
 800b3f8:	50ca      	str	r2, [r1, r3]
 800b3fa:	b10a      	cbz	r2, 800b400 <__lshift+0xa4>
 800b3fc:	f108 0602 	add.w	r6, r8, #2
 800b400:	3e01      	subs	r6, #1
 800b402:	4638      	mov	r0, r7
 800b404:	612e      	str	r6, [r5, #16]
 800b406:	4621      	mov	r1, r4
 800b408:	f7ff fdd8 	bl	800afbc <_Bfree>
 800b40c:	4628      	mov	r0, r5
 800b40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b412:	f842 0f04 	str.w	r0, [r2, #4]!
 800b416:	3301      	adds	r3, #1
 800b418:	e7c5      	b.n	800b3a6 <__lshift+0x4a>
 800b41a:	3904      	subs	r1, #4
 800b41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b420:	f841 2f04 	str.w	r2, [r1, #4]!
 800b424:	459c      	cmp	ip, r3
 800b426:	d8f9      	bhi.n	800b41c <__lshift+0xc0>
 800b428:	e7ea      	b.n	800b400 <__lshift+0xa4>
 800b42a:	bf00      	nop
 800b42c:	0800c894 	.word	0x0800c894
 800b430:	0800c8a5 	.word	0x0800c8a5

0800b434 <__mcmp>:
 800b434:	b530      	push	{r4, r5, lr}
 800b436:	6902      	ldr	r2, [r0, #16]
 800b438:	690c      	ldr	r4, [r1, #16]
 800b43a:	1b12      	subs	r2, r2, r4
 800b43c:	d10e      	bne.n	800b45c <__mcmp+0x28>
 800b43e:	f100 0314 	add.w	r3, r0, #20
 800b442:	3114      	adds	r1, #20
 800b444:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b448:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b44c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b450:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b454:	42a5      	cmp	r5, r4
 800b456:	d003      	beq.n	800b460 <__mcmp+0x2c>
 800b458:	d305      	bcc.n	800b466 <__mcmp+0x32>
 800b45a:	2201      	movs	r2, #1
 800b45c:	4610      	mov	r0, r2
 800b45e:	bd30      	pop	{r4, r5, pc}
 800b460:	4283      	cmp	r3, r0
 800b462:	d3f3      	bcc.n	800b44c <__mcmp+0x18>
 800b464:	e7fa      	b.n	800b45c <__mcmp+0x28>
 800b466:	f04f 32ff 	mov.w	r2, #4294967295
 800b46a:	e7f7      	b.n	800b45c <__mcmp+0x28>

0800b46c <__mdiff>:
 800b46c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	460c      	mov	r4, r1
 800b472:	4606      	mov	r6, r0
 800b474:	4611      	mov	r1, r2
 800b476:	4620      	mov	r0, r4
 800b478:	4690      	mov	r8, r2
 800b47a:	f7ff ffdb 	bl	800b434 <__mcmp>
 800b47e:	1e05      	subs	r5, r0, #0
 800b480:	d110      	bne.n	800b4a4 <__mdiff+0x38>
 800b482:	4629      	mov	r1, r5
 800b484:	4630      	mov	r0, r6
 800b486:	f7ff fd59 	bl	800af3c <_Balloc>
 800b48a:	b930      	cbnz	r0, 800b49a <__mdiff+0x2e>
 800b48c:	4b3a      	ldr	r3, [pc, #232]	; (800b578 <__mdiff+0x10c>)
 800b48e:	4602      	mov	r2, r0
 800b490:	f240 2137 	movw	r1, #567	; 0x237
 800b494:	4839      	ldr	r0, [pc, #228]	; (800b57c <__mdiff+0x110>)
 800b496:	f000 fb0b 	bl	800bab0 <__assert_func>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	bfa4      	itt	ge
 800b4a6:	4643      	movge	r3, r8
 800b4a8:	46a0      	movge	r8, r4
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4b0:	bfa6      	itte	ge
 800b4b2:	461c      	movge	r4, r3
 800b4b4:	2500      	movge	r5, #0
 800b4b6:	2501      	movlt	r5, #1
 800b4b8:	f7ff fd40 	bl	800af3c <_Balloc>
 800b4bc:	b920      	cbnz	r0, 800b4c8 <__mdiff+0x5c>
 800b4be:	4b2e      	ldr	r3, [pc, #184]	; (800b578 <__mdiff+0x10c>)
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	f240 2145 	movw	r1, #581	; 0x245
 800b4c6:	e7e5      	b.n	800b494 <__mdiff+0x28>
 800b4c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4cc:	6926      	ldr	r6, [r4, #16]
 800b4ce:	60c5      	str	r5, [r0, #12]
 800b4d0:	f104 0914 	add.w	r9, r4, #20
 800b4d4:	f108 0514 	add.w	r5, r8, #20
 800b4d8:	f100 0e14 	add.w	lr, r0, #20
 800b4dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4e4:	f108 0210 	add.w	r2, r8, #16
 800b4e8:	46f2      	mov	sl, lr
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4f4:	fa11 f88b 	uxtah	r8, r1, fp
 800b4f8:	b299      	uxth	r1, r3
 800b4fa:	0c1b      	lsrs	r3, r3, #16
 800b4fc:	eba8 0801 	sub.w	r8, r8, r1
 800b500:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b504:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b508:	fa1f f888 	uxth.w	r8, r8
 800b50c:	1419      	asrs	r1, r3, #16
 800b50e:	454e      	cmp	r6, r9
 800b510:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b514:	f84a 3b04 	str.w	r3, [sl], #4
 800b518:	d8e8      	bhi.n	800b4ec <__mdiff+0x80>
 800b51a:	1b33      	subs	r3, r6, r4
 800b51c:	3b15      	subs	r3, #21
 800b51e:	f023 0303 	bic.w	r3, r3, #3
 800b522:	3304      	adds	r3, #4
 800b524:	3415      	adds	r4, #21
 800b526:	42a6      	cmp	r6, r4
 800b528:	bf38      	it	cc
 800b52a:	2304      	movcc	r3, #4
 800b52c:	441d      	add	r5, r3
 800b52e:	4473      	add	r3, lr
 800b530:	469e      	mov	lr, r3
 800b532:	462e      	mov	r6, r5
 800b534:	4566      	cmp	r6, ip
 800b536:	d30e      	bcc.n	800b556 <__mdiff+0xea>
 800b538:	f10c 0203 	add.w	r2, ip, #3
 800b53c:	1b52      	subs	r2, r2, r5
 800b53e:	f022 0203 	bic.w	r2, r2, #3
 800b542:	3d03      	subs	r5, #3
 800b544:	45ac      	cmp	ip, r5
 800b546:	bf38      	it	cc
 800b548:	2200      	movcc	r2, #0
 800b54a:	4413      	add	r3, r2
 800b54c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b550:	b17a      	cbz	r2, 800b572 <__mdiff+0x106>
 800b552:	6107      	str	r7, [r0, #16]
 800b554:	e7a4      	b.n	800b4a0 <__mdiff+0x34>
 800b556:	f856 8b04 	ldr.w	r8, [r6], #4
 800b55a:	fa11 f288 	uxtah	r2, r1, r8
 800b55e:	1414      	asrs	r4, r2, #16
 800b560:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b564:	b292      	uxth	r2, r2
 800b566:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b56a:	f84e 2b04 	str.w	r2, [lr], #4
 800b56e:	1421      	asrs	r1, r4, #16
 800b570:	e7e0      	b.n	800b534 <__mdiff+0xc8>
 800b572:	3f01      	subs	r7, #1
 800b574:	e7ea      	b.n	800b54c <__mdiff+0xe0>
 800b576:	bf00      	nop
 800b578:	0800c894 	.word	0x0800c894
 800b57c:	0800c8a5 	.word	0x0800c8a5

0800b580 <__d2b>:
 800b580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b584:	460f      	mov	r7, r1
 800b586:	2101      	movs	r1, #1
 800b588:	ec59 8b10 	vmov	r8, r9, d0
 800b58c:	4616      	mov	r6, r2
 800b58e:	f7ff fcd5 	bl	800af3c <_Balloc>
 800b592:	4604      	mov	r4, r0
 800b594:	b930      	cbnz	r0, 800b5a4 <__d2b+0x24>
 800b596:	4602      	mov	r2, r0
 800b598:	4b24      	ldr	r3, [pc, #144]	; (800b62c <__d2b+0xac>)
 800b59a:	4825      	ldr	r0, [pc, #148]	; (800b630 <__d2b+0xb0>)
 800b59c:	f240 310f 	movw	r1, #783	; 0x30f
 800b5a0:	f000 fa86 	bl	800bab0 <__assert_func>
 800b5a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5ac:	bb2d      	cbnz	r5, 800b5fa <__d2b+0x7a>
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	f1b8 0300 	subs.w	r3, r8, #0
 800b5b4:	d026      	beq.n	800b604 <__d2b+0x84>
 800b5b6:	4668      	mov	r0, sp
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	f7ff fd87 	bl	800b0cc <__lo0bits>
 800b5be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5c2:	b1e8      	cbz	r0, 800b600 <__d2b+0x80>
 800b5c4:	f1c0 0320 	rsb	r3, r0, #32
 800b5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5cc:	430b      	orrs	r3, r1
 800b5ce:	40c2      	lsrs	r2, r0
 800b5d0:	6163      	str	r3, [r4, #20]
 800b5d2:	9201      	str	r2, [sp, #4]
 800b5d4:	9b01      	ldr	r3, [sp, #4]
 800b5d6:	61a3      	str	r3, [r4, #24]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	bf14      	ite	ne
 800b5dc:	2202      	movne	r2, #2
 800b5de:	2201      	moveq	r2, #1
 800b5e0:	6122      	str	r2, [r4, #16]
 800b5e2:	b1bd      	cbz	r5, 800b614 <__d2b+0x94>
 800b5e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5e8:	4405      	add	r5, r0
 800b5ea:	603d      	str	r5, [r7, #0]
 800b5ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5f0:	6030      	str	r0, [r6, #0]
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	b003      	add	sp, #12
 800b5f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5fe:	e7d6      	b.n	800b5ae <__d2b+0x2e>
 800b600:	6161      	str	r1, [r4, #20]
 800b602:	e7e7      	b.n	800b5d4 <__d2b+0x54>
 800b604:	a801      	add	r0, sp, #4
 800b606:	f7ff fd61 	bl	800b0cc <__lo0bits>
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	6163      	str	r3, [r4, #20]
 800b60e:	3020      	adds	r0, #32
 800b610:	2201      	movs	r2, #1
 800b612:	e7e5      	b.n	800b5e0 <__d2b+0x60>
 800b614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b61c:	6038      	str	r0, [r7, #0]
 800b61e:	6918      	ldr	r0, [r3, #16]
 800b620:	f7ff fd34 	bl	800b08c <__hi0bits>
 800b624:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b628:	e7e2      	b.n	800b5f0 <__d2b+0x70>
 800b62a:	bf00      	nop
 800b62c:	0800c894 	.word	0x0800c894
 800b630:	0800c8a5 	.word	0x0800c8a5

0800b634 <__ssputs_r>:
 800b634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b638:	688e      	ldr	r6, [r1, #8]
 800b63a:	461f      	mov	r7, r3
 800b63c:	42be      	cmp	r6, r7
 800b63e:	680b      	ldr	r3, [r1, #0]
 800b640:	4682      	mov	sl, r0
 800b642:	460c      	mov	r4, r1
 800b644:	4690      	mov	r8, r2
 800b646:	d82c      	bhi.n	800b6a2 <__ssputs_r+0x6e>
 800b648:	898a      	ldrh	r2, [r1, #12]
 800b64a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b64e:	d026      	beq.n	800b69e <__ssputs_r+0x6a>
 800b650:	6965      	ldr	r5, [r4, #20]
 800b652:	6909      	ldr	r1, [r1, #16]
 800b654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b658:	eba3 0901 	sub.w	r9, r3, r1
 800b65c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b660:	1c7b      	adds	r3, r7, #1
 800b662:	444b      	add	r3, r9
 800b664:	106d      	asrs	r5, r5, #1
 800b666:	429d      	cmp	r5, r3
 800b668:	bf38      	it	cc
 800b66a:	461d      	movcc	r5, r3
 800b66c:	0553      	lsls	r3, r2, #21
 800b66e:	d527      	bpl.n	800b6c0 <__ssputs_r+0x8c>
 800b670:	4629      	mov	r1, r5
 800b672:	f7ff fbd7 	bl	800ae24 <_malloc_r>
 800b676:	4606      	mov	r6, r0
 800b678:	b360      	cbz	r0, 800b6d4 <__ssputs_r+0xa0>
 800b67a:	6921      	ldr	r1, [r4, #16]
 800b67c:	464a      	mov	r2, r9
 800b67e:	f000 fa09 	bl	800ba94 <memcpy>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	6126      	str	r6, [r4, #16]
 800b690:	6165      	str	r5, [r4, #20]
 800b692:	444e      	add	r6, r9
 800b694:	eba5 0509 	sub.w	r5, r5, r9
 800b698:	6026      	str	r6, [r4, #0]
 800b69a:	60a5      	str	r5, [r4, #8]
 800b69c:	463e      	mov	r6, r7
 800b69e:	42be      	cmp	r6, r7
 800b6a0:	d900      	bls.n	800b6a4 <__ssputs_r+0x70>
 800b6a2:	463e      	mov	r6, r7
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	4641      	mov	r1, r8
 800b6aa:	f000 f9c9 	bl	800ba40 <memmove>
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	1b9b      	subs	r3, r3, r6
 800b6b2:	60a3      	str	r3, [r4, #8]
 800b6b4:	6823      	ldr	r3, [r4, #0]
 800b6b6:	4433      	add	r3, r6
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	2000      	movs	r0, #0
 800b6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	f000 fa3b 	bl	800bb3c <_realloc_r>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d1e0      	bne.n	800b68e <__ssputs_r+0x5a>
 800b6cc:	6921      	ldr	r1, [r4, #16]
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f7ff fb34 	bl	800ad3c <_free_r>
 800b6d4:	230c      	movs	r3, #12
 800b6d6:	f8ca 3000 	str.w	r3, [sl]
 800b6da:	89a3      	ldrh	r3, [r4, #12]
 800b6dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e0:	81a3      	strh	r3, [r4, #12]
 800b6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e6:	e7e9      	b.n	800b6bc <__ssputs_r+0x88>

0800b6e8 <_svfiprintf_r>:
 800b6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ec:	4698      	mov	r8, r3
 800b6ee:	898b      	ldrh	r3, [r1, #12]
 800b6f0:	061b      	lsls	r3, r3, #24
 800b6f2:	b09d      	sub	sp, #116	; 0x74
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	460d      	mov	r5, r1
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	d50e      	bpl.n	800b71a <_svfiprintf_r+0x32>
 800b6fc:	690b      	ldr	r3, [r1, #16]
 800b6fe:	b963      	cbnz	r3, 800b71a <_svfiprintf_r+0x32>
 800b700:	2140      	movs	r1, #64	; 0x40
 800b702:	f7ff fb8f 	bl	800ae24 <_malloc_r>
 800b706:	6028      	str	r0, [r5, #0]
 800b708:	6128      	str	r0, [r5, #16]
 800b70a:	b920      	cbnz	r0, 800b716 <_svfiprintf_r+0x2e>
 800b70c:	230c      	movs	r3, #12
 800b70e:	603b      	str	r3, [r7, #0]
 800b710:	f04f 30ff 	mov.w	r0, #4294967295
 800b714:	e0d0      	b.n	800b8b8 <_svfiprintf_r+0x1d0>
 800b716:	2340      	movs	r3, #64	; 0x40
 800b718:	616b      	str	r3, [r5, #20]
 800b71a:	2300      	movs	r3, #0
 800b71c:	9309      	str	r3, [sp, #36]	; 0x24
 800b71e:	2320      	movs	r3, #32
 800b720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b724:	f8cd 800c 	str.w	r8, [sp, #12]
 800b728:	2330      	movs	r3, #48	; 0x30
 800b72a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b8d0 <_svfiprintf_r+0x1e8>
 800b72e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b732:	f04f 0901 	mov.w	r9, #1
 800b736:	4623      	mov	r3, r4
 800b738:	469a      	mov	sl, r3
 800b73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b73e:	b10a      	cbz	r2, 800b744 <_svfiprintf_r+0x5c>
 800b740:	2a25      	cmp	r2, #37	; 0x25
 800b742:	d1f9      	bne.n	800b738 <_svfiprintf_r+0x50>
 800b744:	ebba 0b04 	subs.w	fp, sl, r4
 800b748:	d00b      	beq.n	800b762 <_svfiprintf_r+0x7a>
 800b74a:	465b      	mov	r3, fp
 800b74c:	4622      	mov	r2, r4
 800b74e:	4629      	mov	r1, r5
 800b750:	4638      	mov	r0, r7
 800b752:	f7ff ff6f 	bl	800b634 <__ssputs_r>
 800b756:	3001      	adds	r0, #1
 800b758:	f000 80a9 	beq.w	800b8ae <_svfiprintf_r+0x1c6>
 800b75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b75e:	445a      	add	r2, fp
 800b760:	9209      	str	r2, [sp, #36]	; 0x24
 800b762:	f89a 3000 	ldrb.w	r3, [sl]
 800b766:	2b00      	cmp	r3, #0
 800b768:	f000 80a1 	beq.w	800b8ae <_svfiprintf_r+0x1c6>
 800b76c:	2300      	movs	r3, #0
 800b76e:	f04f 32ff 	mov.w	r2, #4294967295
 800b772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b776:	f10a 0a01 	add.w	sl, sl, #1
 800b77a:	9304      	str	r3, [sp, #16]
 800b77c:	9307      	str	r3, [sp, #28]
 800b77e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b782:	931a      	str	r3, [sp, #104]	; 0x68
 800b784:	4654      	mov	r4, sl
 800b786:	2205      	movs	r2, #5
 800b788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78c:	4850      	ldr	r0, [pc, #320]	; (800b8d0 <_svfiprintf_r+0x1e8>)
 800b78e:	f7f4 fd1f 	bl	80001d0 <memchr>
 800b792:	9a04      	ldr	r2, [sp, #16]
 800b794:	b9d8      	cbnz	r0, 800b7ce <_svfiprintf_r+0xe6>
 800b796:	06d0      	lsls	r0, r2, #27
 800b798:	bf44      	itt	mi
 800b79a:	2320      	movmi	r3, #32
 800b79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7a0:	0711      	lsls	r1, r2, #28
 800b7a2:	bf44      	itt	mi
 800b7a4:	232b      	movmi	r3, #43	; 0x2b
 800b7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800b7b0:	d015      	beq.n	800b7de <_svfiprintf_r+0xf6>
 800b7b2:	9a07      	ldr	r2, [sp, #28]
 800b7b4:	4654      	mov	r4, sl
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	f04f 0c0a 	mov.w	ip, #10
 800b7bc:	4621      	mov	r1, r4
 800b7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7c2:	3b30      	subs	r3, #48	; 0x30
 800b7c4:	2b09      	cmp	r3, #9
 800b7c6:	d94d      	bls.n	800b864 <_svfiprintf_r+0x17c>
 800b7c8:	b1b0      	cbz	r0, 800b7f8 <_svfiprintf_r+0x110>
 800b7ca:	9207      	str	r2, [sp, #28]
 800b7cc:	e014      	b.n	800b7f8 <_svfiprintf_r+0x110>
 800b7ce:	eba0 0308 	sub.w	r3, r0, r8
 800b7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	46a2      	mov	sl, r4
 800b7dc:	e7d2      	b.n	800b784 <_svfiprintf_r+0x9c>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	1d19      	adds	r1, r3, #4
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	9103      	str	r1, [sp, #12]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	bfbb      	ittet	lt
 800b7ea:	425b      	neglt	r3, r3
 800b7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800b7f0:	9307      	strge	r3, [sp, #28]
 800b7f2:	9307      	strlt	r3, [sp, #28]
 800b7f4:	bfb8      	it	lt
 800b7f6:	9204      	strlt	r2, [sp, #16]
 800b7f8:	7823      	ldrb	r3, [r4, #0]
 800b7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800b7fc:	d10c      	bne.n	800b818 <_svfiprintf_r+0x130>
 800b7fe:	7863      	ldrb	r3, [r4, #1]
 800b800:	2b2a      	cmp	r3, #42	; 0x2a
 800b802:	d134      	bne.n	800b86e <_svfiprintf_r+0x186>
 800b804:	9b03      	ldr	r3, [sp, #12]
 800b806:	1d1a      	adds	r2, r3, #4
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	9203      	str	r2, [sp, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	bfb8      	it	lt
 800b810:	f04f 33ff 	movlt.w	r3, #4294967295
 800b814:	3402      	adds	r4, #2
 800b816:	9305      	str	r3, [sp, #20]
 800b818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b8e0 <_svfiprintf_r+0x1f8>
 800b81c:	7821      	ldrb	r1, [r4, #0]
 800b81e:	2203      	movs	r2, #3
 800b820:	4650      	mov	r0, sl
 800b822:	f7f4 fcd5 	bl	80001d0 <memchr>
 800b826:	b138      	cbz	r0, 800b838 <_svfiprintf_r+0x150>
 800b828:	9b04      	ldr	r3, [sp, #16]
 800b82a:	eba0 000a 	sub.w	r0, r0, sl
 800b82e:	2240      	movs	r2, #64	; 0x40
 800b830:	4082      	lsls	r2, r0
 800b832:	4313      	orrs	r3, r2
 800b834:	3401      	adds	r4, #1
 800b836:	9304      	str	r3, [sp, #16]
 800b838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b83c:	4825      	ldr	r0, [pc, #148]	; (800b8d4 <_svfiprintf_r+0x1ec>)
 800b83e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b842:	2206      	movs	r2, #6
 800b844:	f7f4 fcc4 	bl	80001d0 <memchr>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d038      	beq.n	800b8be <_svfiprintf_r+0x1d6>
 800b84c:	4b22      	ldr	r3, [pc, #136]	; (800b8d8 <_svfiprintf_r+0x1f0>)
 800b84e:	bb1b      	cbnz	r3, 800b898 <_svfiprintf_r+0x1b0>
 800b850:	9b03      	ldr	r3, [sp, #12]
 800b852:	3307      	adds	r3, #7
 800b854:	f023 0307 	bic.w	r3, r3, #7
 800b858:	3308      	adds	r3, #8
 800b85a:	9303      	str	r3, [sp, #12]
 800b85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b85e:	4433      	add	r3, r6
 800b860:	9309      	str	r3, [sp, #36]	; 0x24
 800b862:	e768      	b.n	800b736 <_svfiprintf_r+0x4e>
 800b864:	fb0c 3202 	mla	r2, ip, r2, r3
 800b868:	460c      	mov	r4, r1
 800b86a:	2001      	movs	r0, #1
 800b86c:	e7a6      	b.n	800b7bc <_svfiprintf_r+0xd4>
 800b86e:	2300      	movs	r3, #0
 800b870:	3401      	adds	r4, #1
 800b872:	9305      	str	r3, [sp, #20]
 800b874:	4619      	mov	r1, r3
 800b876:	f04f 0c0a 	mov.w	ip, #10
 800b87a:	4620      	mov	r0, r4
 800b87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b880:	3a30      	subs	r2, #48	; 0x30
 800b882:	2a09      	cmp	r2, #9
 800b884:	d903      	bls.n	800b88e <_svfiprintf_r+0x1a6>
 800b886:	2b00      	cmp	r3, #0
 800b888:	d0c6      	beq.n	800b818 <_svfiprintf_r+0x130>
 800b88a:	9105      	str	r1, [sp, #20]
 800b88c:	e7c4      	b.n	800b818 <_svfiprintf_r+0x130>
 800b88e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b892:	4604      	mov	r4, r0
 800b894:	2301      	movs	r3, #1
 800b896:	e7f0      	b.n	800b87a <_svfiprintf_r+0x192>
 800b898:	ab03      	add	r3, sp, #12
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	462a      	mov	r2, r5
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <_svfiprintf_r+0x1f4>)
 800b8a0:	a904      	add	r1, sp, #16
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f7fd fe64 	bl	8009570 <_printf_float>
 800b8a8:	1c42      	adds	r2, r0, #1
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	d1d6      	bne.n	800b85c <_svfiprintf_r+0x174>
 800b8ae:	89ab      	ldrh	r3, [r5, #12]
 800b8b0:	065b      	lsls	r3, r3, #25
 800b8b2:	f53f af2d 	bmi.w	800b710 <_svfiprintf_r+0x28>
 800b8b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8b8:	b01d      	add	sp, #116	; 0x74
 800b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8be:	ab03      	add	r3, sp, #12
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	462a      	mov	r2, r5
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <_svfiprintf_r+0x1f4>)
 800b8c6:	a904      	add	r1, sp, #16
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	f7fe f8f5 	bl	8009ab8 <_printf_i>
 800b8ce:	e7eb      	b.n	800b8a8 <_svfiprintf_r+0x1c0>
 800b8d0:	0800c9fc 	.word	0x0800c9fc
 800b8d4:	0800ca06 	.word	0x0800ca06
 800b8d8:	08009571 	.word	0x08009571
 800b8dc:	0800b635 	.word	0x0800b635
 800b8e0:	0800ca02 	.word	0x0800ca02

0800b8e4 <__sflush_r>:
 800b8e4:	898a      	ldrh	r2, [r1, #12]
 800b8e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	0710      	lsls	r0, r2, #28
 800b8ee:	460c      	mov	r4, r1
 800b8f0:	d458      	bmi.n	800b9a4 <__sflush_r+0xc0>
 800b8f2:	684b      	ldr	r3, [r1, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	dc05      	bgt.n	800b904 <__sflush_r+0x20>
 800b8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	dc02      	bgt.n	800b904 <__sflush_r+0x20>
 800b8fe:	2000      	movs	r0, #0
 800b900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b904:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b906:	2e00      	cmp	r6, #0
 800b908:	d0f9      	beq.n	800b8fe <__sflush_r+0x1a>
 800b90a:	2300      	movs	r3, #0
 800b90c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b910:	682f      	ldr	r7, [r5, #0]
 800b912:	6a21      	ldr	r1, [r4, #32]
 800b914:	602b      	str	r3, [r5, #0]
 800b916:	d032      	beq.n	800b97e <__sflush_r+0x9a>
 800b918:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b91a:	89a3      	ldrh	r3, [r4, #12]
 800b91c:	075a      	lsls	r2, r3, #29
 800b91e:	d505      	bpl.n	800b92c <__sflush_r+0x48>
 800b920:	6863      	ldr	r3, [r4, #4]
 800b922:	1ac0      	subs	r0, r0, r3
 800b924:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b926:	b10b      	cbz	r3, 800b92c <__sflush_r+0x48>
 800b928:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b92a:	1ac0      	subs	r0, r0, r3
 800b92c:	2300      	movs	r3, #0
 800b92e:	4602      	mov	r2, r0
 800b930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b932:	6a21      	ldr	r1, [r4, #32]
 800b934:	4628      	mov	r0, r5
 800b936:	47b0      	blx	r6
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	d106      	bne.n	800b94c <__sflush_r+0x68>
 800b93e:	6829      	ldr	r1, [r5, #0]
 800b940:	291d      	cmp	r1, #29
 800b942:	d82b      	bhi.n	800b99c <__sflush_r+0xb8>
 800b944:	4a29      	ldr	r2, [pc, #164]	; (800b9ec <__sflush_r+0x108>)
 800b946:	410a      	asrs	r2, r1
 800b948:	07d6      	lsls	r6, r2, #31
 800b94a:	d427      	bmi.n	800b99c <__sflush_r+0xb8>
 800b94c:	2200      	movs	r2, #0
 800b94e:	6062      	str	r2, [r4, #4]
 800b950:	04d9      	lsls	r1, r3, #19
 800b952:	6922      	ldr	r2, [r4, #16]
 800b954:	6022      	str	r2, [r4, #0]
 800b956:	d504      	bpl.n	800b962 <__sflush_r+0x7e>
 800b958:	1c42      	adds	r2, r0, #1
 800b95a:	d101      	bne.n	800b960 <__sflush_r+0x7c>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b903      	cbnz	r3, 800b962 <__sflush_r+0x7e>
 800b960:	6560      	str	r0, [r4, #84]	; 0x54
 800b962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b964:	602f      	str	r7, [r5, #0]
 800b966:	2900      	cmp	r1, #0
 800b968:	d0c9      	beq.n	800b8fe <__sflush_r+0x1a>
 800b96a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b96e:	4299      	cmp	r1, r3
 800b970:	d002      	beq.n	800b978 <__sflush_r+0x94>
 800b972:	4628      	mov	r0, r5
 800b974:	f7ff f9e2 	bl	800ad3c <_free_r>
 800b978:	2000      	movs	r0, #0
 800b97a:	6360      	str	r0, [r4, #52]	; 0x34
 800b97c:	e7c0      	b.n	800b900 <__sflush_r+0x1c>
 800b97e:	2301      	movs	r3, #1
 800b980:	4628      	mov	r0, r5
 800b982:	47b0      	blx	r6
 800b984:	1c41      	adds	r1, r0, #1
 800b986:	d1c8      	bne.n	800b91a <__sflush_r+0x36>
 800b988:	682b      	ldr	r3, [r5, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0c5      	beq.n	800b91a <__sflush_r+0x36>
 800b98e:	2b1d      	cmp	r3, #29
 800b990:	d001      	beq.n	800b996 <__sflush_r+0xb2>
 800b992:	2b16      	cmp	r3, #22
 800b994:	d101      	bne.n	800b99a <__sflush_r+0xb6>
 800b996:	602f      	str	r7, [r5, #0]
 800b998:	e7b1      	b.n	800b8fe <__sflush_r+0x1a>
 800b99a:	89a3      	ldrh	r3, [r4, #12]
 800b99c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9a0:	81a3      	strh	r3, [r4, #12]
 800b9a2:	e7ad      	b.n	800b900 <__sflush_r+0x1c>
 800b9a4:	690f      	ldr	r7, [r1, #16]
 800b9a6:	2f00      	cmp	r7, #0
 800b9a8:	d0a9      	beq.n	800b8fe <__sflush_r+0x1a>
 800b9aa:	0793      	lsls	r3, r2, #30
 800b9ac:	680e      	ldr	r6, [r1, #0]
 800b9ae:	bf08      	it	eq
 800b9b0:	694b      	ldreq	r3, [r1, #20]
 800b9b2:	600f      	str	r7, [r1, #0]
 800b9b4:	bf18      	it	ne
 800b9b6:	2300      	movne	r3, #0
 800b9b8:	eba6 0807 	sub.w	r8, r6, r7
 800b9bc:	608b      	str	r3, [r1, #8]
 800b9be:	f1b8 0f00 	cmp.w	r8, #0
 800b9c2:	dd9c      	ble.n	800b8fe <__sflush_r+0x1a>
 800b9c4:	6a21      	ldr	r1, [r4, #32]
 800b9c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9c8:	4643      	mov	r3, r8
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	47b0      	blx	r6
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	dc06      	bgt.n	800b9e2 <__sflush_r+0xfe>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e0:	e78e      	b.n	800b900 <__sflush_r+0x1c>
 800b9e2:	4407      	add	r7, r0
 800b9e4:	eba8 0800 	sub.w	r8, r8, r0
 800b9e8:	e7e9      	b.n	800b9be <__sflush_r+0xda>
 800b9ea:	bf00      	nop
 800b9ec:	dfbffffe 	.word	0xdfbffffe

0800b9f0 <_fflush_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	690b      	ldr	r3, [r1, #16]
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b913      	cbnz	r3, 800ba00 <_fflush_r+0x10>
 800b9fa:	2500      	movs	r5, #0
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	b118      	cbz	r0, 800ba0a <_fflush_r+0x1a>
 800ba02:	6a03      	ldr	r3, [r0, #32]
 800ba04:	b90b      	cbnz	r3, 800ba0a <_fflush_r+0x1a>
 800ba06:	f7fe fa05 	bl	8009e14 <__sinit>
 800ba0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d0f3      	beq.n	800b9fa <_fflush_r+0xa>
 800ba12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba14:	07d0      	lsls	r0, r2, #31
 800ba16:	d404      	bmi.n	800ba22 <_fflush_r+0x32>
 800ba18:	0599      	lsls	r1, r3, #22
 800ba1a:	d402      	bmi.n	800ba22 <_fflush_r+0x32>
 800ba1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba1e:	f7fe fb10 	bl	800a042 <__retarget_lock_acquire_recursive>
 800ba22:	4628      	mov	r0, r5
 800ba24:	4621      	mov	r1, r4
 800ba26:	f7ff ff5d 	bl	800b8e4 <__sflush_r>
 800ba2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba2c:	07da      	lsls	r2, r3, #31
 800ba2e:	4605      	mov	r5, r0
 800ba30:	d4e4      	bmi.n	800b9fc <_fflush_r+0xc>
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	059b      	lsls	r3, r3, #22
 800ba36:	d4e1      	bmi.n	800b9fc <_fflush_r+0xc>
 800ba38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba3a:	f7fe fb03 	bl	800a044 <__retarget_lock_release_recursive>
 800ba3e:	e7dd      	b.n	800b9fc <_fflush_r+0xc>

0800ba40 <memmove>:
 800ba40:	4288      	cmp	r0, r1
 800ba42:	b510      	push	{r4, lr}
 800ba44:	eb01 0402 	add.w	r4, r1, r2
 800ba48:	d902      	bls.n	800ba50 <memmove+0x10>
 800ba4a:	4284      	cmp	r4, r0
 800ba4c:	4623      	mov	r3, r4
 800ba4e:	d807      	bhi.n	800ba60 <memmove+0x20>
 800ba50:	1e43      	subs	r3, r0, #1
 800ba52:	42a1      	cmp	r1, r4
 800ba54:	d008      	beq.n	800ba68 <memmove+0x28>
 800ba56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba5e:	e7f8      	b.n	800ba52 <memmove+0x12>
 800ba60:	4402      	add	r2, r0
 800ba62:	4601      	mov	r1, r0
 800ba64:	428a      	cmp	r2, r1
 800ba66:	d100      	bne.n	800ba6a <memmove+0x2a>
 800ba68:	bd10      	pop	{r4, pc}
 800ba6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba72:	e7f7      	b.n	800ba64 <memmove+0x24>

0800ba74 <_sbrk_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4d06      	ldr	r5, [pc, #24]	; (800ba90 <_sbrk_r+0x1c>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	602b      	str	r3, [r5, #0]
 800ba80:	f7f6 f9b2 	bl	8001de8 <_sbrk>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_sbrk_r+0x1a>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_sbrk_r+0x1a>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	20002220 	.word	0x20002220

0800ba94 <memcpy>:
 800ba94:	440a      	add	r2, r1
 800ba96:	4291      	cmp	r1, r2
 800ba98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba9c:	d100      	bne.n	800baa0 <memcpy+0xc>
 800ba9e:	4770      	bx	lr
 800baa0:	b510      	push	{r4, lr}
 800baa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800baaa:	4291      	cmp	r1, r2
 800baac:	d1f9      	bne.n	800baa2 <memcpy+0xe>
 800baae:	bd10      	pop	{r4, pc}

0800bab0 <__assert_func>:
 800bab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bab2:	4614      	mov	r4, r2
 800bab4:	461a      	mov	r2, r3
 800bab6:	4b09      	ldr	r3, [pc, #36]	; (800badc <__assert_func+0x2c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4605      	mov	r5, r0
 800babc:	68d8      	ldr	r0, [r3, #12]
 800babe:	b14c      	cbz	r4, 800bad4 <__assert_func+0x24>
 800bac0:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <__assert_func+0x30>)
 800bac2:	9100      	str	r1, [sp, #0]
 800bac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bac8:	4906      	ldr	r1, [pc, #24]	; (800bae4 <__assert_func+0x34>)
 800baca:	462b      	mov	r3, r5
 800bacc:	f000 f872 	bl	800bbb4 <fiprintf>
 800bad0:	f000 f882 	bl	800bbd8 <abort>
 800bad4:	4b04      	ldr	r3, [pc, #16]	; (800bae8 <__assert_func+0x38>)
 800bad6:	461c      	mov	r4, r3
 800bad8:	e7f3      	b.n	800bac2 <__assert_func+0x12>
 800bada:	bf00      	nop
 800badc:	20000158 	.word	0x20000158
 800bae0:	0800ca17 	.word	0x0800ca17
 800bae4:	0800ca24 	.word	0x0800ca24
 800bae8:	0800ca52 	.word	0x0800ca52

0800baec <_calloc_r>:
 800baec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800baee:	fba1 2402 	umull	r2, r4, r1, r2
 800baf2:	b94c      	cbnz	r4, 800bb08 <_calloc_r+0x1c>
 800baf4:	4611      	mov	r1, r2
 800baf6:	9201      	str	r2, [sp, #4]
 800baf8:	f7ff f994 	bl	800ae24 <_malloc_r>
 800bafc:	9a01      	ldr	r2, [sp, #4]
 800bafe:	4605      	mov	r5, r0
 800bb00:	b930      	cbnz	r0, 800bb10 <_calloc_r+0x24>
 800bb02:	4628      	mov	r0, r5
 800bb04:	b003      	add	sp, #12
 800bb06:	bd30      	pop	{r4, r5, pc}
 800bb08:	220c      	movs	r2, #12
 800bb0a:	6002      	str	r2, [r0, #0]
 800bb0c:	2500      	movs	r5, #0
 800bb0e:	e7f8      	b.n	800bb02 <_calloc_r+0x16>
 800bb10:	4621      	mov	r1, r4
 800bb12:	f7fe fa18 	bl	8009f46 <memset>
 800bb16:	e7f4      	b.n	800bb02 <_calloc_r+0x16>

0800bb18 <__ascii_mbtowc>:
 800bb18:	b082      	sub	sp, #8
 800bb1a:	b901      	cbnz	r1, 800bb1e <__ascii_mbtowc+0x6>
 800bb1c:	a901      	add	r1, sp, #4
 800bb1e:	b142      	cbz	r2, 800bb32 <__ascii_mbtowc+0x1a>
 800bb20:	b14b      	cbz	r3, 800bb36 <__ascii_mbtowc+0x1e>
 800bb22:	7813      	ldrb	r3, [r2, #0]
 800bb24:	600b      	str	r3, [r1, #0]
 800bb26:	7812      	ldrb	r2, [r2, #0]
 800bb28:	1e10      	subs	r0, r2, #0
 800bb2a:	bf18      	it	ne
 800bb2c:	2001      	movne	r0, #1
 800bb2e:	b002      	add	sp, #8
 800bb30:	4770      	bx	lr
 800bb32:	4610      	mov	r0, r2
 800bb34:	e7fb      	b.n	800bb2e <__ascii_mbtowc+0x16>
 800bb36:	f06f 0001 	mvn.w	r0, #1
 800bb3a:	e7f8      	b.n	800bb2e <__ascii_mbtowc+0x16>

0800bb3c <_realloc_r>:
 800bb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb40:	4680      	mov	r8, r0
 800bb42:	4614      	mov	r4, r2
 800bb44:	460e      	mov	r6, r1
 800bb46:	b921      	cbnz	r1, 800bb52 <_realloc_r+0x16>
 800bb48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	f7ff b969 	b.w	800ae24 <_malloc_r>
 800bb52:	b92a      	cbnz	r2, 800bb60 <_realloc_r+0x24>
 800bb54:	f7ff f8f2 	bl	800ad3c <_free_r>
 800bb58:	4625      	mov	r5, r4
 800bb5a:	4628      	mov	r0, r5
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	f000 f841 	bl	800bbe6 <_malloc_usable_size_r>
 800bb64:	4284      	cmp	r4, r0
 800bb66:	4607      	mov	r7, r0
 800bb68:	d802      	bhi.n	800bb70 <_realloc_r+0x34>
 800bb6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb6e:	d812      	bhi.n	800bb96 <_realloc_r+0x5a>
 800bb70:	4621      	mov	r1, r4
 800bb72:	4640      	mov	r0, r8
 800bb74:	f7ff f956 	bl	800ae24 <_malloc_r>
 800bb78:	4605      	mov	r5, r0
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d0ed      	beq.n	800bb5a <_realloc_r+0x1e>
 800bb7e:	42bc      	cmp	r4, r7
 800bb80:	4622      	mov	r2, r4
 800bb82:	4631      	mov	r1, r6
 800bb84:	bf28      	it	cs
 800bb86:	463a      	movcs	r2, r7
 800bb88:	f7ff ff84 	bl	800ba94 <memcpy>
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	4640      	mov	r0, r8
 800bb90:	f7ff f8d4 	bl	800ad3c <_free_r>
 800bb94:	e7e1      	b.n	800bb5a <_realloc_r+0x1e>
 800bb96:	4635      	mov	r5, r6
 800bb98:	e7df      	b.n	800bb5a <_realloc_r+0x1e>

0800bb9a <__ascii_wctomb>:
 800bb9a:	b149      	cbz	r1, 800bbb0 <__ascii_wctomb+0x16>
 800bb9c:	2aff      	cmp	r2, #255	; 0xff
 800bb9e:	bf85      	ittet	hi
 800bba0:	238a      	movhi	r3, #138	; 0x8a
 800bba2:	6003      	strhi	r3, [r0, #0]
 800bba4:	700a      	strbls	r2, [r1, #0]
 800bba6:	f04f 30ff 	movhi.w	r0, #4294967295
 800bbaa:	bf98      	it	ls
 800bbac:	2001      	movls	r0, #1
 800bbae:	4770      	bx	lr
 800bbb0:	4608      	mov	r0, r1
 800bbb2:	4770      	bx	lr

0800bbb4 <fiprintf>:
 800bbb4:	b40e      	push	{r1, r2, r3}
 800bbb6:	b503      	push	{r0, r1, lr}
 800bbb8:	4601      	mov	r1, r0
 800bbba:	ab03      	add	r3, sp, #12
 800bbbc:	4805      	ldr	r0, [pc, #20]	; (800bbd4 <fiprintf+0x20>)
 800bbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc2:	6800      	ldr	r0, [r0, #0]
 800bbc4:	9301      	str	r3, [sp, #4]
 800bbc6:	f000 f83f 	bl	800bc48 <_vfiprintf_r>
 800bbca:	b002      	add	sp, #8
 800bbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd0:	b003      	add	sp, #12
 800bbd2:	4770      	bx	lr
 800bbd4:	20000158 	.word	0x20000158

0800bbd8 <abort>:
 800bbd8:	b508      	push	{r3, lr}
 800bbda:	2006      	movs	r0, #6
 800bbdc:	f000 fa0c 	bl	800bff8 <raise>
 800bbe0:	2001      	movs	r0, #1
 800bbe2:	f7f6 f889 	bl	8001cf8 <_exit>

0800bbe6 <_malloc_usable_size_r>:
 800bbe6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbea:	1f18      	subs	r0, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	bfbc      	itt	lt
 800bbf0:	580b      	ldrlt	r3, [r1, r0]
 800bbf2:	18c0      	addlt	r0, r0, r3
 800bbf4:	4770      	bx	lr

0800bbf6 <__sfputc_r>:
 800bbf6:	6893      	ldr	r3, [r2, #8]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	b410      	push	{r4}
 800bbfe:	6093      	str	r3, [r2, #8]
 800bc00:	da08      	bge.n	800bc14 <__sfputc_r+0x1e>
 800bc02:	6994      	ldr	r4, [r2, #24]
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	db01      	blt.n	800bc0c <__sfputc_r+0x16>
 800bc08:	290a      	cmp	r1, #10
 800bc0a:	d103      	bne.n	800bc14 <__sfputc_r+0x1e>
 800bc0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc10:	f000 b934 	b.w	800be7c <__swbuf_r>
 800bc14:	6813      	ldr	r3, [r2, #0]
 800bc16:	1c58      	adds	r0, r3, #1
 800bc18:	6010      	str	r0, [r2, #0]
 800bc1a:	7019      	strb	r1, [r3, #0]
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <__sfputs_r>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	4606      	mov	r6, r0
 800bc28:	460f      	mov	r7, r1
 800bc2a:	4614      	mov	r4, r2
 800bc2c:	18d5      	adds	r5, r2, r3
 800bc2e:	42ac      	cmp	r4, r5
 800bc30:	d101      	bne.n	800bc36 <__sfputs_r+0x12>
 800bc32:	2000      	movs	r0, #0
 800bc34:	e007      	b.n	800bc46 <__sfputs_r+0x22>
 800bc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc3a:	463a      	mov	r2, r7
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	f7ff ffda 	bl	800bbf6 <__sfputc_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d1f3      	bne.n	800bc2e <__sfputs_r+0xa>
 800bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc48 <_vfiprintf_r>:
 800bc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	460d      	mov	r5, r1
 800bc4e:	b09d      	sub	sp, #116	; 0x74
 800bc50:	4614      	mov	r4, r2
 800bc52:	4698      	mov	r8, r3
 800bc54:	4606      	mov	r6, r0
 800bc56:	b118      	cbz	r0, 800bc60 <_vfiprintf_r+0x18>
 800bc58:	6a03      	ldr	r3, [r0, #32]
 800bc5a:	b90b      	cbnz	r3, 800bc60 <_vfiprintf_r+0x18>
 800bc5c:	f7fe f8da 	bl	8009e14 <__sinit>
 800bc60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc62:	07d9      	lsls	r1, r3, #31
 800bc64:	d405      	bmi.n	800bc72 <_vfiprintf_r+0x2a>
 800bc66:	89ab      	ldrh	r3, [r5, #12]
 800bc68:	059a      	lsls	r2, r3, #22
 800bc6a:	d402      	bmi.n	800bc72 <_vfiprintf_r+0x2a>
 800bc6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc6e:	f7fe f9e8 	bl	800a042 <__retarget_lock_acquire_recursive>
 800bc72:	89ab      	ldrh	r3, [r5, #12]
 800bc74:	071b      	lsls	r3, r3, #28
 800bc76:	d501      	bpl.n	800bc7c <_vfiprintf_r+0x34>
 800bc78:	692b      	ldr	r3, [r5, #16]
 800bc7a:	b99b      	cbnz	r3, 800bca4 <_vfiprintf_r+0x5c>
 800bc7c:	4629      	mov	r1, r5
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f000 f93a 	bl	800bef8 <__swsetup_r>
 800bc84:	b170      	cbz	r0, 800bca4 <_vfiprintf_r+0x5c>
 800bc86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc88:	07dc      	lsls	r4, r3, #31
 800bc8a:	d504      	bpl.n	800bc96 <_vfiprintf_r+0x4e>
 800bc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc90:	b01d      	add	sp, #116	; 0x74
 800bc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	0598      	lsls	r0, r3, #22
 800bc9a:	d4f7      	bmi.n	800bc8c <_vfiprintf_r+0x44>
 800bc9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc9e:	f7fe f9d1 	bl	800a044 <__retarget_lock_release_recursive>
 800bca2:	e7f3      	b.n	800bc8c <_vfiprintf_r+0x44>
 800bca4:	2300      	movs	r3, #0
 800bca6:	9309      	str	r3, [sp, #36]	; 0x24
 800bca8:	2320      	movs	r3, #32
 800bcaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcb2:	2330      	movs	r3, #48	; 0x30
 800bcb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be68 <_vfiprintf_r+0x220>
 800bcb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcbc:	f04f 0901 	mov.w	r9, #1
 800bcc0:	4623      	mov	r3, r4
 800bcc2:	469a      	mov	sl, r3
 800bcc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcc8:	b10a      	cbz	r2, 800bcce <_vfiprintf_r+0x86>
 800bcca:	2a25      	cmp	r2, #37	; 0x25
 800bccc:	d1f9      	bne.n	800bcc2 <_vfiprintf_r+0x7a>
 800bcce:	ebba 0b04 	subs.w	fp, sl, r4
 800bcd2:	d00b      	beq.n	800bcec <_vfiprintf_r+0xa4>
 800bcd4:	465b      	mov	r3, fp
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	4629      	mov	r1, r5
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f7ff ffa2 	bl	800bc24 <__sfputs_r>
 800bce0:	3001      	adds	r0, #1
 800bce2:	f000 80a9 	beq.w	800be38 <_vfiprintf_r+0x1f0>
 800bce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bce8:	445a      	add	r2, fp
 800bcea:	9209      	str	r2, [sp, #36]	; 0x24
 800bcec:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	f000 80a1 	beq.w	800be38 <_vfiprintf_r+0x1f0>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd00:	f10a 0a01 	add.w	sl, sl, #1
 800bd04:	9304      	str	r3, [sp, #16]
 800bd06:	9307      	str	r3, [sp, #28]
 800bd08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd0c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd0e:	4654      	mov	r4, sl
 800bd10:	2205      	movs	r2, #5
 800bd12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd16:	4854      	ldr	r0, [pc, #336]	; (800be68 <_vfiprintf_r+0x220>)
 800bd18:	f7f4 fa5a 	bl	80001d0 <memchr>
 800bd1c:	9a04      	ldr	r2, [sp, #16]
 800bd1e:	b9d8      	cbnz	r0, 800bd58 <_vfiprintf_r+0x110>
 800bd20:	06d1      	lsls	r1, r2, #27
 800bd22:	bf44      	itt	mi
 800bd24:	2320      	movmi	r3, #32
 800bd26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd2a:	0713      	lsls	r3, r2, #28
 800bd2c:	bf44      	itt	mi
 800bd2e:	232b      	movmi	r3, #43	; 0x2b
 800bd30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd34:	f89a 3000 	ldrb.w	r3, [sl]
 800bd38:	2b2a      	cmp	r3, #42	; 0x2a
 800bd3a:	d015      	beq.n	800bd68 <_vfiprintf_r+0x120>
 800bd3c:	9a07      	ldr	r2, [sp, #28]
 800bd3e:	4654      	mov	r4, sl
 800bd40:	2000      	movs	r0, #0
 800bd42:	f04f 0c0a 	mov.w	ip, #10
 800bd46:	4621      	mov	r1, r4
 800bd48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd4c:	3b30      	subs	r3, #48	; 0x30
 800bd4e:	2b09      	cmp	r3, #9
 800bd50:	d94d      	bls.n	800bdee <_vfiprintf_r+0x1a6>
 800bd52:	b1b0      	cbz	r0, 800bd82 <_vfiprintf_r+0x13a>
 800bd54:	9207      	str	r2, [sp, #28]
 800bd56:	e014      	b.n	800bd82 <_vfiprintf_r+0x13a>
 800bd58:	eba0 0308 	sub.w	r3, r0, r8
 800bd5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd60:	4313      	orrs	r3, r2
 800bd62:	9304      	str	r3, [sp, #16]
 800bd64:	46a2      	mov	sl, r4
 800bd66:	e7d2      	b.n	800bd0e <_vfiprintf_r+0xc6>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	1d19      	adds	r1, r3, #4
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	9103      	str	r1, [sp, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	bfbb      	ittet	lt
 800bd74:	425b      	neglt	r3, r3
 800bd76:	f042 0202 	orrlt.w	r2, r2, #2
 800bd7a:	9307      	strge	r3, [sp, #28]
 800bd7c:	9307      	strlt	r3, [sp, #28]
 800bd7e:	bfb8      	it	lt
 800bd80:	9204      	strlt	r2, [sp, #16]
 800bd82:	7823      	ldrb	r3, [r4, #0]
 800bd84:	2b2e      	cmp	r3, #46	; 0x2e
 800bd86:	d10c      	bne.n	800bda2 <_vfiprintf_r+0x15a>
 800bd88:	7863      	ldrb	r3, [r4, #1]
 800bd8a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8c:	d134      	bne.n	800bdf8 <_vfiprintf_r+0x1b0>
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	1d1a      	adds	r2, r3, #4
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	9203      	str	r2, [sp, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	bfb8      	it	lt
 800bd9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd9e:	3402      	adds	r4, #2
 800bda0:	9305      	str	r3, [sp, #20]
 800bda2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be78 <_vfiprintf_r+0x230>
 800bda6:	7821      	ldrb	r1, [r4, #0]
 800bda8:	2203      	movs	r2, #3
 800bdaa:	4650      	mov	r0, sl
 800bdac:	f7f4 fa10 	bl	80001d0 <memchr>
 800bdb0:	b138      	cbz	r0, 800bdc2 <_vfiprintf_r+0x17a>
 800bdb2:	9b04      	ldr	r3, [sp, #16]
 800bdb4:	eba0 000a 	sub.w	r0, r0, sl
 800bdb8:	2240      	movs	r2, #64	; 0x40
 800bdba:	4082      	lsls	r2, r0
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	3401      	adds	r4, #1
 800bdc0:	9304      	str	r3, [sp, #16]
 800bdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdc6:	4829      	ldr	r0, [pc, #164]	; (800be6c <_vfiprintf_r+0x224>)
 800bdc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdcc:	2206      	movs	r2, #6
 800bdce:	f7f4 f9ff 	bl	80001d0 <memchr>
 800bdd2:	2800      	cmp	r0, #0
 800bdd4:	d03f      	beq.n	800be56 <_vfiprintf_r+0x20e>
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <_vfiprintf_r+0x228>)
 800bdd8:	bb1b      	cbnz	r3, 800be22 <_vfiprintf_r+0x1da>
 800bdda:	9b03      	ldr	r3, [sp, #12]
 800bddc:	3307      	adds	r3, #7
 800bdde:	f023 0307 	bic.w	r3, r3, #7
 800bde2:	3308      	adds	r3, #8
 800bde4:	9303      	str	r3, [sp, #12]
 800bde6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde8:	443b      	add	r3, r7
 800bdea:	9309      	str	r3, [sp, #36]	; 0x24
 800bdec:	e768      	b.n	800bcc0 <_vfiprintf_r+0x78>
 800bdee:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	2001      	movs	r0, #1
 800bdf6:	e7a6      	b.n	800bd46 <_vfiprintf_r+0xfe>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	3401      	adds	r4, #1
 800bdfc:	9305      	str	r3, [sp, #20]
 800bdfe:	4619      	mov	r1, r3
 800be00:	f04f 0c0a 	mov.w	ip, #10
 800be04:	4620      	mov	r0, r4
 800be06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be0a:	3a30      	subs	r2, #48	; 0x30
 800be0c:	2a09      	cmp	r2, #9
 800be0e:	d903      	bls.n	800be18 <_vfiprintf_r+0x1d0>
 800be10:	2b00      	cmp	r3, #0
 800be12:	d0c6      	beq.n	800bda2 <_vfiprintf_r+0x15a>
 800be14:	9105      	str	r1, [sp, #20]
 800be16:	e7c4      	b.n	800bda2 <_vfiprintf_r+0x15a>
 800be18:	fb0c 2101 	mla	r1, ip, r1, r2
 800be1c:	4604      	mov	r4, r0
 800be1e:	2301      	movs	r3, #1
 800be20:	e7f0      	b.n	800be04 <_vfiprintf_r+0x1bc>
 800be22:	ab03      	add	r3, sp, #12
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	462a      	mov	r2, r5
 800be28:	4b12      	ldr	r3, [pc, #72]	; (800be74 <_vfiprintf_r+0x22c>)
 800be2a:	a904      	add	r1, sp, #16
 800be2c:	4630      	mov	r0, r6
 800be2e:	f7fd fb9f 	bl	8009570 <_printf_float>
 800be32:	4607      	mov	r7, r0
 800be34:	1c78      	adds	r0, r7, #1
 800be36:	d1d6      	bne.n	800bde6 <_vfiprintf_r+0x19e>
 800be38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be3a:	07d9      	lsls	r1, r3, #31
 800be3c:	d405      	bmi.n	800be4a <_vfiprintf_r+0x202>
 800be3e:	89ab      	ldrh	r3, [r5, #12]
 800be40:	059a      	lsls	r2, r3, #22
 800be42:	d402      	bmi.n	800be4a <_vfiprintf_r+0x202>
 800be44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be46:	f7fe f8fd 	bl	800a044 <__retarget_lock_release_recursive>
 800be4a:	89ab      	ldrh	r3, [r5, #12]
 800be4c:	065b      	lsls	r3, r3, #25
 800be4e:	f53f af1d 	bmi.w	800bc8c <_vfiprintf_r+0x44>
 800be52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be54:	e71c      	b.n	800bc90 <_vfiprintf_r+0x48>
 800be56:	ab03      	add	r3, sp, #12
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	462a      	mov	r2, r5
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_vfiprintf_r+0x22c>)
 800be5e:	a904      	add	r1, sp, #16
 800be60:	4630      	mov	r0, r6
 800be62:	f7fd fe29 	bl	8009ab8 <_printf_i>
 800be66:	e7e4      	b.n	800be32 <_vfiprintf_r+0x1ea>
 800be68:	0800c9fc 	.word	0x0800c9fc
 800be6c:	0800ca06 	.word	0x0800ca06
 800be70:	08009571 	.word	0x08009571
 800be74:	0800bc25 	.word	0x0800bc25
 800be78:	0800ca02 	.word	0x0800ca02

0800be7c <__swbuf_r>:
 800be7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7e:	460e      	mov	r6, r1
 800be80:	4614      	mov	r4, r2
 800be82:	4605      	mov	r5, r0
 800be84:	b118      	cbz	r0, 800be8e <__swbuf_r+0x12>
 800be86:	6a03      	ldr	r3, [r0, #32]
 800be88:	b90b      	cbnz	r3, 800be8e <__swbuf_r+0x12>
 800be8a:	f7fd ffc3 	bl	8009e14 <__sinit>
 800be8e:	69a3      	ldr	r3, [r4, #24]
 800be90:	60a3      	str	r3, [r4, #8]
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	071a      	lsls	r2, r3, #28
 800be96:	d525      	bpl.n	800bee4 <__swbuf_r+0x68>
 800be98:	6923      	ldr	r3, [r4, #16]
 800be9a:	b31b      	cbz	r3, 800bee4 <__swbuf_r+0x68>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	6922      	ldr	r2, [r4, #16]
 800bea0:	1a98      	subs	r0, r3, r2
 800bea2:	6963      	ldr	r3, [r4, #20]
 800bea4:	b2f6      	uxtb	r6, r6
 800bea6:	4283      	cmp	r3, r0
 800bea8:	4637      	mov	r7, r6
 800beaa:	dc04      	bgt.n	800beb6 <__swbuf_r+0x3a>
 800beac:	4621      	mov	r1, r4
 800beae:	4628      	mov	r0, r5
 800beb0:	f7ff fd9e 	bl	800b9f0 <_fflush_r>
 800beb4:	b9e0      	cbnz	r0, 800bef0 <__swbuf_r+0x74>
 800beb6:	68a3      	ldr	r3, [r4, #8]
 800beb8:	3b01      	subs	r3, #1
 800beba:	60a3      	str	r3, [r4, #8]
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	6022      	str	r2, [r4, #0]
 800bec2:	701e      	strb	r6, [r3, #0]
 800bec4:	6962      	ldr	r2, [r4, #20]
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	429a      	cmp	r2, r3
 800beca:	d004      	beq.n	800bed6 <__swbuf_r+0x5a>
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	07db      	lsls	r3, r3, #31
 800bed0:	d506      	bpl.n	800bee0 <__swbuf_r+0x64>
 800bed2:	2e0a      	cmp	r6, #10
 800bed4:	d104      	bne.n	800bee0 <__swbuf_r+0x64>
 800bed6:	4621      	mov	r1, r4
 800bed8:	4628      	mov	r0, r5
 800beda:	f7ff fd89 	bl	800b9f0 <_fflush_r>
 800bede:	b938      	cbnz	r0, 800bef0 <__swbuf_r+0x74>
 800bee0:	4638      	mov	r0, r7
 800bee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee4:	4621      	mov	r1, r4
 800bee6:	4628      	mov	r0, r5
 800bee8:	f000 f806 	bl	800bef8 <__swsetup_r>
 800beec:	2800      	cmp	r0, #0
 800beee:	d0d5      	beq.n	800be9c <__swbuf_r+0x20>
 800bef0:	f04f 37ff 	mov.w	r7, #4294967295
 800bef4:	e7f4      	b.n	800bee0 <__swbuf_r+0x64>
	...

0800bef8 <__swsetup_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4b2a      	ldr	r3, [pc, #168]	; (800bfa4 <__swsetup_r+0xac>)
 800befc:	4605      	mov	r5, r0
 800befe:	6818      	ldr	r0, [r3, #0]
 800bf00:	460c      	mov	r4, r1
 800bf02:	b118      	cbz	r0, 800bf0c <__swsetup_r+0x14>
 800bf04:	6a03      	ldr	r3, [r0, #32]
 800bf06:	b90b      	cbnz	r3, 800bf0c <__swsetup_r+0x14>
 800bf08:	f7fd ff84 	bl	8009e14 <__sinit>
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf12:	0718      	lsls	r0, r3, #28
 800bf14:	d422      	bmi.n	800bf5c <__swsetup_r+0x64>
 800bf16:	06d9      	lsls	r1, r3, #27
 800bf18:	d407      	bmi.n	800bf2a <__swsetup_r+0x32>
 800bf1a:	2309      	movs	r3, #9
 800bf1c:	602b      	str	r3, [r5, #0]
 800bf1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf22:	81a3      	strh	r3, [r4, #12]
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	e034      	b.n	800bf94 <__swsetup_r+0x9c>
 800bf2a:	0758      	lsls	r0, r3, #29
 800bf2c:	d512      	bpl.n	800bf54 <__swsetup_r+0x5c>
 800bf2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf30:	b141      	cbz	r1, 800bf44 <__swsetup_r+0x4c>
 800bf32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf36:	4299      	cmp	r1, r3
 800bf38:	d002      	beq.n	800bf40 <__swsetup_r+0x48>
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	f7fe fefe 	bl	800ad3c <_free_r>
 800bf40:	2300      	movs	r3, #0
 800bf42:	6363      	str	r3, [r4, #52]	; 0x34
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	6063      	str	r3, [r4, #4]
 800bf50:	6923      	ldr	r3, [r4, #16]
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f043 0308 	orr.w	r3, r3, #8
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	6923      	ldr	r3, [r4, #16]
 800bf5e:	b94b      	cbnz	r3, 800bf74 <__swsetup_r+0x7c>
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf6a:	d003      	beq.n	800bf74 <__swsetup_r+0x7c>
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 f884 	bl	800c07c <__smakebuf_r>
 800bf74:	89a0      	ldrh	r0, [r4, #12]
 800bf76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf7a:	f010 0301 	ands.w	r3, r0, #1
 800bf7e:	d00a      	beq.n	800bf96 <__swsetup_r+0x9e>
 800bf80:	2300      	movs	r3, #0
 800bf82:	60a3      	str	r3, [r4, #8]
 800bf84:	6963      	ldr	r3, [r4, #20]
 800bf86:	425b      	negs	r3, r3
 800bf88:	61a3      	str	r3, [r4, #24]
 800bf8a:	6923      	ldr	r3, [r4, #16]
 800bf8c:	b943      	cbnz	r3, 800bfa0 <__swsetup_r+0xa8>
 800bf8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf92:	d1c4      	bne.n	800bf1e <__swsetup_r+0x26>
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	0781      	lsls	r1, r0, #30
 800bf98:	bf58      	it	pl
 800bf9a:	6963      	ldrpl	r3, [r4, #20]
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	e7f4      	b.n	800bf8a <__swsetup_r+0x92>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e7f7      	b.n	800bf94 <__swsetup_r+0x9c>
 800bfa4:	20000158 	.word	0x20000158

0800bfa8 <_raise_r>:
 800bfa8:	291f      	cmp	r1, #31
 800bfaa:	b538      	push	{r3, r4, r5, lr}
 800bfac:	4604      	mov	r4, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	d904      	bls.n	800bfbc <_raise_r+0x14>
 800bfb2:	2316      	movs	r3, #22
 800bfb4:	6003      	str	r3, [r0, #0]
 800bfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bfbe:	b112      	cbz	r2, 800bfc6 <_raise_r+0x1e>
 800bfc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfc4:	b94b      	cbnz	r3, 800bfda <_raise_r+0x32>
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f000 f830 	bl	800c02c <_getpid_r>
 800bfcc:	462a      	mov	r2, r5
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd6:	f000 b817 	b.w	800c008 <_kill_r>
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d00a      	beq.n	800bff4 <_raise_r+0x4c>
 800bfde:	1c59      	adds	r1, r3, #1
 800bfe0:	d103      	bne.n	800bfea <_raise_r+0x42>
 800bfe2:	2316      	movs	r3, #22
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	e7e7      	b.n	800bfba <_raise_r+0x12>
 800bfea:	2400      	movs	r4, #0
 800bfec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bff0:	4628      	mov	r0, r5
 800bff2:	4798      	blx	r3
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7e0      	b.n	800bfba <_raise_r+0x12>

0800bff8 <raise>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	; (800c004 <raise+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f7ff bfd3 	b.w	800bfa8 <_raise_r>
 800c002:	bf00      	nop
 800c004:	20000158 	.word	0x20000158

0800c008 <_kill_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	; (800c028 <_kill_r+0x20>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	4611      	mov	r1, r2
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	f7f5 fe5f 	bl	8001cd8 <_kill>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d102      	bne.n	800c024 <_kill_r+0x1c>
 800c01e:	682b      	ldr	r3, [r5, #0]
 800c020:	b103      	cbz	r3, 800c024 <_kill_r+0x1c>
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	bf00      	nop
 800c028:	20002220 	.word	0x20002220

0800c02c <_getpid_r>:
 800c02c:	f7f5 be4c 	b.w	8001cc8 <_getpid>

0800c030 <__swhatbuf_r>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	460c      	mov	r4, r1
 800c034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c038:	2900      	cmp	r1, #0
 800c03a:	b096      	sub	sp, #88	; 0x58
 800c03c:	4615      	mov	r5, r2
 800c03e:	461e      	mov	r6, r3
 800c040:	da0d      	bge.n	800c05e <__swhatbuf_r+0x2e>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c048:	f04f 0100 	mov.w	r1, #0
 800c04c:	bf0c      	ite	eq
 800c04e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c052:	2340      	movne	r3, #64	; 0x40
 800c054:	2000      	movs	r0, #0
 800c056:	6031      	str	r1, [r6, #0]
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	b016      	add	sp, #88	; 0x58
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	466a      	mov	r2, sp
 800c060:	f000 f848 	bl	800c0f4 <_fstat_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	dbec      	blt.n	800c042 <__swhatbuf_r+0x12>
 800c068:	9901      	ldr	r1, [sp, #4]
 800c06a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c06e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c072:	4259      	negs	r1, r3
 800c074:	4159      	adcs	r1, r3
 800c076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c07a:	e7eb      	b.n	800c054 <__swhatbuf_r+0x24>

0800c07c <__smakebuf_r>:
 800c07c:	898b      	ldrh	r3, [r1, #12]
 800c07e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c080:	079d      	lsls	r5, r3, #30
 800c082:	4606      	mov	r6, r0
 800c084:	460c      	mov	r4, r1
 800c086:	d507      	bpl.n	800c098 <__smakebuf_r+0x1c>
 800c088:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	2301      	movs	r3, #1
 800c092:	6163      	str	r3, [r4, #20]
 800c094:	b002      	add	sp, #8
 800c096:	bd70      	pop	{r4, r5, r6, pc}
 800c098:	ab01      	add	r3, sp, #4
 800c09a:	466a      	mov	r2, sp
 800c09c:	f7ff ffc8 	bl	800c030 <__swhatbuf_r>
 800c0a0:	9900      	ldr	r1, [sp, #0]
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f7fe febd 	bl	800ae24 <_malloc_r>
 800c0aa:	b948      	cbnz	r0, 800c0c0 <__smakebuf_r+0x44>
 800c0ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b0:	059a      	lsls	r2, r3, #22
 800c0b2:	d4ef      	bmi.n	800c094 <__smakebuf_r+0x18>
 800c0b4:	f023 0303 	bic.w	r3, r3, #3
 800c0b8:	f043 0302 	orr.w	r3, r3, #2
 800c0bc:	81a3      	strh	r3, [r4, #12]
 800c0be:	e7e3      	b.n	800c088 <__smakebuf_r+0xc>
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	6020      	str	r0, [r4, #0]
 800c0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	9b00      	ldr	r3, [sp, #0]
 800c0cc:	6163      	str	r3, [r4, #20]
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	6120      	str	r0, [r4, #16]
 800c0d2:	b15b      	cbz	r3, 800c0ec <__smakebuf_r+0x70>
 800c0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f81d 	bl	800c118 <_isatty_r>
 800c0de:	b128      	cbz	r0, 800c0ec <__smakebuf_r+0x70>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	f023 0303 	bic.w	r3, r3, #3
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	431d      	orrs	r5, r3
 800c0f0:	81a5      	strh	r5, [r4, #12]
 800c0f2:	e7cf      	b.n	800c094 <__smakebuf_r+0x18>

0800c0f4 <_fstat_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	; (800c114 <_fstat_r+0x20>)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	4611      	mov	r1, r2
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	f7f5 fe48 	bl	8001d96 <_fstat>
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	d102      	bne.n	800c110 <_fstat_r+0x1c>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	b103      	cbz	r3, 800c110 <_fstat_r+0x1c>
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	20002220 	.word	0x20002220

0800c118 <_isatty_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	; (800c134 <_isatty_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f5 fe47 	bl	8001db6 <_isatty>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_isatty_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_isatty_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	20002220 	.word	0x20002220

0800c138 <log>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	ed2d 8b02 	vpush	{d8}
 800c13e:	ec55 4b10 	vmov	r4, r5, d0
 800c142:	f000 f949 	bl	800c3d8 <__ieee754_log>
 800c146:	4622      	mov	r2, r4
 800c148:	462b      	mov	r3, r5
 800c14a:	4620      	mov	r0, r4
 800c14c:	4629      	mov	r1, r5
 800c14e:	eeb0 8a40 	vmov.f32	s16, s0
 800c152:	eef0 8a60 	vmov.f32	s17, s1
 800c156:	f7f4 fce9 	bl	8000b2c <__aeabi_dcmpun>
 800c15a:	b998      	cbnz	r0, 800c184 <log+0x4c>
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	4620      	mov	r0, r4
 800c162:	4629      	mov	r1, r5
 800c164:	f7f4 fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 800c168:	b960      	cbnz	r0, 800c184 <log+0x4c>
 800c16a:	2200      	movs	r2, #0
 800c16c:	2300      	movs	r3, #0
 800c16e:	4620      	mov	r0, r4
 800c170:	4629      	mov	r1, r5
 800c172:	f7f4 fca9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c176:	b160      	cbz	r0, 800c192 <log+0x5a>
 800c178:	f7fd ff38 	bl	8009fec <__errno>
 800c17c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800c1a8 <log+0x70>
 800c180:	2322      	movs	r3, #34	; 0x22
 800c182:	6003      	str	r3, [r0, #0]
 800c184:	eeb0 0a48 	vmov.f32	s0, s16
 800c188:	eef0 0a68 	vmov.f32	s1, s17
 800c18c:	ecbd 8b02 	vpop	{d8}
 800c190:	bd38      	pop	{r3, r4, r5, pc}
 800c192:	f7fd ff2b 	bl	8009fec <__errno>
 800c196:	ecbd 8b02 	vpop	{d8}
 800c19a:	2321      	movs	r3, #33	; 0x21
 800c19c:	6003      	str	r3, [r0, #0]
 800c19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1a2:	4803      	ldr	r0, [pc, #12]	; (800c1b0 <log+0x78>)
 800c1a4:	f000 b834 	b.w	800c210 <nan>
 800c1a8:	00000000 	.word	0x00000000
 800c1ac:	fff00000 	.word	0xfff00000
 800c1b0:	0800ca52 	.word	0x0800ca52

0800c1b4 <sqrt>:
 800c1b4:	b538      	push	{r3, r4, r5, lr}
 800c1b6:	ed2d 8b02 	vpush	{d8}
 800c1ba:	ec55 4b10 	vmov	r4, r5, d0
 800c1be:	f000 f82f 	bl	800c220 <__ieee754_sqrt>
 800c1c2:	4622      	mov	r2, r4
 800c1c4:	462b      	mov	r3, r5
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	4629      	mov	r1, r5
 800c1ca:	eeb0 8a40 	vmov.f32	s16, s0
 800c1ce:	eef0 8a60 	vmov.f32	s17, s1
 800c1d2:	f7f4 fcab 	bl	8000b2c <__aeabi_dcmpun>
 800c1d6:	b990      	cbnz	r0, 800c1fe <sqrt+0x4a>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	2300      	movs	r3, #0
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 fc7c 	bl	8000adc <__aeabi_dcmplt>
 800c1e4:	b158      	cbz	r0, 800c1fe <sqrt+0x4a>
 800c1e6:	f7fd ff01 	bl	8009fec <__errno>
 800c1ea:	2321      	movs	r3, #33	; 0x21
 800c1ec:	6003      	str	r3, [r0, #0]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	f7f4 fb29 	bl	800084c <__aeabi_ddiv>
 800c1fa:	ec41 0b18 	vmov	d8, r0, r1
 800c1fe:	eeb0 0a48 	vmov.f32	s0, s16
 800c202:	eef0 0a68 	vmov.f32	s1, s17
 800c206:	ecbd 8b02 	vpop	{d8}
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	0000      	movs	r0, r0
	...

0800c210 <nan>:
 800c210:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c218 <nan+0x8>
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	00000000 	.word	0x00000000
 800c21c:	7ff80000 	.word	0x7ff80000

0800c220 <__ieee754_sqrt>:
 800c220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c224:	ec55 4b10 	vmov	r4, r5, d0
 800c228:	4e67      	ldr	r6, [pc, #412]	; (800c3c8 <__ieee754_sqrt+0x1a8>)
 800c22a:	43ae      	bics	r6, r5
 800c22c:	ee10 0a10 	vmov	r0, s0
 800c230:	ee10 2a10 	vmov	r2, s0
 800c234:	4629      	mov	r1, r5
 800c236:	462b      	mov	r3, r5
 800c238:	d10d      	bne.n	800c256 <__ieee754_sqrt+0x36>
 800c23a:	f7f4 f9dd 	bl	80005f8 <__aeabi_dmul>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4620      	mov	r0, r4
 800c244:	4629      	mov	r1, r5
 800c246:	f7f4 f821 	bl	800028c <__adddf3>
 800c24a:	4604      	mov	r4, r0
 800c24c:	460d      	mov	r5, r1
 800c24e:	ec45 4b10 	vmov	d0, r4, r5
 800c252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c256:	2d00      	cmp	r5, #0
 800c258:	dc0b      	bgt.n	800c272 <__ieee754_sqrt+0x52>
 800c25a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c25e:	4326      	orrs	r6, r4
 800c260:	d0f5      	beq.n	800c24e <__ieee754_sqrt+0x2e>
 800c262:	b135      	cbz	r5, 800c272 <__ieee754_sqrt+0x52>
 800c264:	f7f4 f810 	bl	8000288 <__aeabi_dsub>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	f7f4 faee 	bl	800084c <__aeabi_ddiv>
 800c270:	e7eb      	b.n	800c24a <__ieee754_sqrt+0x2a>
 800c272:	1509      	asrs	r1, r1, #20
 800c274:	f000 808d 	beq.w	800c392 <__ieee754_sqrt+0x172>
 800c278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c27c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c284:	07c9      	lsls	r1, r1, #31
 800c286:	bf5c      	itt	pl
 800c288:	005b      	lslpl	r3, r3, #1
 800c28a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c28e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c292:	bf58      	it	pl
 800c294:	0052      	lslpl	r2, r2, #1
 800c296:	2500      	movs	r5, #0
 800c298:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c29c:	1076      	asrs	r6, r6, #1
 800c29e:	0052      	lsls	r2, r2, #1
 800c2a0:	f04f 0e16 	mov.w	lr, #22
 800c2a4:	46ac      	mov	ip, r5
 800c2a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2aa:	eb0c 0001 	add.w	r0, ip, r1
 800c2ae:	4298      	cmp	r0, r3
 800c2b0:	bfde      	ittt	le
 800c2b2:	1a1b      	suble	r3, r3, r0
 800c2b4:	eb00 0c01 	addle.w	ip, r0, r1
 800c2b8:	186d      	addle	r5, r5, r1
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	f1be 0e01 	subs.w	lr, lr, #1
 800c2c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c2c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c2c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c2cc:	d1ed      	bne.n	800c2aa <__ieee754_sqrt+0x8a>
 800c2ce:	4674      	mov	r4, lr
 800c2d0:	2720      	movs	r7, #32
 800c2d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c2d6:	4563      	cmp	r3, ip
 800c2d8:	eb01 000e 	add.w	r0, r1, lr
 800c2dc:	dc02      	bgt.n	800c2e4 <__ieee754_sqrt+0xc4>
 800c2de:	d113      	bne.n	800c308 <__ieee754_sqrt+0xe8>
 800c2e0:	4290      	cmp	r0, r2
 800c2e2:	d811      	bhi.n	800c308 <__ieee754_sqrt+0xe8>
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	eb00 0e01 	add.w	lr, r0, r1
 800c2ea:	da57      	bge.n	800c39c <__ieee754_sqrt+0x17c>
 800c2ec:	f1be 0f00 	cmp.w	lr, #0
 800c2f0:	db54      	blt.n	800c39c <__ieee754_sqrt+0x17c>
 800c2f2:	f10c 0801 	add.w	r8, ip, #1
 800c2f6:	eba3 030c 	sub.w	r3, r3, ip
 800c2fa:	4290      	cmp	r0, r2
 800c2fc:	bf88      	it	hi
 800c2fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c302:	1a12      	subs	r2, r2, r0
 800c304:	440c      	add	r4, r1
 800c306:	46c4      	mov	ip, r8
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	3f01      	subs	r7, #1
 800c30c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c310:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c314:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c318:	d1dd      	bne.n	800c2d6 <__ieee754_sqrt+0xb6>
 800c31a:	4313      	orrs	r3, r2
 800c31c:	d01b      	beq.n	800c356 <__ieee754_sqrt+0x136>
 800c31e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c3cc <__ieee754_sqrt+0x1ac>
 800c322:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c3d0 <__ieee754_sqrt+0x1b0>
 800c326:	e9da 0100 	ldrd	r0, r1, [sl]
 800c32a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c32e:	f7f3 ffab 	bl	8000288 <__aeabi_dsub>
 800c332:	e9da 8900 	ldrd	r8, r9, [sl]
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4640      	mov	r0, r8
 800c33c:	4649      	mov	r1, r9
 800c33e:	f7f4 fbd7 	bl	8000af0 <__aeabi_dcmple>
 800c342:	b140      	cbz	r0, 800c356 <__ieee754_sqrt+0x136>
 800c344:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c348:	e9da 0100 	ldrd	r0, r1, [sl]
 800c34c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c350:	d126      	bne.n	800c3a0 <__ieee754_sqrt+0x180>
 800c352:	3501      	adds	r5, #1
 800c354:	463c      	mov	r4, r7
 800c356:	106a      	asrs	r2, r5, #1
 800c358:	0863      	lsrs	r3, r4, #1
 800c35a:	07e9      	lsls	r1, r5, #31
 800c35c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c360:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c364:	bf48      	it	mi
 800c366:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c36a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c36e:	461c      	mov	r4, r3
 800c370:	e76d      	b.n	800c24e <__ieee754_sqrt+0x2e>
 800c372:	0ad3      	lsrs	r3, r2, #11
 800c374:	3815      	subs	r0, #21
 800c376:	0552      	lsls	r2, r2, #21
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d0fa      	beq.n	800c372 <__ieee754_sqrt+0x152>
 800c37c:	02dc      	lsls	r4, r3, #11
 800c37e:	d50a      	bpl.n	800c396 <__ieee754_sqrt+0x176>
 800c380:	f1c1 0420 	rsb	r4, r1, #32
 800c384:	fa22 f404 	lsr.w	r4, r2, r4
 800c388:	1e4d      	subs	r5, r1, #1
 800c38a:	408a      	lsls	r2, r1
 800c38c:	4323      	orrs	r3, r4
 800c38e:	1b41      	subs	r1, r0, r5
 800c390:	e772      	b.n	800c278 <__ieee754_sqrt+0x58>
 800c392:	4608      	mov	r0, r1
 800c394:	e7f0      	b.n	800c378 <__ieee754_sqrt+0x158>
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	3101      	adds	r1, #1
 800c39a:	e7ef      	b.n	800c37c <__ieee754_sqrt+0x15c>
 800c39c:	46e0      	mov	r8, ip
 800c39e:	e7aa      	b.n	800c2f6 <__ieee754_sqrt+0xd6>
 800c3a0:	f7f3 ff74 	bl	800028c <__adddf3>
 800c3a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	f7f4 fb94 	bl	8000adc <__aeabi_dcmplt>
 800c3b4:	b120      	cbz	r0, 800c3c0 <__ieee754_sqrt+0x1a0>
 800c3b6:	1ca0      	adds	r0, r4, #2
 800c3b8:	bf08      	it	eq
 800c3ba:	3501      	addeq	r5, #1
 800c3bc:	3402      	adds	r4, #2
 800c3be:	e7ca      	b.n	800c356 <__ieee754_sqrt+0x136>
 800c3c0:	3401      	adds	r4, #1
 800c3c2:	f024 0401 	bic.w	r4, r4, #1
 800c3c6:	e7c6      	b.n	800c356 <__ieee754_sqrt+0x136>
 800c3c8:	7ff00000 	.word	0x7ff00000
 800c3cc:	200002c8 	.word	0x200002c8
 800c3d0:	200002d0 	.word	0x200002d0
 800c3d4:	00000000 	.word	0x00000000

0800c3d8 <__ieee754_log>:
 800c3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3dc:	ec51 0b10 	vmov	r0, r1, d0
 800c3e0:	ed2d 8b04 	vpush	{d8-d9}
 800c3e4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	460d      	mov	r5, r1
 800c3ec:	da29      	bge.n	800c442 <__ieee754_log+0x6a>
 800c3ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3f2:	4303      	orrs	r3, r0
 800c3f4:	ee10 2a10 	vmov	r2, s0
 800c3f8:	d10c      	bne.n	800c414 <__ieee754_log+0x3c>
 800c3fa:	49cf      	ldr	r1, [pc, #828]	; (800c738 <__ieee754_log+0x360>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	2300      	movs	r3, #0
 800c400:	2000      	movs	r0, #0
 800c402:	f7f4 fa23 	bl	800084c <__aeabi_ddiv>
 800c406:	ec41 0b10 	vmov	d0, r0, r1
 800c40a:	b003      	add	sp, #12
 800c40c:	ecbd 8b04 	vpop	{d8-d9}
 800c410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c414:	2900      	cmp	r1, #0
 800c416:	da05      	bge.n	800c424 <__ieee754_log+0x4c>
 800c418:	460b      	mov	r3, r1
 800c41a:	f7f3 ff35 	bl	8000288 <__aeabi_dsub>
 800c41e:	2200      	movs	r2, #0
 800c420:	2300      	movs	r3, #0
 800c422:	e7ee      	b.n	800c402 <__ieee754_log+0x2a>
 800c424:	4bc5      	ldr	r3, [pc, #788]	; (800c73c <__ieee754_log+0x364>)
 800c426:	2200      	movs	r2, #0
 800c428:	f7f4 f8e6 	bl	80005f8 <__aeabi_dmul>
 800c42c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800c430:	460d      	mov	r5, r1
 800c432:	4ac3      	ldr	r2, [pc, #780]	; (800c740 <__ieee754_log+0x368>)
 800c434:	4295      	cmp	r5, r2
 800c436:	dd06      	ble.n	800c446 <__ieee754_log+0x6e>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	f7f3 ff26 	bl	800028c <__adddf3>
 800c440:	e7e1      	b.n	800c406 <__ieee754_log+0x2e>
 800c442:	2300      	movs	r3, #0
 800c444:	e7f5      	b.n	800c432 <__ieee754_log+0x5a>
 800c446:	152c      	asrs	r4, r5, #20
 800c448:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c44c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c450:	441c      	add	r4, r3
 800c452:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800c456:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800c45a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c45e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800c462:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800c466:	ea42 0105 	orr.w	r1, r2, r5
 800c46a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800c46e:	2200      	movs	r2, #0
 800c470:	4bb4      	ldr	r3, [pc, #720]	; (800c744 <__ieee754_log+0x36c>)
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	1cab      	adds	r3, r5, #2
 800c478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c47c:	2b02      	cmp	r3, #2
 800c47e:	4682      	mov	sl, r0
 800c480:	468b      	mov	fp, r1
 800c482:	f04f 0200 	mov.w	r2, #0
 800c486:	dc53      	bgt.n	800c530 <__ieee754_log+0x158>
 800c488:	2300      	movs	r3, #0
 800c48a:	f7f4 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c48e:	b1d0      	cbz	r0, 800c4c6 <__ieee754_log+0xee>
 800c490:	2c00      	cmp	r4, #0
 800c492:	f000 8122 	beq.w	800c6da <__ieee754_log+0x302>
 800c496:	4620      	mov	r0, r4
 800c498:	f7f4 f844 	bl	8000524 <__aeabi_i2d>
 800c49c:	a390      	add	r3, pc, #576	; (adr r3, 800c6e0 <__ieee754_log+0x308>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460f      	mov	r7, r1
 800c4a6:	f7f4 f8a7 	bl	80005f8 <__aeabi_dmul>
 800c4aa:	a38f      	add	r3, pc, #572	; (adr r3, 800c6e8 <__ieee754_log+0x310>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	4604      	mov	r4, r0
 800c4b2:	460d      	mov	r5, r1
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7f4 f89e 	bl	80005f8 <__aeabi_dmul>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	460b      	mov	r3, r1
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	e7ba      	b.n	800c43c <__ieee754_log+0x64>
 800c4c6:	a38a      	add	r3, pc, #552	; (adr r3, 800c6f0 <__ieee754_log+0x318>)
 800c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4cc:	4650      	mov	r0, sl
 800c4ce:	4659      	mov	r1, fp
 800c4d0:	f7f4 f892 	bl	80005f8 <__aeabi_dmul>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	2000      	movs	r0, #0
 800c4da:	499b      	ldr	r1, [pc, #620]	; (800c748 <__ieee754_log+0x370>)
 800c4dc:	f7f3 fed4 	bl	8000288 <__aeabi_dsub>
 800c4e0:	4652      	mov	r2, sl
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	460f      	mov	r7, r1
 800c4e6:	465b      	mov	r3, fp
 800c4e8:	4650      	mov	r0, sl
 800c4ea:	4659      	mov	r1, fp
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	f7f4 f87e 	bl	80005f8 <__aeabi_dmul>
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	460f      	mov	r7, r1
 800c500:	b914      	cbnz	r4, 800c508 <__ieee754_log+0x130>
 800c502:	4632      	mov	r2, r6
 800c504:	463b      	mov	r3, r7
 800c506:	e0a2      	b.n	800c64e <__ieee754_log+0x276>
 800c508:	4620      	mov	r0, r4
 800c50a:	f7f4 f80b 	bl	8000524 <__aeabi_i2d>
 800c50e:	a374      	add	r3, pc, #464	; (adr r3, 800c6e0 <__ieee754_log+0x308>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	4680      	mov	r8, r0
 800c516:	4689      	mov	r9, r1
 800c518:	f7f4 f86e 	bl	80005f8 <__aeabi_dmul>
 800c51c:	a372      	add	r3, pc, #456	; (adr r3, 800c6e8 <__ieee754_log+0x310>)
 800c51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c522:	4604      	mov	r4, r0
 800c524:	460d      	mov	r5, r1
 800c526:	4640      	mov	r0, r8
 800c528:	4649      	mov	r1, r9
 800c52a:	f7f4 f865 	bl	80005f8 <__aeabi_dmul>
 800c52e:	e0a7      	b.n	800c680 <__ieee754_log+0x2a8>
 800c530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c534:	f7f3 feaa 	bl	800028c <__adddf3>
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4650      	mov	r0, sl
 800c53e:	4659      	mov	r1, fp
 800c540:	f7f4 f984 	bl	800084c <__aeabi_ddiv>
 800c544:	ec41 0b18 	vmov	d8, r0, r1
 800c548:	4620      	mov	r0, r4
 800c54a:	f7f3 ffeb 	bl	8000524 <__aeabi_i2d>
 800c54e:	ec53 2b18 	vmov	r2, r3, d8
 800c552:	ec41 0b19 	vmov	d9, r0, r1
 800c556:	ec51 0b18 	vmov	r0, r1, d8
 800c55a:	f7f4 f84d 	bl	80005f8 <__aeabi_dmul>
 800c55e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800c562:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4680      	mov	r8, r0
 800c56e:	4689      	mov	r9, r1
 800c570:	f7f4 f842 	bl	80005f8 <__aeabi_dmul>
 800c574:	a360      	add	r3, pc, #384	; (adr r3, 800c6f8 <__ieee754_log+0x320>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	4606      	mov	r6, r0
 800c57c:	460f      	mov	r7, r1
 800c57e:	f7f4 f83b 	bl	80005f8 <__aeabi_dmul>
 800c582:	a35f      	add	r3, pc, #380	; (adr r3, 800c700 <__ieee754_log+0x328>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fe80 	bl	800028c <__adddf3>
 800c58c:	4632      	mov	r2, r6
 800c58e:	463b      	mov	r3, r7
 800c590:	f7f4 f832 	bl	80005f8 <__aeabi_dmul>
 800c594:	a35c      	add	r3, pc, #368	; (adr r3, 800c708 <__ieee754_log+0x330>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	f7f3 fe77 	bl	800028c <__adddf3>
 800c59e:	4632      	mov	r2, r6
 800c5a0:	463b      	mov	r3, r7
 800c5a2:	f7f4 f829 	bl	80005f8 <__aeabi_dmul>
 800c5a6:	a35a      	add	r3, pc, #360	; (adr r3, 800c710 <__ieee754_log+0x338>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	f7f3 fe6e 	bl	800028c <__adddf3>
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	f7f4 f820 	bl	80005f8 <__aeabi_dmul>
 800c5b8:	a357      	add	r3, pc, #348	; (adr r3, 800c718 <__ieee754_log+0x340>)
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4689      	mov	r9, r1
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	4639      	mov	r1, r7
 800c5c6:	f7f4 f817 	bl	80005f8 <__aeabi_dmul>
 800c5ca:	a355      	add	r3, pc, #340	; (adr r3, 800c720 <__ieee754_log+0x348>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f3 fe5c 	bl	800028c <__adddf3>
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	f7f4 f80e 	bl	80005f8 <__aeabi_dmul>
 800c5dc:	a352      	add	r3, pc, #328	; (adr r3, 800c728 <__ieee754_log+0x350>)
 800c5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e2:	f7f3 fe53 	bl	800028c <__adddf3>
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	463b      	mov	r3, r7
 800c5ea:	f7f4 f805 	bl	80005f8 <__aeabi_dmul>
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	4640      	mov	r0, r8
 800c5f6:	f7f3 fe49 	bl	800028c <__adddf3>
 800c5fa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800c5fe:	9b01      	ldr	r3, [sp, #4]
 800c600:	3551      	adds	r5, #81	; 0x51
 800c602:	431d      	orrs	r5, r3
 800c604:	2d00      	cmp	r5, #0
 800c606:	4680      	mov	r8, r0
 800c608:	4689      	mov	r9, r1
 800c60a:	dd48      	ble.n	800c69e <__ieee754_log+0x2c6>
 800c60c:	4b4e      	ldr	r3, [pc, #312]	; (800c748 <__ieee754_log+0x370>)
 800c60e:	2200      	movs	r2, #0
 800c610:	4650      	mov	r0, sl
 800c612:	4659      	mov	r1, fp
 800c614:	f7f3 fff0 	bl	80005f8 <__aeabi_dmul>
 800c618:	4652      	mov	r2, sl
 800c61a:	465b      	mov	r3, fp
 800c61c:	f7f3 ffec 	bl	80005f8 <__aeabi_dmul>
 800c620:	4602      	mov	r2, r0
 800c622:	460b      	mov	r3, r1
 800c624:	4606      	mov	r6, r0
 800c626:	460f      	mov	r7, r1
 800c628:	4640      	mov	r0, r8
 800c62a:	4649      	mov	r1, r9
 800c62c:	f7f3 fe2e 	bl	800028c <__adddf3>
 800c630:	ec53 2b18 	vmov	r2, r3, d8
 800c634:	f7f3 ffe0 	bl	80005f8 <__aeabi_dmul>
 800c638:	4680      	mov	r8, r0
 800c63a:	4689      	mov	r9, r1
 800c63c:	b964      	cbnz	r4, 800c658 <__ieee754_log+0x280>
 800c63e:	4602      	mov	r2, r0
 800c640:	460b      	mov	r3, r1
 800c642:	4630      	mov	r0, r6
 800c644:	4639      	mov	r1, r7
 800c646:	f7f3 fe1f 	bl	8000288 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	4650      	mov	r0, sl
 800c650:	4659      	mov	r1, fp
 800c652:	f7f3 fe19 	bl	8000288 <__aeabi_dsub>
 800c656:	e6d6      	b.n	800c406 <__ieee754_log+0x2e>
 800c658:	a321      	add	r3, pc, #132	; (adr r3, 800c6e0 <__ieee754_log+0x308>)
 800c65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65e:	ec51 0b19 	vmov	r0, r1, d9
 800c662:	f7f3 ffc9 	bl	80005f8 <__aeabi_dmul>
 800c666:	a320      	add	r3, pc, #128	; (adr r3, 800c6e8 <__ieee754_log+0x310>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	ec51 0b19 	vmov	r0, r1, d9
 800c674:	f7f3 ffc0 	bl	80005f8 <__aeabi_dmul>
 800c678:	4642      	mov	r2, r8
 800c67a:	464b      	mov	r3, r9
 800c67c:	f7f3 fe06 	bl	800028c <__adddf3>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	4630      	mov	r0, r6
 800c686:	4639      	mov	r1, r7
 800c688:	f7f3 fdfe 	bl	8000288 <__aeabi_dsub>
 800c68c:	4652      	mov	r2, sl
 800c68e:	465b      	mov	r3, fp
 800c690:	f7f3 fdfa 	bl	8000288 <__aeabi_dsub>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4620      	mov	r0, r4
 800c69a:	4629      	mov	r1, r5
 800c69c:	e7d9      	b.n	800c652 <__ieee754_log+0x27a>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4650      	mov	r0, sl
 800c6a4:	4659      	mov	r1, fp
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	ec53 2b18 	vmov	r2, r3, d8
 800c6ae:	f7f3 ffa3 	bl	80005f8 <__aeabi_dmul>
 800c6b2:	4606      	mov	r6, r0
 800c6b4:	460f      	mov	r7, r1
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	f43f af23 	beq.w	800c502 <__ieee754_log+0x12a>
 800c6bc:	a308      	add	r3, pc, #32	; (adr r3, 800c6e0 <__ieee754_log+0x308>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	ec51 0b19 	vmov	r0, r1, d9
 800c6c6:	f7f3 ff97 	bl	80005f8 <__aeabi_dmul>
 800c6ca:	a307      	add	r3, pc, #28	; (adr r3, 800c6e8 <__ieee754_log+0x310>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	4604      	mov	r4, r0
 800c6d2:	460d      	mov	r5, r1
 800c6d4:	ec51 0b19 	vmov	r0, r1, d9
 800c6d8:	e727      	b.n	800c52a <__ieee754_log+0x152>
 800c6da:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800c730 <__ieee754_log+0x358>
 800c6de:	e694      	b.n	800c40a <__ieee754_log+0x32>
 800c6e0:	fee00000 	.word	0xfee00000
 800c6e4:	3fe62e42 	.word	0x3fe62e42
 800c6e8:	35793c76 	.word	0x35793c76
 800c6ec:	3dea39ef 	.word	0x3dea39ef
 800c6f0:	55555555 	.word	0x55555555
 800c6f4:	3fd55555 	.word	0x3fd55555
 800c6f8:	df3e5244 	.word	0xdf3e5244
 800c6fc:	3fc2f112 	.word	0x3fc2f112
 800c700:	96cb03de 	.word	0x96cb03de
 800c704:	3fc74664 	.word	0x3fc74664
 800c708:	94229359 	.word	0x94229359
 800c70c:	3fd24924 	.word	0x3fd24924
 800c710:	55555593 	.word	0x55555593
 800c714:	3fe55555 	.word	0x3fe55555
 800c718:	d078c69f 	.word	0xd078c69f
 800c71c:	3fc39a09 	.word	0x3fc39a09
 800c720:	1d8e78af 	.word	0x1d8e78af
 800c724:	3fcc71c5 	.word	0x3fcc71c5
 800c728:	9997fa04 	.word	0x9997fa04
 800c72c:	3fd99999 	.word	0x3fd99999
	...
 800c738:	c3500000 	.word	0xc3500000
 800c73c:	43500000 	.word	0x43500000
 800c740:	7fefffff 	.word	0x7fefffff
 800c744:	3ff00000 	.word	0x3ff00000
 800c748:	3fe00000 	.word	0x3fe00000

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	bf00      	nop
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	bf00      	nop
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
